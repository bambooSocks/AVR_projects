
USART_A_Z_100ms.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000012e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000da  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000012e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000160  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  000001a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000703  00000000  00000000  000001c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000065a  00000000  00000000  000008cb  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000023a  00000000  00000000  00000f25  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  00001160  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000364  00000000  00000000  00001194  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000004d  00000000  00000000  000014f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  00001545  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 4d 00 	call	0x9a	; 0x9a <main>
  78:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <charTX>:
        //_delay_ms(100);
    }
}

void charTX(char c){
    UDR0 = c; // send new line to buffer
  80:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
    //while ((UCSR0A & (1 << UDRE0)) == 0);
    while ((UCSR0A & (1 << TXC0)) == 0);
  84:	e0 ec       	ldi	r30, 0xC0	; 192
  86:	f0 e0       	ldi	r31, 0x00	; 0
  88:	80 81       	ld	r24, Z
  8a:	86 ff       	sbrs	r24, 6
  8c:	fd cf       	rjmp	.-6      	; 0x88 <charTX+0x8>
    UCSR0A |= (1 << TXC0);
  8e:	e0 ec       	ldi	r30, 0xC0	; 192
  90:	f0 e0       	ldi	r31, 0x00	; 0
  92:	80 81       	ld	r24, Z
  94:	80 64       	ori	r24, 0x40	; 64
  96:	80 83       	st	Z, r24
  98:	08 95       	ret

0000009a <main>:

void charTX(char c);

int main(void)
{
    UBRR0 = 103; // setting baud rate to 9600
  9a:	87 e6       	ldi	r24, 0x67	; 103
  9c:	90 e0       	ldi	r25, 0x00	; 0
  9e:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
  a2:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
    UCSR0B |= (1 << TXEN0);
  a6:	e1 ec       	ldi	r30, 0xC1	; 193
  a8:	f0 e0       	ldi	r31, 0x00	; 0
  aa:	80 81       	ld	r24, Z
  ac:	88 60       	ori	r24, 0x08	; 8
  ae:	80 83       	st	Z, r24
    UCSR0C |= (1 << USBS0);
  b0:	e2 ec       	ldi	r30, 0xC2	; 194
  b2:	f0 e0       	ldi	r31, 0x00	; 0
  b4:	80 81       	ld	r24, Z
  b6:	88 60       	ori	r24, 0x08	; 8
  b8:	80 83       	st	Z, r24
    while (1) 
    {
        char c;
        for (c = 'A'; c <= 'Z'; c++){
  ba:	c1 e4       	ldi	r28, 0x41	; 65
            charTX(c);// wait until the data is sent
  bc:	8c 2f       	mov	r24, r28
  be:	0e 94 40 00 	call	0x80	; 0x80 <charTX>
    UCSR0B |= (1 << TXEN0);
    UCSR0C |= (1 << USBS0);
    while (1) 
    {
        char c;
        for (c = 'A'; c <= 'Z'; c++){
  c2:	cf 5f       	subi	r28, 0xFF	; 255
  c4:	cb 35       	cpi	r28, 0x5B	; 91
  c6:	d1 f7       	brne	.-12     	; 0xbc <main+0x22>
            charTX(c);// wait until the data is sent
            //_delay_ms(100);
        }
        charTX(10);
  c8:	8a e0       	ldi	r24, 0x0A	; 10
  ca:	0e 94 40 00 	call	0x80	; 0x80 <charTX>
        charTX(13);
  ce:	8d e0       	ldi	r24, 0x0D	; 13
  d0:	0e 94 40 00 	call	0x80	; 0x80 <charTX>
        //_delay_ms(100);
    }
  d4:	f2 cf       	rjmp	.-28     	; 0xba <main+0x20>

000000d6 <_exit>:
  d6:	f8 94       	cli

000000d8 <__stop_program>:
  d8:	ff cf       	rjmp	.-2      	; 0xd8 <__stop_program>
