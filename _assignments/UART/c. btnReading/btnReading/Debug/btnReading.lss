
btnReading.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000029e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000022a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000018  00800100  00800100  0000029e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000029e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002d0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000040  00000000  00000000  00000310  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000859  00000000  00000000  00000350  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006bc  00000000  00000000  00000ba9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002ed  00000000  00000000  00001265  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000070  00000000  00000000  00001554  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000039a  00000000  00000000  000015c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000168  00000000  00000000  0000195e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000030  00000000  00000000  00001ac6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a8 31       	cpi	r26, 0x18	; 24
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 e6 00 	call	0x1cc	; 0x1cc <main>
  88:	0c 94 13 01 	jmp	0x226	; 0x226 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <charTX>:

    }
}

void charTX(char c){
    UDR0 = c; // send new line to buffer
  90:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
    //while ((UCSR0A & (1 << UDRE0)) == 0);
    while ((UCSR0A & (1 << TXC0)) == 0);
  94:	e0 ec       	ldi	r30, 0xC0	; 192
  96:	f0 e0       	ldi	r31, 0x00	; 0
  98:	80 81       	ld	r24, Z
  9a:	86 ff       	sbrs	r24, 6
  9c:	fd cf       	rjmp	.-6      	; 0x98 <charTX+0x8>
    UCSR0A |= (1 << TXC0);
  9e:	e0 ec       	ldi	r30, 0xC0	; 192
  a0:	f0 e0       	ldi	r31, 0x00	; 0
  a2:	80 81       	ld	r24, Z
  a4:	80 64       	ori	r24, 0x40	; 64
  a6:	80 83       	st	Z, r24
  a8:	08 95       	ret

000000aa <initUART>:
}

void initUART(){
    UBRR0 = 103; // setting baud rate to 9600
  aa:	87 e6       	ldi	r24, 0x67	; 103
  ac:	90 e0       	ldi	r25, 0x00	; 0
  ae:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
  b2:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
    UCSR0B |= (1 << TXEN0); // enabling Transmit
  b6:	e1 ec       	ldi	r30, 0xC1	; 193
  b8:	f0 e0       	ldi	r31, 0x00	; 0
  ba:	80 81       	ld	r24, Z
  bc:	88 60       	ori	r24, 0x08	; 8
  be:	80 83       	st	Z, r24
    UCSR0C |= (1 << USBS0); // setting stop bits to 2
  c0:	e2 ec       	ldi	r30, 0xC2	; 194
  c2:	f0 e0       	ldi	r31, 0x00	; 0
  c4:	80 81       	ld	r24, Z
  c6:	88 60       	ori	r24, 0x08	; 8
  c8:	80 83       	st	Z, r24
  ca:	08 95       	ret

000000cc <numToChar>:
        }
    }
}

char numToChar(uint16_t num){
    switch (num){
  cc:	82 30       	cpi	r24, 0x02	; 2
  ce:	91 05       	cpc	r25, r1
  d0:	31 f0       	breq	.+12     	; 0xde <numToChar+0x12>
  d2:	83 30       	cpi	r24, 0x03	; 3
  d4:	91 05       	cpc	r25, r1
  d6:	29 f0       	breq	.+10     	; 0xe2 <numToChar+0x16>
  d8:	01 97       	sbiw	r24, 0x01	; 1
  da:	29 f4       	brne	.+10     	; 0xe6 <numToChar+0x1a>
  dc:	06 c0       	rjmp	.+12     	; 0xea <numToChar+0x1e>
    case 1: return '1';
    case 2: return '2';
  de:	82 e3       	ldi	r24, 0x32	; 50
  e0:	08 95       	ret
    case 3: return '3';
  e2:	83 e3       	ldi	r24, 0x33	; 51
  e4:	08 95       	ret
    default: return '0';
  e6:	80 e3       	ldi	r24, 0x30	; 48
  e8:	08 95       	ret
    }
}

char numToChar(uint16_t num){
    switch (num){
    case 1: return '1';
  ea:	81 e3       	ldi	r24, 0x31	; 49
    case 2: return '2';
    case 3: return '3';
    default: return '0';
    }
}
  ec:	08 95       	ret

000000ee <debounceBtn>:
    UBRR0 = 103; // setting baud rate to 9600
    UCSR0B |= (1 << TXEN0); // enabling Transmit
    UCSR0C |= (1 << USBS0); // setting stop bits to 2
}

void debounceBtn(uint16_t btn){
  ee:	cf 93       	push	r28
  f0:	df 93       	push	r29
    //DEBOUNCE THE BUTTON
    if (isInpLow[btn]){ // pull up of D4 connected to GND
  f2:	fc 01       	movw	r30, r24
  f4:	ee 0f       	add	r30, r30
  f6:	ff 1f       	adc	r31, r31
  f8:	e0 50       	subi	r30, 0x00	; 0
  fa:	ff 4f       	sbci	r31, 0xFF	; 255
  fc:	20 81       	ld	r18, Z
  fe:	31 81       	ldd	r19, Z+1	; 0x01
 100:	23 2b       	or	r18, r19
 102:	d9 f1       	breq	.+118    	; 0x17a <debounceBtn+0x8c>
        prsd[btn]++; // incrementing the value until it is bigger than sensitivity constant
 104:	fc 01       	movw	r30, r24
 106:	ee 0f       	add	r30, r30
 108:	ff 1f       	adc	r31, r31
 10a:	ee 5e       	subi	r30, 0xEE	; 238
 10c:	fe 4f       	sbci	r31, 0xFE	; 254
 10e:	20 81       	ld	r18, Z
 110:	31 81       	ldd	r19, Z+1	; 0x01
 112:	2f 5f       	subi	r18, 0xFF	; 255
 114:	3f 4f       	sbci	r19, 0xFF	; 255
 116:	31 83       	std	Z+1, r19	; 0x01
 118:	20 83       	st	Z, r18
        if (prsd[btn] > DB_S){ // wait until button is clicked for a longer time = the button was really clicked (debouncing)
 11a:	2b 30       	cpi	r18, 0x0B	; 11
 11c:	31 05       	cpc	r19, r1
 11e:	08 f4       	brcc	.+2      	; 0x122 <debounceBtn+0x34>
 120:	52 c0       	rjmp	.+164    	; 0x1c6 <debounceBtn+0xd8>
 122:	ec 01       	movw	r28, r24
            if (chck[btn] == 0){ //check if the button was prsd just once
 124:	fc 01       	movw	r30, r24
 126:	ee 0f       	add	r30, r30
 128:	ff 1f       	adc	r31, r31
 12a:	ea 5f       	subi	r30, 0xFA	; 250
 12c:	fe 4f       	sbci	r31, 0xFE	; 254
 12e:	80 81       	ld	r24, Z
 130:	91 81       	ldd	r25, Z+1	; 0x01
 132:	89 2b       	or	r24, r25
 134:	d9 f4       	brne	.+54     	; 0x16c <debounceBtn+0x7e>
                    charTX('B');
 136:	82 e4       	ldi	r24, 0x42	; 66
 138:	0e 94 48 00 	call	0x90	; 0x90 <charTX>
                    charTX(numToChar(btn+1));
 13c:	ce 01       	movw	r24, r28
 13e:	01 96       	adiw	r24, 0x01	; 1
 140:	0e 94 66 00 	call	0xcc	; 0xcc <numToChar>
 144:	0e 94 48 00 	call	0x90	; 0x90 <charTX>
                    charTX('\r');
 148:	8d e0       	ldi	r24, 0x0D	; 13
 14a:	0e 94 48 00 	call	0x90	; 0x90 <charTX>
                    charTX('\n');
 14e:	8a e0       	ldi	r24, 0x0A	; 10
 150:	0e 94 48 00 	call	0x90	; 0x90 <charTX>
                    charTX(7);
 154:	87 e0       	ldi	r24, 0x07	; 7
 156:	0e 94 48 00 	call	0x90	; 0x90 <charTX>
                chck[btn] = 1; // changing the value of the flag to indicate that the button is clicked
 15a:	fe 01       	movw	r30, r28
 15c:	ee 0f       	add	r30, r30
 15e:	ff 1f       	adc	r31, r31
 160:	ea 5f       	subi	r30, 0xFA	; 250
 162:	fe 4f       	sbci	r31, 0xFE	; 254
 164:	81 e0       	ldi	r24, 0x01	; 1
 166:	90 e0       	ldi	r25, 0x00	; 0
 168:	91 83       	std	Z+1, r25	; 0x01
 16a:	80 83       	st	Z, r24
            }                // to avoid running the same code multiple times
            prsd[btn] = 0; // clearing debouncing variable
 16c:	cc 0f       	add	r28, r28
 16e:	dd 1f       	adc	r29, r29
 170:	ce 5e       	subi	r28, 0xEE	; 238
 172:	de 4f       	sbci	r29, 0xFE	; 254
 174:	19 82       	std	Y+1, r1	; 0x01
 176:	18 82       	st	Y, r1
 178:	26 c0       	rjmp	.+76     	; 0x1c6 <debounceBtn+0xd8>
        }
        } else {
        rlsd[btn]++; // incrementing the value until it is bigger than sensitivity constant
 17a:	fc 01       	movw	r30, r24
 17c:	ee 0f       	add	r30, r30
 17e:	ff 1f       	adc	r31, r31
 180:	e4 5f       	subi	r30, 0xF4	; 244
 182:	fe 4f       	sbci	r31, 0xFE	; 254
 184:	20 81       	ld	r18, Z
 186:	31 81       	ldd	r19, Z+1	; 0x01
 188:	2f 5f       	subi	r18, 0xFF	; 255
 18a:	3f 4f       	sbci	r19, 0xFF	; 255
 18c:	31 83       	std	Z+1, r19	; 0x01
 18e:	20 83       	st	Z, r18
        if (rlsd[btn] > DB_S){ // wait until button is rlsd for a longer time = the button was really rlsd (debouncing)
 190:	2b 30       	cpi	r18, 0x0B	; 11
 192:	31 05       	cpc	r19, r1
 194:	c0 f0       	brcs	.+48     	; 0x1c6 <debounceBtn+0xd8>
            if (chck[btn] == 1){ //check if the button was rlsd just once
 196:	fc 01       	movw	r30, r24
 198:	ee 0f       	add	r30, r30
 19a:	ff 1f       	adc	r31, r31
 19c:	ea 5f       	subi	r30, 0xFA	; 250
 19e:	fe 4f       	sbci	r31, 0xFE	; 254
 1a0:	20 81       	ld	r18, Z
 1a2:	31 81       	ldd	r19, Z+1	; 0x01
 1a4:	21 30       	cpi	r18, 0x01	; 1
 1a6:	31 05       	cpc	r19, r1
 1a8:	39 f4       	brne	.+14     	; 0x1b8 <debounceBtn+0xca>

                chck[btn] = 0; // clearing flag that button was rlsd and can be clicked again
 1aa:	fc 01       	movw	r30, r24
 1ac:	ee 0f       	add	r30, r30
 1ae:	ff 1f       	adc	r31, r31
 1b0:	ea 5f       	subi	r30, 0xFA	; 250
 1b2:	fe 4f       	sbci	r31, 0xFE	; 254
 1b4:	11 82       	std	Z+1, r1	; 0x01
 1b6:	10 82       	st	Z, r1
            }
            rlsd[btn] = 0; // clearing debouncing variable
 1b8:	88 0f       	add	r24, r24
 1ba:	99 1f       	adc	r25, r25
 1bc:	fc 01       	movw	r30, r24
 1be:	e4 5f       	subi	r30, 0xF4	; 244
 1c0:	fe 4f       	sbci	r31, 0xFE	; 254
 1c2:	11 82       	std	Z+1, r1	; 0x01
 1c4:	10 82       	st	Z, r1
        }
    }
}
 1c6:	df 91       	pop	r29
 1c8:	cf 91       	pop	r28
 1ca:	08 95       	ret

000001cc <main>:
void debounceBtn(uint16_t btn);
char numToChar(uint16_t num);

int main(void)
{
    initUART();
 1cc:	0e 94 55 00 	call	0xaa	; 0xaa <initUART>
    PORTD |= (1 << PORTD4) | (1 << PORTD5) | (1 << PORTD6); // setting up pull ups
 1d0:	8b b1       	in	r24, 0x0b	; 11
 1d2:	80 67       	ori	r24, 0x70	; 112
 1d4:	8b b9       	out	0x0b, r24	; 11
    while (1) 
    {   

        isInpLow[0] = !(PIND & (1 << PIND4)); // setting the flag high when red button was pressed (input is LOW)
 1d6:	c0 e0       	ldi	r28, 0x00	; 0
 1d8:	d1 e0       	ldi	r29, 0x01	; 1
 1da:	11 e0       	ldi	r17, 0x01	; 1
 1dc:	89 b1       	in	r24, 0x09	; 9
 1de:	82 95       	swap	r24
 1e0:	8f 70       	andi	r24, 0x0F	; 15
 1e2:	81 27       	eor	r24, r17
 1e4:	81 70       	andi	r24, 0x01	; 1
 1e6:	88 83       	st	Y, r24
 1e8:	19 82       	std	Y+1, r1	; 0x01
        isInpLow[1] = !(PIND & (1 << PIND5)); // setting the flag high when green button was pressed (input is LOW)
 1ea:	89 b1       	in	r24, 0x09	; 9
 1ec:	82 95       	swap	r24
 1ee:	86 95       	lsr	r24
 1f0:	87 70       	andi	r24, 0x07	; 7
 1f2:	81 27       	eor	r24, r17
 1f4:	81 70       	andi	r24, 0x01	; 1
 1f6:	8a 83       	std	Y+2, r24	; 0x02
 1f8:	1b 82       	std	Y+3, r1	; 0x03
        isInpLow[2] = !(PIND & (1 << PIND6)); // setting the flag high when yellow button was pressed (input is LOW)
 1fa:	89 b1       	in	r24, 0x09	; 9
 1fc:	82 95       	swap	r24
 1fe:	86 95       	lsr	r24
 200:	86 95       	lsr	r24
 202:	83 70       	andi	r24, 0x03	; 3
 204:	81 27       	eor	r24, r17
 206:	81 70       	andi	r24, 0x01	; 1
 208:	8c 83       	std	Y+4, r24	; 0x04
 20a:	1d 82       	std	Y+5, r1	; 0x05

        for (int i = 0; i<3; i++){
            debounceBtn(i);
 20c:	80 e0       	ldi	r24, 0x00	; 0
 20e:	90 e0       	ldi	r25, 0x00	; 0
 210:	0e 94 77 00 	call	0xee	; 0xee <debounceBtn>
 214:	81 e0       	ldi	r24, 0x01	; 1
 216:	90 e0       	ldi	r25, 0x00	; 0
 218:	0e 94 77 00 	call	0xee	; 0xee <debounceBtn>
 21c:	82 e0       	ldi	r24, 0x02	; 2
 21e:	90 e0       	ldi	r25, 0x00	; 0
 220:	0e 94 77 00 	call	0xee	; 0xee <debounceBtn>
 224:	db cf       	rjmp	.-74     	; 0x1dc <main+0x10>

00000226 <_exit>:
 226:	f8 94       	cli

00000228 <__stop_program>:
 228:	ff cf       	rjmp	.-2      	; 0x228 <__stop_program>
