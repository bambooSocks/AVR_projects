
btnTXledRX.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000002c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000250  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000020  00800100  00800100  000002c4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002c4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002f4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000048  00000000  00000000  00000334  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000085b  00000000  00000000  0000037c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006e3  00000000  00000000  00000bd7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000335  00000000  00000000  000012ba  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000080  00000000  00000000  000015f0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000039f  00000000  00000000  00001670  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000107  00000000  00000000  00001a0f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000038  00000000  00000000  00001b16  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a0 32       	cpi	r26, 0x20	; 32
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <main>
  88:	0c 94 26 01 	jmp	0x24c	; 0x24c <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <showLED>:
        char c = charRX();
        showLED(c - '0');
    }
}

void showLED(uint16_t led){
  90:	9c 01       	movw	r18, r24
    PORTB &= 0xF0;
  92:	95 b1       	in	r25, 0x05	; 5
  94:	90 7f       	andi	r25, 0xF0	; 240
  96:	95 b9       	out	0x05, r25	; 5
    switch (led){
  98:	21 30       	cpi	r18, 0x01	; 1
  9a:	31 05       	cpc	r19, r1
  9c:	51 f0       	breq	.+20     	; 0xb2 <showLED+0x22>
  9e:	38 f0       	brcs	.+14     	; 0xae <showLED+0x1e>
  a0:	22 30       	cpi	r18, 0x02	; 2
  a2:	31 05       	cpc	r19, r1
  a4:	41 f0       	breq	.+16     	; 0xb6 <showLED+0x26>
  a6:	23 30       	cpi	r18, 0x03	; 3
  a8:	31 05       	cpc	r19, r1
  aa:	39 f0       	breq	.+14     	; 0xba <showLED+0x2a>
  ac:	08 95       	ret
    case 0: PORTB |= 0x01;
  ae:	28 9a       	sbi	0x05, 0	; 5
    break;
  b0:	08 95       	ret
    case 1: PORTB |= 0x02;
  b2:	29 9a       	sbi	0x05, 1	; 5
    break;
  b4:	08 95       	ret
    case 2: PORTB |= 0x04;
  b6:	2a 9a       	sbi	0x05, 2	; 5
    break;
  b8:	08 95       	ret
    case 3: PORTB |= 0x08;
  ba:	2b 9a       	sbi	0x05, 3	; 5
  bc:	08 95       	ret

000000be <initUART>:
        }
    }
}

void initUART(){
    UBRR0 = 103; // setting baud rate to 9600
  be:	87 e6       	ldi	r24, 0x67	; 103
  c0:	90 e0       	ldi	r25, 0x00	; 0
  c2:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
  c6:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
    UCSR0B |= (1 << TXEN0) | (1 << RXEN0); // enabling Transmit and Receive
  ca:	e1 ec       	ldi	r30, 0xC1	; 193
  cc:	f0 e0       	ldi	r31, 0x00	; 0
  ce:	80 81       	ld	r24, Z
  d0:	88 61       	ori	r24, 0x18	; 24
  d2:	80 83       	st	Z, r24
    UCSR0C |= (1 << USBS0); // setting stop bits to 2
  d4:	e2 ec       	ldi	r30, 0xC2	; 194
  d6:	f0 e0       	ldi	r31, 0x00	; 0
  d8:	80 81       	ld	r24, Z
  da:	88 60       	ori	r24, 0x08	; 8
  dc:	80 83       	st	Z, r24
  de:	08 95       	ret

000000e0 <charTX>:
}

void charTX(char c){
    UDR0 = c; // send new line to buffer
  e0:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
    //while ((UCSR0A & (1 << UDRE0)) == 0);
    while ((UCSR0A & (1 << TXC0)) == 0);
  e4:	e0 ec       	ldi	r30, 0xC0	; 192
  e6:	f0 e0       	ldi	r31, 0x00	; 0
  e8:	80 81       	ld	r24, Z
  ea:	86 ff       	sbrs	r24, 6
  ec:	fd cf       	rjmp	.-6      	; 0xe8 <charTX+0x8>
    UCSR0A |= (1 << TXC0);
  ee:	e0 ec       	ldi	r30, 0xC0	; 192
  f0:	f0 e0       	ldi	r31, 0x00	; 0
  f2:	80 81       	ld	r24, Z
  f4:	80 64       	ori	r24, 0x40	; 64
  f6:	80 83       	st	Z, r24
  f8:	08 95       	ret

000000fa <debounceBtn>:
    break;
    }
    
}

void debounceBtn(uint16_t btn){
  fa:	cf 93       	push	r28
  fc:	df 93       	push	r29
  fe:	ec 01       	movw	r28, r24
    //DEBOUNCE THE BUTTON
    if (isInpLow[btn]){ // pull up of D4 connected to GND
 100:	fc 01       	movw	r30, r24
 102:	ee 0f       	add	r30, r30
 104:	ff 1f       	adc	r31, r31
 106:	e0 50       	subi	r30, 0x00	; 0
 108:	ff 4f       	sbci	r31, 0xFF	; 255
 10a:	80 81       	ld	r24, Z
 10c:	91 81       	ldd	r25, Z+1	; 0x01
 10e:	89 2b       	or	r24, r25
 110:	51 f1       	breq	.+84     	; 0x166 <debounceBtn+0x6c>
        prsd[btn]++; // incrementing the value until it is bigger than sensitivity constant
 112:	fe 01       	movw	r30, r28
 114:	ee 0f       	add	r30, r30
 116:	ff 1f       	adc	r31, r31
 118:	e8 5e       	subi	r30, 0xE8	; 232
 11a:	fe 4f       	sbci	r31, 0xFE	; 254
 11c:	80 81       	ld	r24, Z
 11e:	91 81       	ldd	r25, Z+1	; 0x01
 120:	01 96       	adiw	r24, 0x01	; 1
 122:	91 83       	std	Z+1, r25	; 0x01
 124:	80 83       	st	Z, r24
        if (prsd[btn] > DB_S){ // wait until button is clicked for a longer time = the button was really clicked (debouncing)
 126:	0b 97       	sbiw	r24, 0x0b	; 11
 128:	08 f4       	brcc	.+2      	; 0x12c <debounceBtn+0x32>
 12a:	3f c0       	rjmp	.+126    	; 0x1aa <debounceBtn+0xb0>
            if (chck[btn] == 0){ //check if the button was prsd just once
 12c:	fe 01       	movw	r30, r28
 12e:	ee 0f       	add	r30, r30
 130:	ff 1f       	adc	r31, r31
 132:	e8 5f       	subi	r30, 0xF8	; 248
 134:	fe 4f       	sbci	r31, 0xFE	; 254
 136:	80 81       	ld	r24, Z
 138:	91 81       	ldd	r25, Z+1	; 0x01
 13a:	89 2b       	or	r24, r25
 13c:	69 f4       	brne	.+26     	; 0x158 <debounceBtn+0x5e>
                    charTX('0' + btn);
 13e:	8c 2f       	mov	r24, r28
 140:	80 5d       	subi	r24, 0xD0	; 208
 142:	0e 94 70 00 	call	0xe0	; 0xe0 <charTX>
                chck[btn] = 1; // changing the value of the flag to indicate that the button is clicked
 146:	fe 01       	movw	r30, r28
 148:	ee 0f       	add	r30, r30
 14a:	ff 1f       	adc	r31, r31
 14c:	e8 5f       	subi	r30, 0xF8	; 248
 14e:	fe 4f       	sbci	r31, 0xFE	; 254
 150:	81 e0       	ldi	r24, 0x01	; 1
 152:	90 e0       	ldi	r25, 0x00	; 0
 154:	91 83       	std	Z+1, r25	; 0x01
 156:	80 83       	st	Z, r24
            }                // to avoid running the same code multiple times
            prsd[btn] = 0; // clearing debouncing variable
 158:	cc 0f       	add	r28, r28
 15a:	dd 1f       	adc	r29, r29
 15c:	c8 5e       	subi	r28, 0xE8	; 232
 15e:	de 4f       	sbci	r29, 0xFE	; 254
 160:	19 82       	std	Y+1, r1	; 0x01
 162:	18 82       	st	Y, r1
 164:	22 c0       	rjmp	.+68     	; 0x1aa <debounceBtn+0xb0>
        }
    } else {
        rlsd[btn]++; // incrementing the value until it is bigger than sensitivity constant
 166:	fe 01       	movw	r30, r28
 168:	ee 0f       	add	r30, r30
 16a:	ff 1f       	adc	r31, r31
 16c:	e0 5f       	subi	r30, 0xF0	; 240
 16e:	fe 4f       	sbci	r31, 0xFE	; 254
 170:	80 81       	ld	r24, Z
 172:	91 81       	ldd	r25, Z+1	; 0x01
 174:	01 96       	adiw	r24, 0x01	; 1
 176:	91 83       	std	Z+1, r25	; 0x01
 178:	80 83       	st	Z, r24
        if (rlsd[btn] > DB_S){ // wait until button is rlsd for a longer time = the button was really rlsd (debouncing)
 17a:	0b 97       	sbiw	r24, 0x0b	; 11
 17c:	b0 f0       	brcs	.+44     	; 0x1aa <debounceBtn+0xb0>
            if (chck[btn] == 1){ //check if the button was rlsd just once
 17e:	fe 01       	movw	r30, r28
 180:	ee 0f       	add	r30, r30
 182:	ff 1f       	adc	r31, r31
 184:	e8 5f       	subi	r30, 0xF8	; 248
 186:	fe 4f       	sbci	r31, 0xFE	; 254
 188:	80 81       	ld	r24, Z
 18a:	91 81       	ldd	r25, Z+1	; 0x01
 18c:	01 97       	sbiw	r24, 0x01	; 1
 18e:	39 f4       	brne	.+14     	; 0x19e <debounceBtn+0xa4>

                chck[btn] = 0; // clearing flag that button was rlsd and can be clicked again
 190:	fe 01       	movw	r30, r28
 192:	ee 0f       	add	r30, r30
 194:	ff 1f       	adc	r31, r31
 196:	e8 5f       	subi	r30, 0xF8	; 248
 198:	fe 4f       	sbci	r31, 0xFE	; 254
 19a:	11 82       	std	Z+1, r1	; 0x01
 19c:	10 82       	st	Z, r1
            }
            rlsd[btn] = 0; // clearing debouncing variable
 19e:	cc 0f       	add	r28, r28
 1a0:	dd 1f       	adc	r29, r29
 1a2:	c0 5f       	subi	r28, 0xF0	; 240
 1a4:	de 4f       	sbci	r29, 0xFE	; 254
 1a6:	19 82       	std	Y+1, r1	; 0x01
 1a8:	18 82       	st	Y, r1
        }
    }
}
 1aa:	df 91       	pop	r29
 1ac:	cf 91       	pop	r28
 1ae:	08 95       	ret

000001b0 <charRX>:
    while ((UCSR0A & (1 << TXC0)) == 0);
    UCSR0A |= (1 << TXC0);
}

char charRX(){
    while ((UCSR0A & (1<<RXC0))== 0); // wait for data do get to buffer
 1b0:	e0 ec       	ldi	r30, 0xC0	; 192
 1b2:	f0 e0       	ldi	r31, 0x00	; 0
 1b4:	80 81       	ld	r24, Z
 1b6:	88 23       	and	r24, r24
 1b8:	ec f7       	brge	.-6      	; 0x1b4 <charRX+0x4>
    return UDR0; // return data from buffer
 1ba:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
}
 1be:	08 95       	ret

000001c0 <main>:
void charTX(char c);
void showLED(uint16_t led);

int main(void)
{
    initUART();
 1c0:	0e 94 5f 00 	call	0xbe	; 0xbe <initUART>
    PORTD |= 0xF0;
 1c4:	8b b1       	in	r24, 0x0b	; 11
 1c6:	80 6f       	ori	r24, 0xF0	; 240
 1c8:	8b b9       	out	0x0b, r24	; 11
    DDRB |= 0x0F;
 1ca:	84 b1       	in	r24, 0x04	; 4
 1cc:	8f 60       	ori	r24, 0x0F	; 15
 1ce:	84 b9       	out	0x04, r24	; 4

    while (1) 
    {
        isInpLow[0] = !(PIND & (1 << PIND4)); // setting the flag high when red button was prsd (input is LOW)
 1d0:	c0 e0       	ldi	r28, 0x00	; 0
 1d2:	d1 e0       	ldi	r29, 0x01	; 1
 1d4:	11 e0       	ldi	r17, 0x01	; 1
 1d6:	89 b1       	in	r24, 0x09	; 9
 1d8:	82 95       	swap	r24
 1da:	8f 70       	andi	r24, 0x0F	; 15
 1dc:	81 27       	eor	r24, r17
 1de:	81 70       	andi	r24, 0x01	; 1
 1e0:	88 83       	st	Y, r24
 1e2:	19 82       	std	Y+1, r1	; 0x01
        isInpLow[1] = !(PIND & (1 << PIND5));
 1e4:	89 b1       	in	r24, 0x09	; 9
 1e6:	82 95       	swap	r24
 1e8:	86 95       	lsr	r24
 1ea:	87 70       	andi	r24, 0x07	; 7
 1ec:	81 27       	eor	r24, r17
 1ee:	81 70       	andi	r24, 0x01	; 1
 1f0:	8a 83       	std	Y+2, r24	; 0x02
 1f2:	1b 82       	std	Y+3, r1	; 0x03
        isInpLow[2] = !(PIND & (1 << PIND6));
 1f4:	89 b1       	in	r24, 0x09	; 9
 1f6:	82 95       	swap	r24
 1f8:	86 95       	lsr	r24
 1fa:	86 95       	lsr	r24
 1fc:	83 70       	andi	r24, 0x03	; 3
 1fe:	81 27       	eor	r24, r17
 200:	81 70       	andi	r24, 0x01	; 1
 202:	8c 83       	std	Y+4, r24	; 0x04
 204:	1d 82       	std	Y+5, r1	; 0x05
        isInpLow[3] = !(PIND & (1 << PIND7));
 206:	89 b1       	in	r24, 0x09	; 9
 208:	08 2e       	mov	r0, r24
 20a:	00 0c       	add	r0, r0
 20c:	99 0b       	sbc	r25, r25
 20e:	80 95       	com	r24
 210:	90 95       	com	r25
 212:	89 2f       	mov	r24, r25
 214:	88 1f       	adc	r24, r24
 216:	88 27       	eor	r24, r24
 218:	88 1f       	adc	r24, r24
 21a:	8e 83       	std	Y+6, r24	; 0x06
 21c:	1f 82       	std	Y+7, r1	; 0x07
        
        for (int i=0; i<4; i++){
            debounceBtn(i);
 21e:	80 e0       	ldi	r24, 0x00	; 0
 220:	90 e0       	ldi	r25, 0x00	; 0
 222:	0e 94 7d 00 	call	0xfa	; 0xfa <debounceBtn>
 226:	81 e0       	ldi	r24, 0x01	; 1
 228:	90 e0       	ldi	r25, 0x00	; 0
 22a:	0e 94 7d 00 	call	0xfa	; 0xfa <debounceBtn>
 22e:	82 e0       	ldi	r24, 0x02	; 2
 230:	90 e0       	ldi	r25, 0x00	; 0
 232:	0e 94 7d 00 	call	0xfa	; 0xfa <debounceBtn>
 236:	83 e0       	ldi	r24, 0x03	; 3
 238:	90 e0       	ldi	r25, 0x00	; 0
 23a:	0e 94 7d 00 	call	0xfa	; 0xfa <debounceBtn>
        }
        char c = charRX();
 23e:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <charRX>
        showLED(c - '0');
 242:	90 e0       	ldi	r25, 0x00	; 0
 244:	c0 97       	sbiw	r24, 0x30	; 48
 246:	0e 94 48 00 	call	0x90	; 0x90 <showLED>
    }
 24a:	c5 cf       	rjmp	.-118    	; 0x1d6 <main+0x16>

0000024c <_exit>:
 24c:	f8 94       	cli

0000024e <__stop_program>:
 24e:	ff cf       	rjmp	.-2      	; 0x24e <__stop_program>
