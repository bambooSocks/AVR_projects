
UART_LED.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001de  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000018a  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001de  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000210  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000038  00000000  00000000  00000250  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000711  00000000  00000000  00000288  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000671  00000000  00000000  00000999  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002b2  00000000  00000000  0000100a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000054  00000000  00000000  000012bc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000366  00000000  00000000  00001310  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000061  00000000  00000000  00001676  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  000016d7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 6d 00 	jmp	0xda	; 0xda <__ctors_end>
   4:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
   8:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
   c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  10:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  14:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  18:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  1c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  20:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  24:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  28:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  2c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  30:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  34:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  38:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  3c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  40:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  44:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  48:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  4c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  50:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  54:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  58:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  5c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  60:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  64:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  68:	b6 00       	.word	0x00b6	; ????
  6a:	9a 00       	.word	0x009a	; ????
  6c:	9a 00       	.word	0x009a	; ????
  6e:	9a 00       	.word	0x009a	; ????
  70:	9a 00       	.word	0x009a	; ????
  72:	9a 00       	.word	0x009a	; ????
  74:	ac 00       	.word	0x00ac	; ????
  76:	9a 00       	.word	0x009a	; ????
  78:	9a 00       	.word	0x009a	; ????
  7a:	9a 00       	.word	0x009a	; ????
  7c:	9a 00       	.word	0x009a	; ????
  7e:	9a 00       	.word	0x009a	; ????
  80:	9a 00       	.word	0x009a	; ????
  82:	9a 00       	.word	0x009a	; ????
  84:	9a 00       	.word	0x009a	; ????
  86:	9a 00       	.word	0x009a	; ????
  88:	9a 00       	.word	0x009a	; ????
  8a:	a7 00       	.word	0x00a7	; ????
  8c:	9a 00       	.word	0x009a	; ????
  8e:	9a 00       	.word	0x009a	; ????
  90:	9a 00       	.word	0x009a	; ????
  92:	9a 00       	.word	0x009a	; ????
  94:	9a 00       	.word	0x009a	; ????
  96:	9a 00       	.word	0x009a	; ????
  98:	b1 00       	.word	0x00b1	; ????
  9a:	9a 00       	.word	0x009a	; ????
  9c:	9a 00       	.word	0x009a	; ????
  9e:	9a 00       	.word	0x009a	; ????
  a0:	9a 00       	.word	0x009a	; ????
  a2:	9a 00       	.word	0x009a	; ????
  a4:	9a 00       	.word	0x009a	; ????
  a6:	9a 00       	.word	0x009a	; ????
  a8:	b6 00       	.word	0x00b6	; ????
  aa:	9a 00       	.word	0x009a	; ????
  ac:	9a 00       	.word	0x009a	; ????
  ae:	9a 00       	.word	0x009a	; ????
  b0:	9a 00       	.word	0x009a	; ????
  b2:	9a 00       	.word	0x009a	; ????
  b4:	ac 00       	.word	0x00ac	; ????
  b6:	9a 00       	.word	0x009a	; ????
  b8:	9a 00       	.word	0x009a	; ????
  ba:	9a 00       	.word	0x009a	; ????
  bc:	9a 00       	.word	0x009a	; ????
  be:	9a 00       	.word	0x009a	; ????
  c0:	9a 00       	.word	0x009a	; ????
  c2:	9a 00       	.word	0x009a	; ????
  c4:	9a 00       	.word	0x009a	; ????
  c6:	9a 00       	.word	0x009a	; ????
  c8:	9a 00       	.word	0x009a	; ????
  ca:	a7 00       	.word	0x00a7	; ????
  cc:	9a 00       	.word	0x009a	; ????
  ce:	9a 00       	.word	0x009a	; ????
  d0:	9a 00       	.word	0x009a	; ????
  d2:	9a 00       	.word	0x009a	; ????
  d4:	9a 00       	.word	0x009a	; ????
  d6:	9a 00       	.word	0x009a	; ????
  d8:	b1 00       	.word	0x00b1	; ????

000000da <__ctors_end>:
  da:	11 24       	eor	r1, r1
  dc:	1f be       	out	0x3f, r1	; 63
  de:	cf ef       	ldi	r28, 0xFF	; 255
  e0:	d8 e0       	ldi	r29, 0x08	; 8
  e2:	de bf       	out	0x3e, r29	; 62
  e4:	cd bf       	out	0x3d, r28	; 61
  e6:	0e 94 92 00 	call	0x124	; 0x124 <main>
  ea:	0c 94 c3 00 	jmp	0x186	; 0x186 <_exit>

000000ee <__bad_interrupt>:
  ee:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000f2 <charRX>:
}

void charTX(char c){
    UDR0 = c; // send new line to buffer
    while ((UCSR0A & (1 << TXC0)) == 0);
    UCSR0A |= (1 << TXC0);
  f2:	e0 ec       	ldi	r30, 0xC0	; 192
  f4:	f0 e0       	ldi	r31, 0x00	; 0
  f6:	80 81       	ld	r24, Z
  f8:	88 23       	and	r24, r24
  fa:	ec f7       	brge	.-6      	; 0xf6 <charRX+0x4>
  fc:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 100:	08 95       	ret

00000102 <initUART>:
}

void initUART(){
    UBRR0 = 103; // setting baud rate to 9600
 102:	87 e6       	ldi	r24, 0x67	; 103
 104:	90 e0       	ldi	r25, 0x00	; 0
 106:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
 10a:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
    UCSR0B |= (1 << TXEN0) | (1 << RXEN0); // enabling Transmit and receive
 10e:	e1 ec       	ldi	r30, 0xC1	; 193
 110:	f0 e0       	ldi	r31, 0x00	; 0
 112:	80 81       	ld	r24, Z
 114:	88 61       	ori	r24, 0x18	; 24
 116:	80 83       	st	Z, r24
    UCSR0C |= (1 << USBS0); // setting stop bits to 2
 118:	e2 ec       	ldi	r30, 0xC2	; 194
 11a:	f0 e0       	ldi	r31, 0x00	; 0
 11c:	80 81       	ld	r24, Z
 11e:	88 60       	ori	r24, 0x08	; 8
 120:	80 83       	st	Z, r24
 122:	08 95       	ret

00000124 <main>:
void charTX(char c);
void initUART();

int main(void)
{
    DDRB |= 0x07; // setting b0-3 as output
 124:	84 b1       	in	r24, 0x04	; 4
 126:	87 60       	ori	r24, 0x07	; 7
 128:	84 b9       	out	0x04, r24	; 4
    PORTB &= 0xF8; // turning leds off
 12a:	85 b1       	in	r24, 0x05	; 5
 12c:	88 7f       	andi	r24, 0xF8	; 248
 12e:	85 b9       	out	0x05, r24	; 5
    initUART();
 130:	0e 94 81 00 	call	0x102	; 0x102 <initUART>
    while (1) 
    {
        char c = charRX();
 134:	0e 94 79 00 	call	0xf2	; 0xf2 <charRX>
        switch (c){
 138:	90 e0       	ldi	r25, 0x00	; 0
 13a:	fc 01       	movw	r30, r24
 13c:	e1 54       	subi	r30, 0x41	; 65
 13e:	f1 09       	sbc	r31, r1
 140:	e9 33       	cpi	r30, 0x39	; 57
 142:	f1 05       	cpc	r31, r1
 144:	b8 f7       	brcc	.-18     	; 0x134 <main+0x10>
 146:	ec 5c       	subi	r30, 0xCC	; 204
 148:	ff 4f       	sbci	r31, 0xFF	; 255
 14a:	0c 94 bd 00 	jmp	0x17a	; 0x17a <__tablejump2__>
        case 'R':
        case 'r':
            PORTB &= 0xF8;
 14e:	85 b1       	in	r24, 0x05	; 5
 150:	88 7f       	andi	r24, 0xF8	; 248
 152:	85 b9       	out	0x05, r24	; 5
            PORTB |= 0x01;
 154:	28 9a       	sbi	0x05, 0	; 5
            break;
 156:	ee cf       	rjmp	.-36     	; 0x134 <main+0x10>
        case 'G':
        case 'g':
            PORTB &= 0xF8;
 158:	85 b1       	in	r24, 0x05	; 5
 15a:	88 7f       	andi	r24, 0xF8	; 248
 15c:	85 b9       	out	0x05, r24	; 5
            PORTB |= 0x02;
 15e:	29 9a       	sbi	0x05, 1	; 5
            break;
 160:	e9 cf       	rjmp	.-46     	; 0x134 <main+0x10>
        case 'Y':
        case 'y':
            PORTB &= 0xF8;
 162:	85 b1       	in	r24, 0x05	; 5
 164:	88 7f       	andi	r24, 0xF8	; 248
 166:	85 b9       	out	0x05, r24	; 5
            PORTB |= 0x04;
 168:	2a 9a       	sbi	0x05, 2	; 5
            break;
 16a:	e4 cf       	rjmp	.-56     	; 0x134 <main+0x10>
        case 'A':
        case 'a':
            PORTB &= 0xF8;
 16c:	85 b1       	in	r24, 0x05	; 5
 16e:	88 7f       	andi	r24, 0xF8	; 248
 170:	85 b9       	out	0x05, r24	; 5
            PORTB |= 0x07;
 172:	85 b1       	in	r24, 0x05	; 5
 174:	87 60       	ori	r24, 0x07	; 7
 176:	85 b9       	out	0x05, r24	; 5
            break;
 178:	dd cf       	rjmp	.-70     	; 0x134 <main+0x10>

0000017a <__tablejump2__>:
 17a:	ee 0f       	add	r30, r30
 17c:	ff 1f       	adc	r31, r31
 17e:	05 90       	lpm	r0, Z+
 180:	f4 91       	lpm	r31, Z
 182:	e0 2d       	mov	r30, r0
 184:	09 94       	ijmp

00000186 <_exit>:
 186:	f8 94       	cli

00000188 <__stop_program>:
 188:	ff cf       	rjmp	.-2      	; 0x188 <__stop_program>
