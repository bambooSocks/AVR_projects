
start_seconds_UART.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000022  00800100  00000682  000006f6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000682  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000718  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000748  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000038  00000000  00000000  00000788  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000887  00000000  00000000  000007c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006ef  00000000  00000000  00001047  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003ee  00000000  00000000  00001736  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000094  00000000  00000000  00001b24  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003d3  00000000  00000000  00001bb8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000112  00000000  00000000  00001f8b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  0000209d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e2 e8       	ldi	r30, 0x82	; 130
  7c:	f6 e0       	ldi	r31, 0x06	; 6
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 32       	cpi	r26, 0x22	; 34
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 4b 00 	call	0x96	; 0x96 <main>
  8e:	0c 94 3f 03 	jmp	0x67e	; 0x67e <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <main>:
void uartInit();
void uartTransmitChar(char data);
void toString(char c[], uint16_t num);

int main(void)
{
  96:	cf 93       	push	r28
  98:	df 93       	push	r29
  9a:	cd b7       	in	r28, 0x3d	; 61
  9c:	de b7       	in	r29, 0x3e	; 62
  9e:	ec 97       	sbiw	r28, 0x3c	; 60
  a0:	0f b6       	in	r0, 0x3f	; 63
  a2:	f8 94       	cli
  a4:	de bf       	out	0x3e, r29	; 62
  a6:	0f be       	out	0x3f, r0	; 63
  a8:	cd bf       	out	0x3d, r28	; 61
    uartInit();
  aa:	0e 94 24 01 	call	0x248	; 0x248 <uartInit>
    char str[5] = {0};
  ae:	25 e0       	ldi	r18, 0x05	; 5
  b0:	ce 01       	movw	r24, r28
  b2:	47 96       	adiw	r24, 0x17	; 23
  b4:	fc 01       	movw	r30, r24
  b6:	32 2f       	mov	r19, r18
  b8:	11 92       	st	Z+, r1
  ba:	3a 95       	dec	r19
  bc:	e9 f7       	brne	.-6      	; 0xb8 <main+0x22>
    uint16_t sec = 0;
  be:	1a 82       	std	Y+2, r1	; 0x02
  c0:	19 82       	std	Y+1, r1	; 0x01
    char msg[33] = "Seconds since the program start: ";
  c2:	81 e2       	ldi	r24, 0x21	; 33
  c4:	e0 e0       	ldi	r30, 0x00	; 0
  c6:	f1 e0       	ldi	r31, 0x01	; 1
  c8:	de 01       	movw	r26, r28
  ca:	5c 96       	adiw	r26, 0x1c	; 28
  cc:	01 90       	ld	r0, Z+
  ce:	0d 92       	st	X+, r0
  d0:	8a 95       	dec	r24
  d2:	e1 f7       	brne	.-8      	; 0xcc <main+0x36>
    uint16_t arrL = sizeof(msg)/sizeof(msg[0]);
  d4:	81 e2       	ldi	r24, 0x21	; 33
  d6:	90 e0       	ldi	r25, 0x00	; 0
  d8:	98 87       	std	Y+8, r25	; 0x08
  da:	8f 83       	std	Y+7, r24	; 0x07
  dc:	80 e0       	ldi	r24, 0x00	; 0
  de:	90 e0       	ldi	r25, 0x00	; 0
  e0:	aa e7       	ldi	r26, 0x7A	; 122
  e2:	b4 e4       	ldi	r27, 0x44	; 68
  e4:	89 87       	std	Y+9, r24	; 0x09
  e6:	9a 87       	std	Y+10, r25	; 0x0a
  e8:	ab 87       	std	Y+11, r26	; 0x0b
  ea:	bc 87       	std	Y+12, r27	; 0x0c

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
  ec:	20 e0       	ldi	r18, 0x00	; 0
  ee:	30 e0       	ldi	r19, 0x00	; 0
  f0:	4a e7       	ldi	r20, 0x7A	; 122
  f2:	55 e4       	ldi	r21, 0x45	; 69
  f4:	69 85       	ldd	r22, Y+9	; 0x09
  f6:	7a 85       	ldd	r23, Y+10	; 0x0a
  f8:	8b 85       	ldd	r24, Y+11	; 0x0b
  fa:	9c 85       	ldd	r25, Y+12	; 0x0c
  fc:	0e 94 73 02 	call	0x4e6	; 0x4e6 <__mulsf3>
 100:	dc 01       	movw	r26, r24
 102:	cb 01       	movw	r24, r22
 104:	8d 87       	std	Y+13, r24	; 0x0d
 106:	9e 87       	std	Y+14, r25	; 0x0e
 108:	af 87       	std	Y+15, r26	; 0x0f
 10a:	b8 8b       	std	Y+16, r27	; 0x10
	if (__tmp < 1.0)
 10c:	20 e0       	ldi	r18, 0x00	; 0
 10e:	30 e0       	ldi	r19, 0x00	; 0
 110:	40 e8       	ldi	r20, 0x80	; 128
 112:	5f e3       	ldi	r21, 0x3F	; 63
 114:	6d 85       	ldd	r22, Y+13	; 0x0d
 116:	7e 85       	ldd	r23, Y+14	; 0x0e
 118:	8f 85       	ldd	r24, Y+15	; 0x0f
 11a:	98 89       	ldd	r25, Y+16	; 0x10
 11c:	0e 94 ed 01 	call	0x3da	; 0x3da <__cmpsf2>
 120:	88 23       	and	r24, r24
 122:	2c f4       	brge	.+10     	; 0x12e <main+0x98>
		__ticks = 1;
 124:	81 e0       	ldi	r24, 0x01	; 1
 126:	90 e0       	ldi	r25, 0x00	; 0
 128:	9a 8b       	std	Y+18, r25	; 0x12
 12a:	89 8b       	std	Y+17, r24	; 0x11
 12c:	3f c0       	rjmp	.+126    	; 0x1ac <main+0x116>
	else if (__tmp > 65535)
 12e:	20 e0       	ldi	r18, 0x00	; 0
 130:	3f ef       	ldi	r19, 0xFF	; 255
 132:	4f e7       	ldi	r20, 0x7F	; 127
 134:	57 e4       	ldi	r21, 0x47	; 71
 136:	6d 85       	ldd	r22, Y+13	; 0x0d
 138:	7e 85       	ldd	r23, Y+14	; 0x0e
 13a:	8f 85       	ldd	r24, Y+15	; 0x0f
 13c:	98 89       	ldd	r25, Y+16	; 0x10
 13e:	0e 94 6e 02 	call	0x4dc	; 0x4dc <__gesf2>
 142:	18 16       	cp	r1, r24
 144:	4c f5       	brge	.+82     	; 0x198 <main+0x102>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 146:	20 e0       	ldi	r18, 0x00	; 0
 148:	30 e0       	ldi	r19, 0x00	; 0
 14a:	40 e2       	ldi	r20, 0x20	; 32
 14c:	51 e4       	ldi	r21, 0x41	; 65
 14e:	69 85       	ldd	r22, Y+9	; 0x09
 150:	7a 85       	ldd	r23, Y+10	; 0x0a
 152:	8b 85       	ldd	r24, Y+11	; 0x0b
 154:	9c 85       	ldd	r25, Y+12	; 0x0c
 156:	0e 94 73 02 	call	0x4e6	; 0x4e6 <__mulsf3>
 15a:	dc 01       	movw	r26, r24
 15c:	cb 01       	movw	r24, r22
 15e:	bc 01       	movw	r22, r24
 160:	cd 01       	movw	r24, r26
 162:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__fixunssfsi>
 166:	dc 01       	movw	r26, r24
 168:	cb 01       	movw	r24, r22
 16a:	9a 8b       	std	Y+18, r25	; 0x12
 16c:	89 8b       	std	Y+17, r24	; 0x11
 16e:	0f c0       	rjmp	.+30     	; 0x18e <main+0xf8>
 170:	80 e9       	ldi	r24, 0x90	; 144
 172:	91 e0       	ldi	r25, 0x01	; 1
 174:	9c 8b       	std	Y+20, r25	; 0x14
 176:	8b 8b       	std	Y+19, r24	; 0x13
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 178:	8b 89       	ldd	r24, Y+19	; 0x13
 17a:	9c 89       	ldd	r25, Y+20	; 0x14
 17c:	01 97       	sbiw	r24, 0x01	; 1
 17e:	f1 f7       	brne	.-4      	; 0x17c <main+0xe6>
 180:	9c 8b       	std	Y+20, r25	; 0x14
 182:	8b 8b       	std	Y+19, r24	; 0x13
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 184:	89 89       	ldd	r24, Y+17	; 0x11
 186:	9a 89       	ldd	r25, Y+18	; 0x12
 188:	01 97       	sbiw	r24, 0x01	; 1
 18a:	9a 8b       	std	Y+18, r25	; 0x12
 18c:	89 8b       	std	Y+17, r24	; 0x11
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 18e:	89 89       	ldd	r24, Y+17	; 0x11
 190:	9a 89       	ldd	r25, Y+18	; 0x12
 192:	89 2b       	or	r24, r25
 194:	69 f7       	brne	.-38     	; 0x170 <main+0xda>
 196:	14 c0       	rjmp	.+40     	; 0x1c0 <main+0x12a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 198:	6d 85       	ldd	r22, Y+13	; 0x0d
 19a:	7e 85       	ldd	r23, Y+14	; 0x0e
 19c:	8f 85       	ldd	r24, Y+15	; 0x0f
 19e:	98 89       	ldd	r25, Y+16	; 0x10
 1a0:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__fixunssfsi>
 1a4:	dc 01       	movw	r26, r24
 1a6:	cb 01       	movw	r24, r22
 1a8:	9a 8b       	std	Y+18, r25	; 0x12
 1aa:	89 8b       	std	Y+17, r24	; 0x11
 1ac:	89 89       	ldd	r24, Y+17	; 0x11
 1ae:	9a 89       	ldd	r25, Y+18	; 0x12
 1b0:	9e 8b       	std	Y+22, r25	; 0x16
 1b2:	8d 8b       	std	Y+21, r24	; 0x15
 1b4:	8d 89       	ldd	r24, Y+21	; 0x15
 1b6:	9e 89       	ldd	r25, Y+22	; 0x16
 1b8:	01 97       	sbiw	r24, 0x01	; 1
 1ba:	f1 f7       	brne	.-4      	; 0x1b8 <main+0x122>
 1bc:	9e 8b       	std	Y+22, r25	; 0x16
 1be:	8d 8b       	std	Y+21, r24	; 0x15
    while (1) 
    {
        _delay_ms(1000);
        sec++;
 1c0:	89 81       	ldd	r24, Y+1	; 0x01
 1c2:	9a 81       	ldd	r25, Y+2	; 0x02
 1c4:	01 96       	adiw	r24, 0x01	; 1
 1c6:	9a 83       	std	Y+2, r25	; 0x02
 1c8:	89 83       	std	Y+1, r24	; 0x01
        for (int i = 0; i < arrL; i++){
 1ca:	1c 82       	std	Y+4, r1	; 0x04
 1cc:	1b 82       	std	Y+3, r1	; 0x03
 1ce:	10 c0       	rjmp	.+32     	; 0x1f0 <main+0x15a>
            uartTransmitChar(msg[i]);
 1d0:	9e 01       	movw	r18, r28
 1d2:	24 5e       	subi	r18, 0xE4	; 228
 1d4:	3f 4f       	sbci	r19, 0xFF	; 255
 1d6:	8b 81       	ldd	r24, Y+3	; 0x03
 1d8:	9c 81       	ldd	r25, Y+4	; 0x04
 1da:	82 0f       	add	r24, r18
 1dc:	93 1f       	adc	r25, r19
 1de:	fc 01       	movw	r30, r24
 1e0:	80 81       	ld	r24, Z
 1e2:	0e 94 44 01 	call	0x288	; 0x288 <uartTransmitChar>
    uint16_t arrL = sizeof(msg)/sizeof(msg[0]);
    while (1) 
    {
        _delay_ms(1000);
        sec++;
        for (int i = 0; i < arrL; i++){
 1e6:	8b 81       	ldd	r24, Y+3	; 0x03
 1e8:	9c 81       	ldd	r25, Y+4	; 0x04
 1ea:	01 96       	adiw	r24, 0x01	; 1
 1ec:	9c 83       	std	Y+4, r25	; 0x04
 1ee:	8b 83       	std	Y+3, r24	; 0x03
 1f0:	2b 81       	ldd	r18, Y+3	; 0x03
 1f2:	3c 81       	ldd	r19, Y+4	; 0x04
 1f4:	8f 81       	ldd	r24, Y+7	; 0x07
 1f6:	98 85       	ldd	r25, Y+8	; 0x08
 1f8:	28 17       	cp	r18, r24
 1fa:	39 07       	cpc	r19, r25
 1fc:	48 f3       	brcs	.-46     	; 0x1d0 <main+0x13a>
            uartTransmitChar(msg[i]);
        }
        toString(str,sec);
 1fe:	29 81       	ldd	r18, Y+1	; 0x01
 200:	3a 81       	ldd	r19, Y+2	; 0x02
 202:	ce 01       	movw	r24, r28
 204:	47 96       	adiw	r24, 0x17	; 23
 206:	b9 01       	movw	r22, r18
 208:	0e 94 67 01 	call	0x2ce	; 0x2ce <toString>
        for (int i = 0; i < 5; i++){
 20c:	1e 82       	std	Y+6, r1	; 0x06
 20e:	1d 82       	std	Y+5, r1	; 0x05
 210:	10 c0       	rjmp	.+32     	; 0x232 <main+0x19c>
            uartTransmitChar(str[i]);
 212:	9e 01       	movw	r18, r28
 214:	29 5e       	subi	r18, 0xE9	; 233
 216:	3f 4f       	sbci	r19, 0xFF	; 255
 218:	8d 81       	ldd	r24, Y+5	; 0x05
 21a:	9e 81       	ldd	r25, Y+6	; 0x06
 21c:	82 0f       	add	r24, r18
 21e:	93 1f       	adc	r25, r19
 220:	fc 01       	movw	r30, r24
 222:	80 81       	ld	r24, Z
 224:	0e 94 44 01 	call	0x288	; 0x288 <uartTransmitChar>
        sec++;
        for (int i = 0; i < arrL; i++){
            uartTransmitChar(msg[i]);
        }
        toString(str,sec);
        for (int i = 0; i < 5; i++){
 228:	8d 81       	ldd	r24, Y+5	; 0x05
 22a:	9e 81       	ldd	r25, Y+6	; 0x06
 22c:	01 96       	adiw	r24, 0x01	; 1
 22e:	9e 83       	std	Y+6, r25	; 0x06
 230:	8d 83       	std	Y+5, r24	; 0x05
 232:	8d 81       	ldd	r24, Y+5	; 0x05
 234:	9e 81       	ldd	r25, Y+6	; 0x06
 236:	05 97       	sbiw	r24, 0x05	; 5
 238:	64 f3       	brlt	.-40     	; 0x212 <main+0x17c>
            uartTransmitChar(str[i]);
        }
            uartTransmitChar(10);
 23a:	8a e0       	ldi	r24, 0x0A	; 10
 23c:	0e 94 44 01 	call	0x288	; 0x288 <uartTransmitChar>
            uartTransmitChar(13);
 240:	8d e0       	ldi	r24, 0x0D	; 13
 242:	0e 94 44 01 	call	0x288	; 0x288 <uartTransmitChar>
    }
 246:	4a cf       	rjmp	.-364    	; 0xdc <main+0x46>

00000248 <uartInit>:
}

void uartInit(){
 248:	cf 93       	push	r28
 24a:	df 93       	push	r29
 24c:	cd b7       	in	r28, 0x3d	; 61
 24e:	de b7       	in	r29, 0x3e	; 62
    UBRR0 = 103; // setting baud rate to 9600
 250:	84 ec       	ldi	r24, 0xC4	; 196
 252:	90 e0       	ldi	r25, 0x00	; 0
 254:	27 e6       	ldi	r18, 0x67	; 103
 256:	30 e0       	ldi	r19, 0x00	; 0
 258:	fc 01       	movw	r30, r24
 25a:	31 83       	std	Z+1, r19	; 0x01
 25c:	20 83       	st	Z, r18
    UCSR0B |= (1 << TXEN0) | (1 << RXEN0); // enabling transmit
 25e:	81 ec       	ldi	r24, 0xC1	; 193
 260:	90 e0       	ldi	r25, 0x00	; 0
 262:	21 ec       	ldi	r18, 0xC1	; 193
 264:	30 e0       	ldi	r19, 0x00	; 0
 266:	f9 01       	movw	r30, r18
 268:	20 81       	ld	r18, Z
 26a:	28 61       	ori	r18, 0x18	; 24
 26c:	fc 01       	movw	r30, r24
 26e:	20 83       	st	Z, r18
    UCSR0C |= (1 << USBS0); // setting 2 stop bits
 270:	82 ec       	ldi	r24, 0xC2	; 194
 272:	90 e0       	ldi	r25, 0x00	; 0
 274:	22 ec       	ldi	r18, 0xC2	; 194
 276:	30 e0       	ldi	r19, 0x00	; 0
 278:	f9 01       	movw	r30, r18
 27a:	20 81       	ld	r18, Z
 27c:	28 60       	ori	r18, 0x08	; 8
 27e:	fc 01       	movw	r30, r24
 280:	20 83       	st	Z, r18
}
 282:	df 91       	pop	r29
 284:	cf 91       	pop	r28
 286:	08 95       	ret

00000288 <uartTransmitChar>:

void uartTransmitChar(char data){
 288:	cf 93       	push	r28
 28a:	df 93       	push	r29
 28c:	1f 92       	push	r1
 28e:	cd b7       	in	r28, 0x3d	; 61
 290:	de b7       	in	r29, 0x3e	; 62
 292:	89 83       	std	Y+1, r24	; 0x01
    UDR0 = data; // send new line to buffer
 294:	86 ec       	ldi	r24, 0xC6	; 198
 296:	90 e0       	ldi	r25, 0x00	; 0
 298:	29 81       	ldd	r18, Y+1	; 0x01
 29a:	fc 01       	movw	r30, r24
 29c:	20 83       	st	Z, r18
    //while ((UCSR0A & (1 << UDRE0)) == 0);
    while ((UCSR0A & (1 << TXC0)) == 0);
 29e:	00 00       	nop
 2a0:	80 ec       	ldi	r24, 0xC0	; 192
 2a2:	90 e0       	ldi	r25, 0x00	; 0
 2a4:	fc 01       	movw	r30, r24
 2a6:	80 81       	ld	r24, Z
 2a8:	88 2f       	mov	r24, r24
 2aa:	90 e0       	ldi	r25, 0x00	; 0
 2ac:	80 74       	andi	r24, 0x40	; 64
 2ae:	99 27       	eor	r25, r25
 2b0:	89 2b       	or	r24, r25
 2b2:	b1 f3       	breq	.-20     	; 0x2a0 <uartTransmitChar+0x18>
    UCSR0A |= (1 << TXC0);
 2b4:	80 ec       	ldi	r24, 0xC0	; 192
 2b6:	90 e0       	ldi	r25, 0x00	; 0
 2b8:	20 ec       	ldi	r18, 0xC0	; 192
 2ba:	30 e0       	ldi	r19, 0x00	; 0
 2bc:	f9 01       	movw	r30, r18
 2be:	20 81       	ld	r18, Z
 2c0:	20 64       	ori	r18, 0x40	; 64
 2c2:	fc 01       	movw	r30, r24
 2c4:	20 83       	st	Z, r18
}
 2c6:	0f 90       	pop	r0
 2c8:	df 91       	pop	r29
 2ca:	cf 91       	pop	r28
 2cc:	08 95       	ret

000002ce <toString>:

void toString(char c[], uint16_t num){
 2ce:	cf 93       	push	r28
 2d0:	df 93       	push	r29
 2d2:	cd b7       	in	r28, 0x3d	; 61
 2d4:	de b7       	in	r29, 0x3e	; 62
 2d6:	2e 97       	sbiw	r28, 0x0e	; 14
 2d8:	0f b6       	in	r0, 0x3f	; 63
 2da:	f8 94       	cli
 2dc:	de bf       	out	0x3e, r29	; 62
 2de:	0f be       	out	0x3f, r0	; 63
 2e0:	cd bf       	out	0x3d, r28	; 61
 2e2:	9a 87       	std	Y+10, r25	; 0x0a
 2e4:	89 87       	std	Y+9, r24	; 0x09
 2e6:	7c 87       	std	Y+12, r23	; 0x0c
 2e8:	6b 87       	std	Y+11, r22	; 0x0b
    int i, rem, len = 0, n;
 2ea:	1c 82       	std	Y+4, r1	; 0x04
 2ec:	1b 82       	std	Y+3, r1	; 0x03
    
    n = num;
 2ee:	8b 85       	ldd	r24, Y+11	; 0x0b
 2f0:	9c 85       	ldd	r25, Y+12	; 0x0c
 2f2:	9e 83       	std	Y+6, r25	; 0x06
 2f4:	8d 83       	std	Y+5, r24	; 0x05
    while (n != 0)
 2f6:	0f c0       	rjmp	.+30     	; 0x316 <toString+0x48>
    {
        len++;
 2f8:	8b 81       	ldd	r24, Y+3	; 0x03
 2fa:	9c 81       	ldd	r25, Y+4	; 0x04
 2fc:	01 96       	adiw	r24, 0x01	; 1
 2fe:	9c 83       	std	Y+4, r25	; 0x04
 300:	8b 83       	std	Y+3, r24	; 0x03
        n /= 10;
 302:	8d 81       	ldd	r24, Y+5	; 0x05
 304:	9e 81       	ldd	r25, Y+6	; 0x06
 306:	2a e0       	ldi	r18, 0x0A	; 10
 308:	30 e0       	ldi	r19, 0x00	; 0
 30a:	b9 01       	movw	r22, r18
 30c:	0e 94 08 03 	call	0x610	; 0x610 <__divmodhi4>
 310:	cb 01       	movw	r24, r22
 312:	9e 83       	std	Y+6, r25	; 0x06
 314:	8d 83       	std	Y+5, r24	; 0x05

void toString(char c[], uint16_t num){
    int i, rem, len = 0, n;
    
    n = num;
    while (n != 0)
 316:	8d 81       	ldd	r24, Y+5	; 0x05
 318:	9e 81       	ldd	r25, Y+6	; 0x06
 31a:	89 2b       	or	r24, r25
 31c:	69 f7       	brne	.-38     	; 0x2f8 <toString+0x2a>
    {
        len++;
        n /= 10;
    }
    for (i = 0; i < len; i++)
 31e:	1a 82       	std	Y+2, r1	; 0x02
 320:	19 82       	std	Y+1, r1	; 0x01
 322:	42 c0       	rjmp	.+132    	; 0x3a8 <toString+0xda>
    {
        rem = num % 10;
 324:	4b 85       	ldd	r20, Y+11	; 0x0b
 326:	5c 85       	ldd	r21, Y+12	; 0x0c
 328:	9a 01       	movw	r18, r20
 32a:	ad ec       	ldi	r26, 0xCD	; 205
 32c:	bc ec       	ldi	r27, 0xCC	; 204
 32e:	0e 94 1c 03 	call	0x638	; 0x638 <__umulhisi3>
 332:	96 95       	lsr	r25
 334:	87 95       	ror	r24
 336:	96 95       	lsr	r25
 338:	87 95       	ror	r24
 33a:	96 95       	lsr	r25
 33c:	87 95       	ror	r24
 33e:	88 0f       	add	r24, r24
 340:	99 1f       	adc	r25, r25
 342:	9c 01       	movw	r18, r24
 344:	22 0f       	add	r18, r18
 346:	33 1f       	adc	r19, r19
 348:	22 0f       	add	r18, r18
 34a:	33 1f       	adc	r19, r19
 34c:	82 0f       	add	r24, r18
 34e:	93 1f       	adc	r25, r19
 350:	9a 01       	movw	r18, r20
 352:	28 1b       	sub	r18, r24
 354:	39 0b       	sbc	r19, r25
 356:	c9 01       	movw	r24, r18
 358:	98 87       	std	Y+8, r25	; 0x08
 35a:	8f 83       	std	Y+7, r24	; 0x07
        num = num / 10;
 35c:	8b 85       	ldd	r24, Y+11	; 0x0b
 35e:	9c 85       	ldd	r25, Y+12	; 0x0c
 360:	9c 01       	movw	r18, r24
 362:	ad ec       	ldi	r26, 0xCD	; 205
 364:	bc ec       	ldi	r27, 0xCC	; 204
 366:	0e 94 1c 03 	call	0x638	; 0x638 <__umulhisi3>
 36a:	96 95       	lsr	r25
 36c:	87 95       	ror	r24
 36e:	96 95       	lsr	r25
 370:	87 95       	ror	r24
 372:	96 95       	lsr	r25
 374:	87 95       	ror	r24
 376:	9c 87       	std	Y+12, r25	; 0x0c
 378:	8b 87       	std	Y+11, r24	; 0x0b
        c[len - (i + 1)] = rem + '0';
 37a:	89 81       	ldd	r24, Y+1	; 0x01
 37c:	9a 81       	ldd	r25, Y+2	; 0x02
 37e:	9c 01       	movw	r18, r24
 380:	20 95       	com	r18
 382:	30 95       	com	r19
 384:	8b 81       	ldd	r24, Y+3	; 0x03
 386:	9c 81       	ldd	r25, Y+4	; 0x04
 388:	82 0f       	add	r24, r18
 38a:	93 1f       	adc	r25, r19
 38c:	9c 01       	movw	r18, r24
 38e:	89 85       	ldd	r24, Y+9	; 0x09
 390:	9a 85       	ldd	r25, Y+10	; 0x0a
 392:	82 0f       	add	r24, r18
 394:	93 1f       	adc	r25, r19
 396:	2f 81       	ldd	r18, Y+7	; 0x07
 398:	20 5d       	subi	r18, 0xD0	; 208
 39a:	fc 01       	movw	r30, r24
 39c:	20 83       	st	Z, r18
    while (n != 0)
    {
        len++;
        n /= 10;
    }
    for (i = 0; i < len; i++)
 39e:	89 81       	ldd	r24, Y+1	; 0x01
 3a0:	9a 81       	ldd	r25, Y+2	; 0x02
 3a2:	01 96       	adiw	r24, 0x01	; 1
 3a4:	9a 83       	std	Y+2, r25	; 0x02
 3a6:	89 83       	std	Y+1, r24	; 0x01
 3a8:	29 81       	ldd	r18, Y+1	; 0x01
 3aa:	3a 81       	ldd	r19, Y+2	; 0x02
 3ac:	8b 81       	ldd	r24, Y+3	; 0x03
 3ae:	9c 81       	ldd	r25, Y+4	; 0x04
 3b0:	28 17       	cp	r18, r24
 3b2:	39 07       	cpc	r19, r25
 3b4:	0c f4       	brge	.+2      	; 0x3b8 <toString+0xea>
 3b6:	b6 cf       	rjmp	.-148    	; 0x324 <toString+0x56>
    {
        rem = num % 10;
        num = num / 10;
        c[len - (i + 1)] = rem + '0';
    }
    c[len] = '\0';
 3b8:	8b 81       	ldd	r24, Y+3	; 0x03
 3ba:	9c 81       	ldd	r25, Y+4	; 0x04
 3bc:	29 85       	ldd	r18, Y+9	; 0x09
 3be:	3a 85       	ldd	r19, Y+10	; 0x0a
 3c0:	82 0f       	add	r24, r18
 3c2:	93 1f       	adc	r25, r19
 3c4:	fc 01       	movw	r30, r24
 3c6:	10 82       	st	Z, r1
 3c8:	2e 96       	adiw	r28, 0x0e	; 14
 3ca:	0f b6       	in	r0, 0x3f	; 63
 3cc:	f8 94       	cli
 3ce:	de bf       	out	0x3e, r29	; 62
 3d0:	0f be       	out	0x3f, r0	; 63
 3d2:	cd bf       	out	0x3d, r28	; 61
 3d4:	df 91       	pop	r29
 3d6:	cf 91       	pop	r28
 3d8:	08 95       	ret

000003da <__cmpsf2>:
 3da:	0e 94 21 02 	call	0x442	; 0x442 <__fp_cmp>
 3de:	08 f4       	brcc	.+2      	; 0x3e2 <__cmpsf2+0x8>
 3e0:	81 e0       	ldi	r24, 0x01	; 1
 3e2:	08 95       	ret

000003e4 <__fixunssfsi>:
 3e4:	0e 94 4d 02 	call	0x49a	; 0x49a <__fp_splitA>
 3e8:	88 f0       	brcs	.+34     	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
 3ea:	9f 57       	subi	r25, 0x7F	; 127
 3ec:	98 f0       	brcs	.+38     	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
 3ee:	b9 2f       	mov	r27, r25
 3f0:	99 27       	eor	r25, r25
 3f2:	b7 51       	subi	r27, 0x17	; 23
 3f4:	b0 f0       	brcs	.+44     	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
 3f6:	e1 f0       	breq	.+56     	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
 3f8:	66 0f       	add	r22, r22
 3fa:	77 1f       	adc	r23, r23
 3fc:	88 1f       	adc	r24, r24
 3fe:	99 1f       	adc	r25, r25
 400:	1a f0       	brmi	.+6      	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
 402:	ba 95       	dec	r27
 404:	c9 f7       	brne	.-14     	; 0x3f8 <__fixunssfsi+0x14>
 406:	14 c0       	rjmp	.+40     	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
 408:	b1 30       	cpi	r27, 0x01	; 1
 40a:	91 f0       	breq	.+36     	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
 40c:	0e 94 67 02 	call	0x4ce	; 0x4ce <__fp_zero>
 410:	b1 e0       	ldi	r27, 0x01	; 1
 412:	08 95       	ret
 414:	0c 94 67 02 	jmp	0x4ce	; 0x4ce <__fp_zero>
 418:	67 2f       	mov	r22, r23
 41a:	78 2f       	mov	r23, r24
 41c:	88 27       	eor	r24, r24
 41e:	b8 5f       	subi	r27, 0xF8	; 248
 420:	39 f0       	breq	.+14     	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
 422:	b9 3f       	cpi	r27, 0xF9	; 249
 424:	cc f3       	brlt	.-14     	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
 426:	86 95       	lsr	r24
 428:	77 95       	ror	r23
 42a:	67 95       	ror	r22
 42c:	b3 95       	inc	r27
 42e:	d9 f7       	brne	.-10     	; 0x426 <__LOCK_REGION_LENGTH__+0x26>
 430:	3e f4       	brtc	.+14     	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
 432:	90 95       	com	r25
 434:	80 95       	com	r24
 436:	70 95       	com	r23
 438:	61 95       	neg	r22
 43a:	7f 4f       	sbci	r23, 0xFF	; 255
 43c:	8f 4f       	sbci	r24, 0xFF	; 255
 43e:	9f 4f       	sbci	r25, 0xFF	; 255
 440:	08 95       	ret

00000442 <__fp_cmp>:
 442:	99 0f       	add	r25, r25
 444:	00 08       	sbc	r0, r0
 446:	55 0f       	add	r21, r21
 448:	aa 0b       	sbc	r26, r26
 44a:	e0 e8       	ldi	r30, 0x80	; 128
 44c:	fe ef       	ldi	r31, 0xFE	; 254
 44e:	16 16       	cp	r1, r22
 450:	17 06       	cpc	r1, r23
 452:	e8 07       	cpc	r30, r24
 454:	f9 07       	cpc	r31, r25
 456:	c0 f0       	brcs	.+48     	; 0x488 <__fp_cmp+0x46>
 458:	12 16       	cp	r1, r18
 45a:	13 06       	cpc	r1, r19
 45c:	e4 07       	cpc	r30, r20
 45e:	f5 07       	cpc	r31, r21
 460:	98 f0       	brcs	.+38     	; 0x488 <__fp_cmp+0x46>
 462:	62 1b       	sub	r22, r18
 464:	73 0b       	sbc	r23, r19
 466:	84 0b       	sbc	r24, r20
 468:	95 0b       	sbc	r25, r21
 46a:	39 f4       	brne	.+14     	; 0x47a <__fp_cmp+0x38>
 46c:	0a 26       	eor	r0, r26
 46e:	61 f0       	breq	.+24     	; 0x488 <__fp_cmp+0x46>
 470:	23 2b       	or	r18, r19
 472:	24 2b       	or	r18, r20
 474:	25 2b       	or	r18, r21
 476:	21 f4       	brne	.+8      	; 0x480 <__fp_cmp+0x3e>
 478:	08 95       	ret
 47a:	0a 26       	eor	r0, r26
 47c:	09 f4       	brne	.+2      	; 0x480 <__fp_cmp+0x3e>
 47e:	a1 40       	sbci	r26, 0x01	; 1
 480:	a6 95       	lsr	r26
 482:	8f ef       	ldi	r24, 0xFF	; 255
 484:	81 1d       	adc	r24, r1
 486:	81 1d       	adc	r24, r1
 488:	08 95       	ret

0000048a <__fp_split3>:
 48a:	57 fd       	sbrc	r21, 7
 48c:	90 58       	subi	r25, 0x80	; 128
 48e:	44 0f       	add	r20, r20
 490:	55 1f       	adc	r21, r21
 492:	59 f0       	breq	.+22     	; 0x4aa <__fp_splitA+0x10>
 494:	5f 3f       	cpi	r21, 0xFF	; 255
 496:	71 f0       	breq	.+28     	; 0x4b4 <__fp_splitA+0x1a>
 498:	47 95       	ror	r20

0000049a <__fp_splitA>:
 49a:	88 0f       	add	r24, r24
 49c:	97 fb       	bst	r25, 7
 49e:	99 1f       	adc	r25, r25
 4a0:	61 f0       	breq	.+24     	; 0x4ba <__fp_splitA+0x20>
 4a2:	9f 3f       	cpi	r25, 0xFF	; 255
 4a4:	79 f0       	breq	.+30     	; 0x4c4 <__fp_splitA+0x2a>
 4a6:	87 95       	ror	r24
 4a8:	08 95       	ret
 4aa:	12 16       	cp	r1, r18
 4ac:	13 06       	cpc	r1, r19
 4ae:	14 06       	cpc	r1, r20
 4b0:	55 1f       	adc	r21, r21
 4b2:	f2 cf       	rjmp	.-28     	; 0x498 <__fp_split3+0xe>
 4b4:	46 95       	lsr	r20
 4b6:	f1 df       	rcall	.-30     	; 0x49a <__fp_splitA>
 4b8:	08 c0       	rjmp	.+16     	; 0x4ca <__fp_splitA+0x30>
 4ba:	16 16       	cp	r1, r22
 4bc:	17 06       	cpc	r1, r23
 4be:	18 06       	cpc	r1, r24
 4c0:	99 1f       	adc	r25, r25
 4c2:	f1 cf       	rjmp	.-30     	; 0x4a6 <__fp_splitA+0xc>
 4c4:	86 95       	lsr	r24
 4c6:	71 05       	cpc	r23, r1
 4c8:	61 05       	cpc	r22, r1
 4ca:	08 94       	sec
 4cc:	08 95       	ret

000004ce <__fp_zero>:
 4ce:	e8 94       	clt

000004d0 <__fp_szero>:
 4d0:	bb 27       	eor	r27, r27
 4d2:	66 27       	eor	r22, r22
 4d4:	77 27       	eor	r23, r23
 4d6:	cb 01       	movw	r24, r22
 4d8:	97 f9       	bld	r25, 7
 4da:	08 95       	ret

000004dc <__gesf2>:
 4dc:	0e 94 21 02 	call	0x442	; 0x442 <__fp_cmp>
 4e0:	08 f4       	brcc	.+2      	; 0x4e4 <__gesf2+0x8>
 4e2:	8f ef       	ldi	r24, 0xFF	; 255
 4e4:	08 95       	ret

000004e6 <__mulsf3>:
 4e6:	0e 94 86 02 	call	0x50c	; 0x50c <__mulsf3x>
 4ea:	0c 94 f7 02 	jmp	0x5ee	; 0x5ee <__fp_round>
 4ee:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <__fp_pscA>
 4f2:	38 f0       	brcs	.+14     	; 0x502 <__mulsf3+0x1c>
 4f4:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <__fp_pscB>
 4f8:	20 f0       	brcs	.+8      	; 0x502 <__mulsf3+0x1c>
 4fa:	95 23       	and	r25, r21
 4fc:	11 f0       	breq	.+4      	; 0x502 <__mulsf3+0x1c>
 4fe:	0c 94 e0 02 	jmp	0x5c0	; 0x5c0 <__fp_inf>
 502:	0c 94 e6 02 	jmp	0x5cc	; 0x5cc <__fp_nan>
 506:	11 24       	eor	r1, r1
 508:	0c 94 68 02 	jmp	0x4d0	; 0x4d0 <__fp_szero>

0000050c <__mulsf3x>:
 50c:	0e 94 45 02 	call	0x48a	; 0x48a <__fp_split3>
 510:	70 f3       	brcs	.-36     	; 0x4ee <__mulsf3+0x8>

00000512 <__mulsf3_pse>:
 512:	95 9f       	mul	r25, r21
 514:	c1 f3       	breq	.-16     	; 0x506 <__mulsf3+0x20>
 516:	95 0f       	add	r25, r21
 518:	50 e0       	ldi	r21, 0x00	; 0
 51a:	55 1f       	adc	r21, r21
 51c:	62 9f       	mul	r22, r18
 51e:	f0 01       	movw	r30, r0
 520:	72 9f       	mul	r23, r18
 522:	bb 27       	eor	r27, r27
 524:	f0 0d       	add	r31, r0
 526:	b1 1d       	adc	r27, r1
 528:	63 9f       	mul	r22, r19
 52a:	aa 27       	eor	r26, r26
 52c:	f0 0d       	add	r31, r0
 52e:	b1 1d       	adc	r27, r1
 530:	aa 1f       	adc	r26, r26
 532:	64 9f       	mul	r22, r20
 534:	66 27       	eor	r22, r22
 536:	b0 0d       	add	r27, r0
 538:	a1 1d       	adc	r26, r1
 53a:	66 1f       	adc	r22, r22
 53c:	82 9f       	mul	r24, r18
 53e:	22 27       	eor	r18, r18
 540:	b0 0d       	add	r27, r0
 542:	a1 1d       	adc	r26, r1
 544:	62 1f       	adc	r22, r18
 546:	73 9f       	mul	r23, r19
 548:	b0 0d       	add	r27, r0
 54a:	a1 1d       	adc	r26, r1
 54c:	62 1f       	adc	r22, r18
 54e:	83 9f       	mul	r24, r19
 550:	a0 0d       	add	r26, r0
 552:	61 1d       	adc	r22, r1
 554:	22 1f       	adc	r18, r18
 556:	74 9f       	mul	r23, r20
 558:	33 27       	eor	r19, r19
 55a:	a0 0d       	add	r26, r0
 55c:	61 1d       	adc	r22, r1
 55e:	23 1f       	adc	r18, r19
 560:	84 9f       	mul	r24, r20
 562:	60 0d       	add	r22, r0
 564:	21 1d       	adc	r18, r1
 566:	82 2f       	mov	r24, r18
 568:	76 2f       	mov	r23, r22
 56a:	6a 2f       	mov	r22, r26
 56c:	11 24       	eor	r1, r1
 56e:	9f 57       	subi	r25, 0x7F	; 127
 570:	50 40       	sbci	r21, 0x00	; 0
 572:	9a f0       	brmi	.+38     	; 0x59a <__mulsf3_pse+0x88>
 574:	f1 f0       	breq	.+60     	; 0x5b2 <__mulsf3_pse+0xa0>
 576:	88 23       	and	r24, r24
 578:	4a f0       	brmi	.+18     	; 0x58c <__mulsf3_pse+0x7a>
 57a:	ee 0f       	add	r30, r30
 57c:	ff 1f       	adc	r31, r31
 57e:	bb 1f       	adc	r27, r27
 580:	66 1f       	adc	r22, r22
 582:	77 1f       	adc	r23, r23
 584:	88 1f       	adc	r24, r24
 586:	91 50       	subi	r25, 0x01	; 1
 588:	50 40       	sbci	r21, 0x00	; 0
 58a:	a9 f7       	brne	.-22     	; 0x576 <__mulsf3_pse+0x64>
 58c:	9e 3f       	cpi	r25, 0xFE	; 254
 58e:	51 05       	cpc	r21, r1
 590:	80 f0       	brcs	.+32     	; 0x5b2 <__mulsf3_pse+0xa0>
 592:	0c 94 e0 02 	jmp	0x5c0	; 0x5c0 <__fp_inf>
 596:	0c 94 68 02 	jmp	0x4d0	; 0x4d0 <__fp_szero>
 59a:	5f 3f       	cpi	r21, 0xFF	; 255
 59c:	e4 f3       	brlt	.-8      	; 0x596 <__mulsf3_pse+0x84>
 59e:	98 3e       	cpi	r25, 0xE8	; 232
 5a0:	d4 f3       	brlt	.-12     	; 0x596 <__mulsf3_pse+0x84>
 5a2:	86 95       	lsr	r24
 5a4:	77 95       	ror	r23
 5a6:	67 95       	ror	r22
 5a8:	b7 95       	ror	r27
 5aa:	f7 95       	ror	r31
 5ac:	e7 95       	ror	r30
 5ae:	9f 5f       	subi	r25, 0xFF	; 255
 5b0:	c1 f7       	brne	.-16     	; 0x5a2 <__mulsf3_pse+0x90>
 5b2:	fe 2b       	or	r31, r30
 5b4:	88 0f       	add	r24, r24
 5b6:	91 1d       	adc	r25, r1
 5b8:	96 95       	lsr	r25
 5ba:	87 95       	ror	r24
 5bc:	97 f9       	bld	r25, 7
 5be:	08 95       	ret

000005c0 <__fp_inf>:
 5c0:	97 f9       	bld	r25, 7
 5c2:	9f 67       	ori	r25, 0x7F	; 127
 5c4:	80 e8       	ldi	r24, 0x80	; 128
 5c6:	70 e0       	ldi	r23, 0x00	; 0
 5c8:	60 e0       	ldi	r22, 0x00	; 0
 5ca:	08 95       	ret

000005cc <__fp_nan>:
 5cc:	9f ef       	ldi	r25, 0xFF	; 255
 5ce:	80 ec       	ldi	r24, 0xC0	; 192
 5d0:	08 95       	ret

000005d2 <__fp_pscA>:
 5d2:	00 24       	eor	r0, r0
 5d4:	0a 94       	dec	r0
 5d6:	16 16       	cp	r1, r22
 5d8:	17 06       	cpc	r1, r23
 5da:	18 06       	cpc	r1, r24
 5dc:	09 06       	cpc	r0, r25
 5de:	08 95       	ret

000005e0 <__fp_pscB>:
 5e0:	00 24       	eor	r0, r0
 5e2:	0a 94       	dec	r0
 5e4:	12 16       	cp	r1, r18
 5e6:	13 06       	cpc	r1, r19
 5e8:	14 06       	cpc	r1, r20
 5ea:	05 06       	cpc	r0, r21
 5ec:	08 95       	ret

000005ee <__fp_round>:
 5ee:	09 2e       	mov	r0, r25
 5f0:	03 94       	inc	r0
 5f2:	00 0c       	add	r0, r0
 5f4:	11 f4       	brne	.+4      	; 0x5fa <__fp_round+0xc>
 5f6:	88 23       	and	r24, r24
 5f8:	52 f0       	brmi	.+20     	; 0x60e <__fp_round+0x20>
 5fa:	bb 0f       	add	r27, r27
 5fc:	40 f4       	brcc	.+16     	; 0x60e <__fp_round+0x20>
 5fe:	bf 2b       	or	r27, r31
 600:	11 f4       	brne	.+4      	; 0x606 <__fp_round+0x18>
 602:	60 ff       	sbrs	r22, 0
 604:	04 c0       	rjmp	.+8      	; 0x60e <__fp_round+0x20>
 606:	6f 5f       	subi	r22, 0xFF	; 255
 608:	7f 4f       	sbci	r23, 0xFF	; 255
 60a:	8f 4f       	sbci	r24, 0xFF	; 255
 60c:	9f 4f       	sbci	r25, 0xFF	; 255
 60e:	08 95       	ret

00000610 <__divmodhi4>:
 610:	97 fb       	bst	r25, 7
 612:	07 2e       	mov	r0, r23
 614:	16 f4       	brtc	.+4      	; 0x61a <__divmodhi4+0xa>
 616:	00 94       	com	r0
 618:	07 d0       	rcall	.+14     	; 0x628 <__divmodhi4_neg1>
 61a:	77 fd       	sbrc	r23, 7
 61c:	09 d0       	rcall	.+18     	; 0x630 <__divmodhi4_neg2>
 61e:	0e 94 2b 03 	call	0x656	; 0x656 <__udivmodhi4>
 622:	07 fc       	sbrc	r0, 7
 624:	05 d0       	rcall	.+10     	; 0x630 <__divmodhi4_neg2>
 626:	3e f4       	brtc	.+14     	; 0x636 <__divmodhi4_exit>

00000628 <__divmodhi4_neg1>:
 628:	90 95       	com	r25
 62a:	81 95       	neg	r24
 62c:	9f 4f       	sbci	r25, 0xFF	; 255
 62e:	08 95       	ret

00000630 <__divmodhi4_neg2>:
 630:	70 95       	com	r23
 632:	61 95       	neg	r22
 634:	7f 4f       	sbci	r23, 0xFF	; 255

00000636 <__divmodhi4_exit>:
 636:	08 95       	ret

00000638 <__umulhisi3>:
 638:	a2 9f       	mul	r26, r18
 63a:	b0 01       	movw	r22, r0
 63c:	b3 9f       	mul	r27, r19
 63e:	c0 01       	movw	r24, r0
 640:	a3 9f       	mul	r26, r19
 642:	70 0d       	add	r23, r0
 644:	81 1d       	adc	r24, r1
 646:	11 24       	eor	r1, r1
 648:	91 1d       	adc	r25, r1
 64a:	b2 9f       	mul	r27, r18
 64c:	70 0d       	add	r23, r0
 64e:	81 1d       	adc	r24, r1
 650:	11 24       	eor	r1, r1
 652:	91 1d       	adc	r25, r1
 654:	08 95       	ret

00000656 <__udivmodhi4>:
 656:	aa 1b       	sub	r26, r26
 658:	bb 1b       	sub	r27, r27
 65a:	51 e1       	ldi	r21, 0x11	; 17
 65c:	07 c0       	rjmp	.+14     	; 0x66c <__udivmodhi4_ep>

0000065e <__udivmodhi4_loop>:
 65e:	aa 1f       	adc	r26, r26
 660:	bb 1f       	adc	r27, r27
 662:	a6 17       	cp	r26, r22
 664:	b7 07       	cpc	r27, r23
 666:	10 f0       	brcs	.+4      	; 0x66c <__udivmodhi4_ep>
 668:	a6 1b       	sub	r26, r22
 66a:	b7 0b       	sbc	r27, r23

0000066c <__udivmodhi4_ep>:
 66c:	88 1f       	adc	r24, r24
 66e:	99 1f       	adc	r25, r25
 670:	5a 95       	dec	r21
 672:	a9 f7       	brne	.-22     	; 0x65e <__udivmodhi4_loop>
 674:	80 95       	com	r24
 676:	90 95       	com	r25
 678:	bc 01       	movw	r22, r24
 67a:	cd 01       	movw	r24, r26
 67c:	08 95       	ret

0000067e <_exit>:
 67e:	f8 94       	cli

00000680 <__stop_program>:
 680:	ff cf       	rjmp	.-2      	; 0x680 <__stop_program>
