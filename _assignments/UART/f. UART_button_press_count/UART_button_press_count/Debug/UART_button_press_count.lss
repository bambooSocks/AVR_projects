
UART_button_press_count.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000024  00800100  00000312  00000386  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000312  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000003aa  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000003dc  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000040  00000000  00000000  0000041c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000008a9  00000000  00000000  0000045c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000070d  00000000  00000000  00000d05  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003ae  00000000  00000000  00001412  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000009c  00000000  00000000  000017c0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003b0  00000000  00000000  0000185c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000332  00000000  00000000  00001c0c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  00001f3e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e2 e1       	ldi	r30, 0x12	; 18
  7c:	f3 e0       	ldi	r31, 0x03	; 3
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a4 32       	cpi	r26, 0x24	; 36
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 c2 00 	call	0x184	; 0x184 <main>
  8e:	0c 94 87 01 	jmp	0x30e	; 0x30e <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <initUART>:
}

char charRX(){
    while ((UCSR0A & (1<<RXC0))== 0); // wait for data do get to buffer
    return UDR0; // return data from buffer
}
  96:	87 e6       	ldi	r24, 0x67	; 103
  98:	90 e0       	ldi	r25, 0x00	; 0
  9a:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
  9e:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
  a2:	e1 ec       	ldi	r30, 0xC1	; 193
  a4:	f0 e0       	ldi	r31, 0x00	; 0
  a6:	80 81       	ld	r24, Z
  a8:	88 61       	ori	r24, 0x18	; 24
  aa:	80 83       	st	Z, r24
  ac:	e2 ec       	ldi	r30, 0xC2	; 194
  ae:	f0 e0       	ldi	r31, 0x00	; 0
  b0:	80 81       	ld	r24, Z
  b2:	88 60       	ori	r24, 0x08	; 8
  b4:	80 83       	st	Z, r24
  b6:	08 95       	ret

000000b8 <charTX>:
  b8:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
  bc:	e0 ec       	ldi	r30, 0xC0	; 192
  be:	f0 e0       	ldi	r31, 0x00	; 0
  c0:	80 81       	ld	r24, Z
  c2:	86 ff       	sbrs	r24, 6
  c4:	fd cf       	rjmp	.-6      	; 0xc0 <charTX+0x8>
  c6:	e0 ec       	ldi	r30, 0xC0	; 192
  c8:	f0 e0       	ldi	r31, 0x00	; 0
  ca:	80 81       	ld	r24, Z
  cc:	80 64       	ori	r24, 0x40	; 64
  ce:	80 83       	st	Z, r24
  d0:	08 95       	ret

000000d2 <toString>:

void toString(char c[], uint16_t num){
  d2:	cf 92       	push	r12
  d4:	df 92       	push	r13
  d6:	ef 92       	push	r14
  d8:	ff 92       	push	r15
  da:	0f 93       	push	r16
  dc:	1f 93       	push	r17
  de:	cf 93       	push	r28
  e0:	df 93       	push	r29
  e2:	6c 01       	movw	r12, r24
  e4:	fb 01       	movw	r30, r22
    int i, rem, len = 0, n;
    
    n = num;
  e6:	cb 01       	movw	r24, r22
    while (n != 0)
  e8:	30 97       	sbiw	r30, 0x00	; 0
  ea:	e9 f1       	breq	.+122    	; 0x166 <toString+0x94>
  ec:	00 e0       	ldi	r16, 0x00	; 0
  ee:	10 e0       	ldi	r17, 0x00	; 0
    {
        len++;
        n /= 10;
  f0:	2a e0       	ldi	r18, 0x0A	; 10
  f2:	30 e0       	ldi	r19, 0x00	; 0
    int i, rem, len = 0, n;
    
    n = num;
    while (n != 0)
    {
        len++;
  f4:	0f 5f       	subi	r16, 0xFF	; 255
  f6:	1f 4f       	sbci	r17, 0xFF	; 255
        n /= 10;
  f8:	b9 01       	movw	r22, r18
  fa:	0e 94 50 01 	call	0x2a0	; 0x2a0 <__divmodhi4>
  fe:	cb 01       	movw	r24, r22

void toString(char c[], uint16_t num){
    int i, rem, len = 0, n;
    
    n = num;
    while (n != 0)
 100:	00 97       	sbiw	r24, 0x00	; 0
 102:	c1 f7       	brne	.-16     	; 0xf4 <toString+0x22>
    {
        len++;
        n /= 10;
    }
    for (i = 0; i < len; i++)
 104:	10 16       	cp	r1, r16
 106:	11 06       	cpc	r1, r17
 108:	84 f5       	brge	.+96     	; 0x16a <toString+0x98>
 10a:	e6 01       	movw	r28, r12
 10c:	c0 0f       	add	r28, r16
 10e:	d1 1f       	adc	r29, r17
 110:	76 01       	movw	r14, r12
    {
        rem = num % 10;
 112:	9f 01       	movw	r18, r30
 114:	ad ec       	ldi	r26, 0xCD	; 205
 116:	bc ec       	ldi	r27, 0xCC	; 204
 118:	0e 94 64 01 	call	0x2c8	; 0x2c8 <__umulhisi3>
 11c:	ac 01       	movw	r20, r24
 11e:	56 95       	lsr	r21
 120:	47 95       	ror	r20
 122:	56 95       	lsr	r21
 124:	47 95       	ror	r20
 126:	56 95       	lsr	r21
 128:	47 95       	ror	r20
 12a:	ca 01       	movw	r24, r20
 12c:	88 0f       	add	r24, r24
 12e:	99 1f       	adc	r25, r25
 130:	44 0f       	add	r20, r20
 132:	55 1f       	adc	r21, r21
 134:	44 0f       	add	r20, r20
 136:	55 1f       	adc	r21, r21
 138:	44 0f       	add	r20, r20
 13a:	55 1f       	adc	r21, r21
 13c:	48 0f       	add	r20, r24
 13e:	59 1f       	adc	r21, r25
 140:	cf 01       	movw	r24, r30
 142:	84 1b       	sub	r24, r20
 144:	95 0b       	sbc	r25, r21
 146:	ac 01       	movw	r20, r24
        num = num / 10;
 148:	0e 94 64 01 	call	0x2c8	; 0x2c8 <__umulhisi3>
 14c:	fc 01       	movw	r30, r24
 14e:	f6 95       	lsr	r31
 150:	e7 95       	ror	r30
 152:	f6 95       	lsr	r31
 154:	e7 95       	ror	r30
 156:	f6 95       	lsr	r31
 158:	e7 95       	ror	r30
        c[len - (i + 1)] = rem + '0';
 15a:	40 5d       	subi	r20, 0xD0	; 208
 15c:	4a 93       	st	-Y, r20
    while (n != 0)
    {
        len++;
        n /= 10;
    }
    for (i = 0; i < len; i++)
 15e:	ce 15       	cp	r28, r14
 160:	df 05       	cpc	r29, r15
 162:	b9 f6       	brne	.-82     	; 0x112 <toString+0x40>
 164:	02 c0       	rjmp	.+4      	; 0x16a <toString+0x98>
    while ((UCSR0A & (1<<RXC0))== 0); // wait for data do get to buffer
    return UDR0; // return data from buffer
}

void toString(char c[], uint16_t num){
    int i, rem, len = 0, n;
 166:	00 e0       	ldi	r16, 0x00	; 0
 168:	10 e0       	ldi	r17, 0x00	; 0
    {
        rem = num % 10;
        num = num / 10;
        c[len - (i + 1)] = rem + '0';
    }
    c[len] = '\0';
 16a:	f6 01       	movw	r30, r12
 16c:	e0 0f       	add	r30, r16
 16e:	f1 1f       	adc	r31, r17
 170:	10 82       	st	Z, r1
}
 172:	df 91       	pop	r29
 174:	cf 91       	pop	r28
 176:	1f 91       	pop	r17
 178:	0f 91       	pop	r16
 17a:	ff 90       	pop	r15
 17c:	ef 90       	pop	r14
 17e:	df 90       	pop	r13
 180:	cf 90       	pop	r12
 182:	08 95       	ret

00000184 <main>:
void charTX(char c);
char charRX();
void toString(char c[], uint16_t num);

int main(void)
{
 184:	cf 93       	push	r28
 186:	df 93       	push	r29
 188:	cd b7       	in	r28, 0x3d	; 61
 18a:	de b7       	in	r29, 0x3e	; 62
 18c:	aa 97       	sbiw	r28, 0x2a	; 42
 18e:	0f b6       	in	r0, 0x3f	; 63
 190:	f8 94       	cli
 192:	de bf       	out	0x3e, r29	; 62
 194:	0f be       	out	0x3f, r0	; 63
 196:	cd bf       	out	0x3d, r28	; 61
    initUART();
 198:	0e 94 4b 00 	call	0x96	; 0x96 <initUART>
    uint16_t count = 0;
    uint16_t prsd = 0;
    uint16_t rlsd = 0;
    uint16_t chck = 0;
    char msg[28] = "The button has been pressed ";
 19c:	8c e1       	ldi	r24, 0x1C	; 28
 19e:	e0 e0       	ldi	r30, 0x00	; 0
 1a0:	f1 e0       	ldi	r31, 0x01	; 1
 1a2:	de 01       	movw	r26, r28
 1a4:	11 96       	adiw	r26, 0x01	; 1
 1a6:	01 90       	ld	r0, Z+
 1a8:	0d 92       	st	X+, r0
 1aa:	8a 95       	dec	r24
 1ac:	e1 f7       	brne	.-8      	; 0x1a6 <main+0x22>
    char emsg[6] = " times";
 1ae:	86 e0       	ldi	r24, 0x06	; 6
 1b0:	ed e1       	ldi	r30, 0x1D	; 29
 1b2:	f1 e0       	ldi	r31, 0x01	; 1
 1b4:	de 01       	movw	r26, r28
 1b6:	5d 96       	adiw	r26, 0x1d	; 29
 1b8:	01 90       	ld	r0, Z+
 1ba:	0d 92       	st	X+, r0
 1bc:	8a 95       	dec	r24
 1be:	e1 f7       	brne	.-8      	; 0x1b8 <main+0x34>
    char num[8] = "";
 1c0:	1b a2       	std	Y+35, r1	; 0x23
 1c2:	1c a2       	std	Y+36, r1	; 0x24
 1c4:	1d a2       	std	Y+37, r1	; 0x25
 1c6:	1e a2       	std	Y+38, r1	; 0x26
 1c8:	1f a2       	std	Y+39, r1	; 0x27
 1ca:	18 a6       	std	Y+40, r1	; 0x28
 1cc:	19 a6       	std	Y+41, r1	; 0x29
 1ce:	1a a6       	std	Y+42, r1	; 0x2a

    PORTD |= (1 << PORTD4);
 1d0:	5c 9a       	sbi	0x0b, 4	; 11
{
    initUART();
    uint16_t count = 0;
    uint16_t prsd = 0;
    uint16_t rlsd = 0;
    uint16_t chck = 0;
 1d2:	20 e0       	ldi	r18, 0x00	; 0
 1d4:	30 e0       	ldi	r19, 0x00	; 0
int main(void)
{
    initUART();
    uint16_t count = 0;
    uint16_t prsd = 0;
    uint16_t rlsd = 0;
 1d6:	c1 2c       	mov	r12, r1
 1d8:	d1 2c       	mov	r13, r1

int main(void)
{
    initUART();
    uint16_t count = 0;
    uint16_t prsd = 0;
 1da:	80 e0       	ldi	r24, 0x00	; 0
 1dc:	90 e0       	ldi	r25, 0x00	; 0
void toString(char c[], uint16_t num);

int main(void)
{
    initUART();
    uint16_t count = 0;
 1de:	61 2c       	mov	r6, r1
 1e0:	71 2c       	mov	r7, r1
            } else {
            rlsd++;
            if (rlsd > DB_S){
                if (chck == 1){ //check if the button was rlsd just once
                    //do whatever when rlsd
                    chck = 0;
 1e2:	51 2c       	mov	r5, r1
 1e4:	41 2c       	mov	r4, r1
 1e6:	7e 01       	movw	r14, r28
 1e8:	4d e1       	ldi	r20, 0x1D	; 29
 1ea:	e4 0e       	add	r14, r20
 1ec:	f1 1c       	adc	r15, r1
                if (chck == 0){ //check if the button was prsd just once
                    count++;
                    for (int i = 0; i<28;i++){
                        charTX(msg[i]);
                    }
                    toString(num,count);
 1ee:	4e 01       	movw	r8, r28
 1f0:	e3 e2       	ldi	r30, 0x23	; 35
 1f2:	8e 0e       	add	r8, r30
 1f4:	91 1c       	adc	r9, r1
 1f6:	5e 01       	movw	r10, r28
 1f8:	fb e2       	ldi	r31, 0x2B	; 43
 1fa:	af 0e       	add	r10, r31
 1fc:	b1 1c       	adc	r11, r1
                    for (int i = 0; i<6; i++){
                        charTX(emsg[i]);
                    }
                    charTX('\r');
                    charTX('\n');
                    chck = 1;
 1fe:	33 24       	eor	r3, r3
 200:	33 94       	inc	r3
 202:	21 2c       	mov	r2, r1
 204:	05 c0       	rjmp	.+10     	; 0x210 <main+0x8c>
                }
                prsd = 0;
 206:	85 2d       	mov	r24, r5
 208:	94 2d       	mov	r25, r4
 20a:	02 c0       	rjmp	.+4      	; 0x210 <main+0x8c>
            if (rlsd > DB_S){
                if (chck == 1){ //check if the button was rlsd just once
                    //do whatever when rlsd
                    chck = 0;
                }
                rlsd = 0;
 20c:	c5 2c       	mov	r12, r5
 20e:	d4 2c       	mov	r13, r4

    PORTD |= (1 << PORTD4);

    while (1) 
    {
        if ((PIND & (1 << PIND4)) == 0){
 210:	4c 99       	sbic	0x09, 4	; 9
 212:	36 c0       	rjmp	.+108    	; 0x280 <main+0xfc>
            prsd++;
 214:	01 96       	adiw	r24, 0x01	; 1
            if  (prsd > DB_S){
 216:	8b 30       	cpi	r24, 0x0B	; 11
 218:	91 05       	cpc	r25, r1
 21a:	d0 f3       	brcs	.-12     	; 0x210 <main+0x8c>
                if (chck == 0){ //check if the button was prsd just once
 21c:	21 15       	cp	r18, r1
 21e:	31 05       	cpc	r19, r1
 220:	91 f7       	brne	.-28     	; 0x206 <main+0x82>
                    count++;
 222:	4f ef       	ldi	r20, 0xFF	; 255
 224:	64 1a       	sub	r6, r20
 226:	74 0a       	sbc	r7, r20
 228:	8e 01       	movw	r16, r28
 22a:	0f 5f       	subi	r16, 0xFF	; 255
 22c:	1f 4f       	sbci	r17, 0xFF	; 255
                    for (int i = 0; i<28;i++){
                        charTX(msg[i]);
 22e:	f8 01       	movw	r30, r16
 230:	81 91       	ld	r24, Z+
 232:	8f 01       	movw	r16, r30
 234:	0e 94 5c 00 	call	0xb8	; 0xb8 <charTX>
        if ((PIND & (1 << PIND4)) == 0){
            prsd++;
            if  (prsd > DB_S){
                if (chck == 0){ //check if the button was prsd just once
                    count++;
                    for (int i = 0; i<28;i++){
 238:	0e 15       	cp	r16, r14
 23a:	1f 05       	cpc	r17, r15
 23c:	c1 f7       	brne	.-16     	; 0x22e <main+0xaa>
                        charTX(msg[i]);
                    }
                    toString(num,count);
 23e:	b3 01       	movw	r22, r6
 240:	c4 01       	movw	r24, r8
 242:	0e 94 69 00 	call	0xd2	; 0xd2 <toString>
 246:	84 01       	movw	r16, r8
                    for (int i = 0; i<8; i++){
                        charTX(num[i]);
 248:	f8 01       	movw	r30, r16
 24a:	81 91       	ld	r24, Z+
 24c:	8f 01       	movw	r16, r30
 24e:	0e 94 5c 00 	call	0xb8	; 0xb8 <charTX>
                    count++;
                    for (int i = 0; i<28;i++){
                        charTX(msg[i]);
                    }
                    toString(num,count);
                    for (int i = 0; i<8; i++){
 252:	0a 15       	cp	r16, r10
 254:	1b 05       	cpc	r17, r11
 256:	c1 f7       	brne	.-16     	; 0x248 <main+0xc4>
 258:	87 01       	movw	r16, r14
                        charTX(num[i]);
                    }
                    for (int i = 0; i<6; i++){
                        charTX(emsg[i]);
 25a:	f8 01       	movw	r30, r16
 25c:	81 91       	ld	r24, Z+
 25e:	8f 01       	movw	r16, r30
 260:	0e 94 5c 00 	call	0xb8	; 0xb8 <charTX>
                    }
                    toString(num,count);
                    for (int i = 0; i<8; i++){
                        charTX(num[i]);
                    }
                    for (int i = 0; i<6; i++){
 264:	08 15       	cp	r16, r8
 266:	19 05       	cpc	r17, r9
 268:	c1 f7       	brne	.-16     	; 0x25a <main+0xd6>
                        charTX(emsg[i]);
                    }
                    charTX('\r');
 26a:	8d e0       	ldi	r24, 0x0D	; 13
 26c:	0e 94 5c 00 	call	0xb8	; 0xb8 <charTX>
                    charTX('\n');
 270:	8a e0       	ldi	r24, 0x0A	; 10
 272:	0e 94 5c 00 	call	0xb8	; 0xb8 <charTX>
                    chck = 1;
 276:	23 2d       	mov	r18, r3
 278:	32 2d       	mov	r19, r2
                }
                prsd = 0;
 27a:	85 2d       	mov	r24, r5
 27c:	94 2d       	mov	r25, r4
 27e:	c8 cf       	rjmp	.-112    	; 0x210 <main+0x8c>
            }
            } else {
            rlsd++;
 280:	ff ef       	ldi	r31, 0xFF	; 255
 282:	cf 1a       	sub	r12, r31
 284:	df 0a       	sbc	r13, r31
            if (rlsd > DB_S){
 286:	4b e0       	ldi	r20, 0x0B	; 11
 288:	c4 16       	cp	r12, r20
 28a:	d1 04       	cpc	r13, r1
 28c:	08 f2       	brcs	.-126    	; 0x210 <main+0x8c>
                if (chck == 1){ //check if the button was rlsd just once
 28e:	21 30       	cpi	r18, 0x01	; 1
 290:	31 05       	cpc	r19, r1
 292:	09 f0       	breq	.+2      	; 0x296 <main+0x112>
 294:	bb cf       	rjmp	.-138    	; 0x20c <main+0x88>
                    //do whatever when rlsd
                    chck = 0;
 296:	25 2d       	mov	r18, r5
 298:	34 2d       	mov	r19, r4
                }
                rlsd = 0;
 29a:	c5 2c       	mov	r12, r5
 29c:	d4 2c       	mov	r13, r4
 29e:	b8 cf       	rjmp	.-144    	; 0x210 <main+0x8c>

000002a0 <__divmodhi4>:
 2a0:	97 fb       	bst	r25, 7
 2a2:	07 2e       	mov	r0, r23
 2a4:	16 f4       	brtc	.+4      	; 0x2aa <__divmodhi4+0xa>
 2a6:	00 94       	com	r0
 2a8:	07 d0       	rcall	.+14     	; 0x2b8 <__divmodhi4_neg1>
 2aa:	77 fd       	sbrc	r23, 7
 2ac:	09 d0       	rcall	.+18     	; 0x2c0 <__divmodhi4_neg2>
 2ae:	0e 94 73 01 	call	0x2e6	; 0x2e6 <__udivmodhi4>
 2b2:	07 fc       	sbrc	r0, 7
 2b4:	05 d0       	rcall	.+10     	; 0x2c0 <__divmodhi4_neg2>
 2b6:	3e f4       	brtc	.+14     	; 0x2c6 <__divmodhi4_exit>

000002b8 <__divmodhi4_neg1>:
 2b8:	90 95       	com	r25
 2ba:	81 95       	neg	r24
 2bc:	9f 4f       	sbci	r25, 0xFF	; 255
 2be:	08 95       	ret

000002c0 <__divmodhi4_neg2>:
 2c0:	70 95       	com	r23
 2c2:	61 95       	neg	r22
 2c4:	7f 4f       	sbci	r23, 0xFF	; 255

000002c6 <__divmodhi4_exit>:
 2c6:	08 95       	ret

000002c8 <__umulhisi3>:
 2c8:	a2 9f       	mul	r26, r18
 2ca:	b0 01       	movw	r22, r0
 2cc:	b3 9f       	mul	r27, r19
 2ce:	c0 01       	movw	r24, r0
 2d0:	a3 9f       	mul	r26, r19
 2d2:	70 0d       	add	r23, r0
 2d4:	81 1d       	adc	r24, r1
 2d6:	11 24       	eor	r1, r1
 2d8:	91 1d       	adc	r25, r1
 2da:	b2 9f       	mul	r27, r18
 2dc:	70 0d       	add	r23, r0
 2de:	81 1d       	adc	r24, r1
 2e0:	11 24       	eor	r1, r1
 2e2:	91 1d       	adc	r25, r1
 2e4:	08 95       	ret

000002e6 <__udivmodhi4>:
 2e6:	aa 1b       	sub	r26, r26
 2e8:	bb 1b       	sub	r27, r27
 2ea:	51 e1       	ldi	r21, 0x11	; 17
 2ec:	07 c0       	rjmp	.+14     	; 0x2fc <__udivmodhi4_ep>

000002ee <__udivmodhi4_loop>:
 2ee:	aa 1f       	adc	r26, r26
 2f0:	bb 1f       	adc	r27, r27
 2f2:	a6 17       	cp	r26, r22
 2f4:	b7 07       	cpc	r27, r23
 2f6:	10 f0       	brcs	.+4      	; 0x2fc <__udivmodhi4_ep>
 2f8:	a6 1b       	sub	r26, r22
 2fa:	b7 0b       	sbc	r27, r23

000002fc <__udivmodhi4_ep>:
 2fc:	88 1f       	adc	r24, r24
 2fe:	99 1f       	adc	r25, r25
 300:	5a 95       	dec	r21
 302:	a9 f7       	brne	.-22     	; 0x2ee <__udivmodhi4_loop>
 304:	80 95       	com	r24
 306:	90 95       	com	r25
 308:	bc 01       	movw	r22, r24
 30a:	cd 01       	movw	r24, r26
 30c:	08 95       	ret

0000030e <_exit>:
 30e:	f8 94       	cli

00000310 <__stop_program>:
 310:	ff cf       	rjmp	.-2      	; 0x310 <__stop_program>
