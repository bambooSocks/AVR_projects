
buzzerTest.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000072e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000006da  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000072e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000760  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000040  00000000  00000000  000007a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000008be  00000000  00000000  000007e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006f9  00000000  00000000  0000109e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003e3  00000000  00000000  00001797  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000c0  00000000  00000000  00001b7c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000447  00000000  00000000  00001c3c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000017f  00000000  00000000  00002083  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  00002202  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 05 01 	call	0x20a	; 0x20a <main>
  78:	0c 94 6b 03 	jmp	0x6d6	; 0x6d6 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <t0_set_prescaler>:
    T0_PRESCALER_256 = (1 << CS22),
    T0_PRESCALER_1024 = (1 << CS22) | (1 << CS20),
};

static void t0_set_prescaler(enum t0_prescaler ps)
{
  80:	cf 93       	push	r28
  82:	df 93       	push	r29
  84:	1f 92       	push	r1
  86:	cd b7       	in	r28, 0x3d	; 61
  88:	de b7       	in	r29, 0x3e	; 62
  8a:	89 83       	std	Y+1, r24	; 0x01
    TCCR2B = ps;
  8c:	81 eb       	ldi	r24, 0xB1	; 177
  8e:	90 e0       	ldi	r25, 0x00	; 0
  90:	29 81       	ldd	r18, Y+1	; 0x01
  92:	fc 01       	movw	r30, r24
  94:	20 83       	st	Z, r18
}
  96:	0f 90       	pop	r0
  98:	df 91       	pop	r29
  9a:	cf 91       	pop	r28
  9c:	08 95       	ret

0000009e <t0_get_prescaler_rate>:

static unsigned short t0_get_prescaler_rate(enum t0_prescaler ps)
{
  9e:	cf 93       	push	r28
  a0:	df 93       	push	r29
  a2:	00 d0       	rcall	.+0      	; 0xa4 <t0_get_prescaler_rate+0x6>
  a4:	1f 92       	push	r1
  a6:	cd b7       	in	r28, 0x3d	; 61
  a8:	de b7       	in	r29, 0x3e	; 62
  aa:	8b 83       	std	Y+3, r24	; 0x03
    unsigned short rate;
    switch(ps)
  ac:	8b 81       	ldd	r24, Y+3	; 0x03
  ae:	88 2f       	mov	r24, r24
  b0:	90 e0       	ldi	r25, 0x00	; 0
  b2:	83 30       	cpi	r24, 0x03	; 3
  b4:	91 05       	cpc	r25, r1
  b6:	c9 f0       	breq	.+50     	; 0xea <t0_get_prescaler_rate+0x4c>
  b8:	84 30       	cpi	r24, 0x04	; 4
  ba:	91 05       	cpc	r25, r1
  bc:	34 f4       	brge	.+12     	; 0xca <t0_get_prescaler_rate+0x2c>
  be:	81 30       	cpi	r24, 0x01	; 1
  c0:	91 05       	cpc	r25, r1
  c2:	49 f0       	breq	.+18     	; 0xd6 <t0_get_prescaler_rate+0x38>
  c4:	02 97       	sbiw	r24, 0x02	; 2
  c6:	61 f0       	breq	.+24     	; 0xe0 <t0_get_prescaler_rate+0x42>
  c8:	1f c0       	rjmp	.+62     	; 0x108 <t0_get_prescaler_rate+0x6a>
  ca:	84 30       	cpi	r24, 0x04	; 4
  cc:	91 05       	cpc	r25, r1
  ce:	91 f0       	breq	.+36     	; 0xf4 <t0_get_prescaler_rate+0x56>
  d0:	05 97       	sbiw	r24, 0x05	; 5
  d2:	a9 f0       	breq	.+42     	; 0xfe <t0_get_prescaler_rate+0x60>
  d4:	19 c0       	rjmp	.+50     	; 0x108 <t0_get_prescaler_rate+0x6a>
    {
        case T0_PRESCALER_1:
        rate = 1;
  d6:	81 e0       	ldi	r24, 0x01	; 1
  d8:	90 e0       	ldi	r25, 0x00	; 0
  da:	9a 83       	std	Y+2, r25	; 0x02
  dc:	89 83       	std	Y+1, r24	; 0x01
        break;
  de:	17 c0       	rjmp	.+46     	; 0x10e <t0_get_prescaler_rate+0x70>
        case T0_PRESCALER_8:
        rate = 8;
  e0:	88 e0       	ldi	r24, 0x08	; 8
  e2:	90 e0       	ldi	r25, 0x00	; 0
  e4:	9a 83       	std	Y+2, r25	; 0x02
  e6:	89 83       	std	Y+1, r24	; 0x01
        break;
  e8:	12 c0       	rjmp	.+36     	; 0x10e <t0_get_prescaler_rate+0x70>
        case T0_PRESCALER_64:
        rate = 64;
  ea:	80 e4       	ldi	r24, 0x40	; 64
  ec:	90 e0       	ldi	r25, 0x00	; 0
  ee:	9a 83       	std	Y+2, r25	; 0x02
  f0:	89 83       	std	Y+1, r24	; 0x01
        break;
  f2:	0d c0       	rjmp	.+26     	; 0x10e <t0_get_prescaler_rate+0x70>
        case T0_PRESCALER_256:
        rate = 256;
  f4:	80 e0       	ldi	r24, 0x00	; 0
  f6:	91 e0       	ldi	r25, 0x01	; 1
  f8:	9a 83       	std	Y+2, r25	; 0x02
  fa:	89 83       	std	Y+1, r24	; 0x01
        break;
  fc:	08 c0       	rjmp	.+16     	; 0x10e <t0_get_prescaler_rate+0x70>
        case T0_PRESCALER_1024:
        rate = 1024;
  fe:	80 e0       	ldi	r24, 0x00	; 0
 100:	94 e0       	ldi	r25, 0x04	; 4
 102:	9a 83       	std	Y+2, r25	; 0x02
 104:	89 83       	std	Y+1, r24	; 0x01
        break;
 106:	03 c0       	rjmp	.+6      	; 0x10e <t0_get_prescaler_rate+0x70>
        default:
        rate = 0;
 108:	1a 82       	std	Y+2, r1	; 0x02
 10a:	19 82       	std	Y+1, r1	; 0x01
        break;
 10c:	00 00       	nop
    }
    return rate;
 10e:	89 81       	ldd	r24, Y+1	; 0x01
 110:	9a 81       	ldd	r25, Y+2	; 0x02
}
 112:	0f 90       	pop	r0
 114:	0f 90       	pop	r0
 116:	0f 90       	pop	r0
 118:	df 91       	pop	r29
 11a:	cf 91       	pop	r28
 11c:	08 95       	ret

0000011e <div_round>:

static unsigned long div_round(unsigned long d, unsigned long q)
{
 11e:	cf 93       	push	r28
 120:	df 93       	push	r29
 122:	cd b7       	in	r28, 0x3d	; 61
 124:	de b7       	in	r29, 0x3e	; 62
 126:	2c 97       	sbiw	r28, 0x0c	; 12
 128:	0f b6       	in	r0, 0x3f	; 63
 12a:	f8 94       	cli
 12c:	de bf       	out	0x3e, r29	; 62
 12e:	0f be       	out	0x3f, r0	; 63
 130:	cd bf       	out	0x3d, r28	; 61
 132:	69 83       	std	Y+1, r22	; 0x01
 134:	7a 83       	std	Y+2, r23	; 0x02
 136:	8b 83       	std	Y+3, r24	; 0x03
 138:	9c 83       	std	Y+4, r25	; 0x04
 13a:	2d 83       	std	Y+5, r18	; 0x05
 13c:	3e 83       	std	Y+6, r19	; 0x06
 13e:	4f 83       	std	Y+7, r20	; 0x07
 140:	58 87       	std	Y+8, r21	; 0x08
    return (d + (q/2)) / q;
 142:	8d 81       	ldd	r24, Y+5	; 0x05
 144:	9e 81       	ldd	r25, Y+6	; 0x06
 146:	af 81       	ldd	r26, Y+7	; 0x07
 148:	b8 85       	ldd	r27, Y+8	; 0x08
 14a:	9c 01       	movw	r18, r24
 14c:	ad 01       	movw	r20, r26
 14e:	56 95       	lsr	r21
 150:	47 95       	ror	r20
 152:	37 95       	ror	r19
 154:	27 95       	ror	r18
 156:	89 81       	ldd	r24, Y+1	; 0x01
 158:	9a 81       	ldd	r25, Y+2	; 0x02
 15a:	ab 81       	ldd	r26, Y+3	; 0x03
 15c:	bc 81       	ldd	r27, Y+4	; 0x04
 15e:	82 0f       	add	r24, r18
 160:	93 1f       	adc	r25, r19
 162:	a4 1f       	adc	r26, r20
 164:	b5 1f       	adc	r27, r21
 166:	2d 81       	ldd	r18, Y+5	; 0x05
 168:	3e 81       	ldd	r19, Y+6	; 0x06
 16a:	4f 81       	ldd	r20, Y+7	; 0x07
 16c:	58 85       	ldd	r21, Y+8	; 0x08
 16e:	bc 01       	movw	r22, r24
 170:	cd 01       	movw	r24, r26
 172:	0e 94 49 03 	call	0x692	; 0x692 <__udivmodsi4>
 176:	da 01       	movw	r26, r20
 178:	c9 01       	movw	r24, r18
}
 17a:	bc 01       	movw	r22, r24
 17c:	cd 01       	movw	r24, r26
 17e:	2c 96       	adiw	r28, 0x0c	; 12
 180:	0f b6       	in	r0, 0x3f	; 63
 182:	f8 94       	cli
 184:	de bf       	out	0x3e, r29	; 62
 186:	0f be       	out	0x3f, r0	; 63
 188:	cd bf       	out	0x3d, r28	; 61
 18a:	df 91       	pop	r29
 18c:	cf 91       	pop	r28
 18e:	08 95       	ret

00000190 <t0_set_ctc_a>:

static void t0_set_ctc_a(unsigned long hz, unsigned long timer_freq)
{
 190:	0f 93       	push	r16
 192:	1f 93       	push	r17
 194:	cf 93       	push	r28
 196:	df 93       	push	r29
 198:	cd b7       	in	r28, 0x3d	; 61
 19a:	de b7       	in	r29, 0x3e	; 62
 19c:	28 97       	sbiw	r28, 0x08	; 8
 19e:	0f b6       	in	r0, 0x3f	; 63
 1a0:	f8 94       	cli
 1a2:	de bf       	out	0x3e, r29	; 62
 1a4:	0f be       	out	0x3f, r0	; 63
 1a6:	cd bf       	out	0x3d, r28	; 61
 1a8:	69 83       	std	Y+1, r22	; 0x01
 1aa:	7a 83       	std	Y+2, r23	; 0x02
 1ac:	8b 83       	std	Y+3, r24	; 0x03
 1ae:	9c 83       	std	Y+4, r25	; 0x04
 1b0:	2d 83       	std	Y+5, r18	; 0x05
 1b2:	3e 83       	std	Y+6, r19	; 0x06
 1b4:	4f 83       	std	Y+7, r20	; 0x07
 1b6:	58 87       	std	Y+8, r21	; 0x08
    OCR2A = div_round(timer_freq, hz*2) - 1;
 1b8:	03 eb       	ldi	r16, 0xB3	; 179
 1ba:	10 e0       	ldi	r17, 0x00	; 0
 1bc:	89 81       	ldd	r24, Y+1	; 0x01
 1be:	9a 81       	ldd	r25, Y+2	; 0x02
 1c0:	ab 81       	ldd	r26, Y+3	; 0x03
 1c2:	bc 81       	ldd	r27, Y+4	; 0x04
 1c4:	9c 01       	movw	r18, r24
 1c6:	ad 01       	movw	r20, r26
 1c8:	22 0f       	add	r18, r18
 1ca:	33 1f       	adc	r19, r19
 1cc:	44 1f       	adc	r20, r20
 1ce:	55 1f       	adc	r21, r21
 1d0:	8d 81       	ldd	r24, Y+5	; 0x05
 1d2:	9e 81       	ldd	r25, Y+6	; 0x06
 1d4:	af 81       	ldd	r26, Y+7	; 0x07
 1d6:	b8 85       	ldd	r27, Y+8	; 0x08
 1d8:	bc 01       	movw	r22, r24
 1da:	cd 01       	movw	r24, r26
 1dc:	0e 94 8f 00 	call	0x11e	; 0x11e <div_round>
 1e0:	dc 01       	movw	r26, r24
 1e2:	cb 01       	movw	r24, r22
 1e4:	81 50       	subi	r24, 0x01	; 1
 1e6:	f8 01       	movw	r30, r16
 1e8:	80 83       	st	Z, r24
    TCCR2A =
 1ea:	80 eb       	ldi	r24, 0xB0	; 176
 1ec:	90 e0       	ldi	r25, 0x00	; 0
 1ee:	22 e4       	ldi	r18, 0x42	; 66
 1f0:	fc 01       	movw	r30, r24
 1f2:	20 83       	st	Z, r18
    (1 << COM2A0) // toggle
    | (1 << WGM21); // CTC

}
 1f4:	28 96       	adiw	r28, 0x08	; 8
 1f6:	0f b6       	in	r0, 0x3f	; 63
 1f8:	f8 94       	cli
 1fa:	de bf       	out	0x3e, r29	; 62
 1fc:	0f be       	out	0x3f, r0	; 63
 1fe:	cd bf       	out	0x3d, r28	; 61
 200:	df 91       	pop	r29
 202:	cf 91       	pop	r28
 204:	1f 91       	pop	r17
 206:	0f 91       	pop	r16
 208:	08 95       	ret

0000020a <main>:

int main(void)
{
 20a:	cf 93       	push	r28
 20c:	df 93       	push	r29
 20e:	cd b7       	in	r28, 0x3d	; 61
 210:	de b7       	in	r29, 0x3e	; 62
 212:	a1 97       	sbiw	r28, 0x21	; 33
 214:	0f b6       	in	r0, 0x3f	; 63
 216:	f8 94       	cli
 218:	de bf       	out	0x3e, r29	; 62
 21a:	0f be       	out	0x3f, r0	; 63
 21c:	cd bf       	out	0x3d, r28	; 61
    unsigned long timer_freq;
    enum t0_prescaler ps = T0_PRESCALER_64;
 21e:	83 e0       	ldi	r24, 0x03	; 3
 220:	89 83       	std	Y+1, r24	; 0x01
    
    DDRB |= (1 << DDB3);
 222:	84 e2       	ldi	r24, 0x24	; 36
 224:	90 e0       	ldi	r25, 0x00	; 0
 226:	24 e2       	ldi	r18, 0x24	; 36
 228:	30 e0       	ldi	r19, 0x00	; 0
 22a:	f9 01       	movw	r30, r18
 22c:	20 81       	ld	r18, Z
 22e:	28 60       	ori	r18, 0x08	; 8
 230:	fc 01       	movw	r30, r24
 232:	20 83       	st	Z, r18
    t0_set_prescaler(ps);
 234:	89 81       	ldd	r24, Y+1	; 0x01
 236:	0e 94 40 00 	call	0x80	; 0x80 <t0_set_prescaler>
    timer_freq = div_round(F_CPU, t0_get_prescaler_rate(ps));
 23a:	89 81       	ldd	r24, Y+1	; 0x01
 23c:	0e 94 4f 00 	call	0x9e	; 0x9e <t0_get_prescaler_rate>
 240:	cc 01       	movw	r24, r24
 242:	a0 e0       	ldi	r26, 0x00	; 0
 244:	b0 e0       	ldi	r27, 0x00	; 0
 246:	9c 01       	movw	r18, r24
 248:	ad 01       	movw	r20, r26
 24a:	60 e0       	ldi	r22, 0x00	; 0
 24c:	74 e2       	ldi	r23, 0x24	; 36
 24e:	84 ef       	ldi	r24, 0xF4	; 244
 250:	90 e0       	ldi	r25, 0x00	; 0
 252:	0e 94 8f 00 	call	0x11e	; 0x11e <div_round>
 256:	dc 01       	movw	r26, r24
 258:	cb 01       	movw	r24, r22
 25a:	8a 83       	std	Y+2, r24	; 0x02
 25c:	9b 83       	std	Y+3, r25	; 0x03
 25e:	ac 83       	std	Y+4, r26	; 0x04
 260:	bd 83       	std	Y+5, r27	; 0x05
    
    while(1)
    {
        t0_set_ctc_a(440, timer_freq);
 262:	8a 81       	ldd	r24, Y+2	; 0x02
 264:	9b 81       	ldd	r25, Y+3	; 0x03
 266:	ac 81       	ldd	r26, Y+4	; 0x04
 268:	bd 81       	ldd	r27, Y+5	; 0x05
 26a:	9c 01       	movw	r18, r24
 26c:	ad 01       	movw	r20, r26
 26e:	68 eb       	ldi	r22, 0xB8	; 184
 270:	71 e0       	ldi	r23, 0x01	; 1
 272:	80 e0       	ldi	r24, 0x00	; 0
 274:	90 e0       	ldi	r25, 0x00	; 0
 276:	0e 94 c8 00 	call	0x190	; 0x190 <t0_set_ctc_a>
 27a:	80 e0       	ldi	r24, 0x00	; 0
 27c:	90 e0       	ldi	r25, 0x00	; 0
 27e:	a8 e4       	ldi	r26, 0x48	; 72
 280:	b3 e4       	ldi	r27, 0x43	; 67
 282:	8e 83       	std	Y+6, r24	; 0x06
 284:	9f 83       	std	Y+7, r25	; 0x07
 286:	a8 87       	std	Y+8, r26	; 0x08
 288:	b9 87       	std	Y+9, r27	; 0x09

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 28a:	20 e0       	ldi	r18, 0x00	; 0
 28c:	30 e0       	ldi	r19, 0x00	; 0
 28e:	4a e7       	ldi	r20, 0x7A	; 122
 290:	55 e4       	ldi	r21, 0x45	; 69
 292:	6e 81       	ldd	r22, Y+6	; 0x06
 294:	7f 81       	ldd	r23, Y+7	; 0x07
 296:	88 85       	ldd	r24, Y+8	; 0x08
 298:	99 85       	ldd	r25, Y+9	; 0x09
 29a:	0e 94 b4 02 	call	0x568	; 0x568 <__mulsf3>
 29e:	dc 01       	movw	r26, r24
 2a0:	cb 01       	movw	r24, r22
 2a2:	8a 87       	std	Y+10, r24	; 0x0a
 2a4:	9b 87       	std	Y+11, r25	; 0x0b
 2a6:	ac 87       	std	Y+12, r26	; 0x0c
 2a8:	bd 87       	std	Y+13, r27	; 0x0d
	if (__tmp < 1.0)
 2aa:	20 e0       	ldi	r18, 0x00	; 0
 2ac:	30 e0       	ldi	r19, 0x00	; 0
 2ae:	40 e8       	ldi	r20, 0x80	; 128
 2b0:	5f e3       	ldi	r21, 0x3F	; 63
 2b2:	6a 85       	ldd	r22, Y+10	; 0x0a
 2b4:	7b 85       	ldd	r23, Y+11	; 0x0b
 2b6:	8c 85       	ldd	r24, Y+12	; 0x0c
 2b8:	9d 85       	ldd	r25, Y+13	; 0x0d
 2ba:	0e 94 2e 02 	call	0x45c	; 0x45c <__cmpsf2>
 2be:	88 23       	and	r24, r24
 2c0:	2c f4       	brge	.+10     	; 0x2cc <main+0xc2>
		__ticks = 1;
 2c2:	81 e0       	ldi	r24, 0x01	; 1
 2c4:	90 e0       	ldi	r25, 0x00	; 0
 2c6:	9f 87       	std	Y+15, r25	; 0x0f
 2c8:	8e 87       	std	Y+14, r24	; 0x0e
 2ca:	3f c0       	rjmp	.+126    	; 0x34a <main+0x140>
	else if (__tmp > 65535)
 2cc:	20 e0       	ldi	r18, 0x00	; 0
 2ce:	3f ef       	ldi	r19, 0xFF	; 255
 2d0:	4f e7       	ldi	r20, 0x7F	; 127
 2d2:	57 e4       	ldi	r21, 0x47	; 71
 2d4:	6a 85       	ldd	r22, Y+10	; 0x0a
 2d6:	7b 85       	ldd	r23, Y+11	; 0x0b
 2d8:	8c 85       	ldd	r24, Y+12	; 0x0c
 2da:	9d 85       	ldd	r25, Y+13	; 0x0d
 2dc:	0e 94 af 02 	call	0x55e	; 0x55e <__gesf2>
 2e0:	18 16       	cp	r1, r24
 2e2:	4c f5       	brge	.+82     	; 0x336 <main+0x12c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 2e4:	20 e0       	ldi	r18, 0x00	; 0
 2e6:	30 e0       	ldi	r19, 0x00	; 0
 2e8:	40 e2       	ldi	r20, 0x20	; 32
 2ea:	51 e4       	ldi	r21, 0x41	; 65
 2ec:	6e 81       	ldd	r22, Y+6	; 0x06
 2ee:	7f 81       	ldd	r23, Y+7	; 0x07
 2f0:	88 85       	ldd	r24, Y+8	; 0x08
 2f2:	99 85       	ldd	r25, Y+9	; 0x09
 2f4:	0e 94 b4 02 	call	0x568	; 0x568 <__mulsf3>
 2f8:	dc 01       	movw	r26, r24
 2fa:	cb 01       	movw	r24, r22
 2fc:	bc 01       	movw	r22, r24
 2fe:	cd 01       	movw	r24, r26
 300:	0e 94 33 02 	call	0x466	; 0x466 <__fixunssfsi>
 304:	dc 01       	movw	r26, r24
 306:	cb 01       	movw	r24, r22
 308:	9f 87       	std	Y+15, r25	; 0x0f
 30a:	8e 87       	std	Y+14, r24	; 0x0e
 30c:	0f c0       	rjmp	.+30     	; 0x32c <main+0x122>
 30e:	80 e9       	ldi	r24, 0x90	; 144
 310:	91 e0       	ldi	r25, 0x01	; 1
 312:	99 8b       	std	Y+17, r25	; 0x11
 314:	88 8b       	std	Y+16, r24	; 0x10
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 316:	88 89       	ldd	r24, Y+16	; 0x10
 318:	99 89       	ldd	r25, Y+17	; 0x11
 31a:	01 97       	sbiw	r24, 0x01	; 1
 31c:	f1 f7       	brne	.-4      	; 0x31a <main+0x110>
 31e:	99 8b       	std	Y+17, r25	; 0x11
 320:	88 8b       	std	Y+16, r24	; 0x10
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 322:	8e 85       	ldd	r24, Y+14	; 0x0e
 324:	9f 85       	ldd	r25, Y+15	; 0x0f
 326:	01 97       	sbiw	r24, 0x01	; 1
 328:	9f 87       	std	Y+15, r25	; 0x0f
 32a:	8e 87       	std	Y+14, r24	; 0x0e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 32c:	8e 85       	ldd	r24, Y+14	; 0x0e
 32e:	9f 85       	ldd	r25, Y+15	; 0x0f
 330:	89 2b       	or	r24, r25
 332:	69 f7       	brne	.-38     	; 0x30e <main+0x104>
 334:	14 c0       	rjmp	.+40     	; 0x35e <main+0x154>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 336:	6a 85       	ldd	r22, Y+10	; 0x0a
 338:	7b 85       	ldd	r23, Y+11	; 0x0b
 33a:	8c 85       	ldd	r24, Y+12	; 0x0c
 33c:	9d 85       	ldd	r25, Y+13	; 0x0d
 33e:	0e 94 33 02 	call	0x466	; 0x466 <__fixunssfsi>
 342:	dc 01       	movw	r26, r24
 344:	cb 01       	movw	r24, r22
 346:	9f 87       	std	Y+15, r25	; 0x0f
 348:	8e 87       	std	Y+14, r24	; 0x0e
 34a:	8e 85       	ldd	r24, Y+14	; 0x0e
 34c:	9f 85       	ldd	r25, Y+15	; 0x0f
 34e:	9b 8b       	std	Y+19, r25	; 0x13
 350:	8a 8b       	std	Y+18, r24	; 0x12
 352:	8a 89       	ldd	r24, Y+18	; 0x12
 354:	9b 89       	ldd	r25, Y+19	; 0x13
 356:	01 97       	sbiw	r24, 0x01	; 1
 358:	f1 f7       	brne	.-4      	; 0x356 <main+0x14c>
 35a:	9b 8b       	std	Y+19, r25	; 0x13
 35c:	8a 8b       	std	Y+18, r24	; 0x12
        _delay_ms(200);
        t0_set_ctc_a(880, timer_freq);
 35e:	8a 81       	ldd	r24, Y+2	; 0x02
 360:	9b 81       	ldd	r25, Y+3	; 0x03
 362:	ac 81       	ldd	r26, Y+4	; 0x04
 364:	bd 81       	ldd	r27, Y+5	; 0x05
 366:	9c 01       	movw	r18, r24
 368:	ad 01       	movw	r20, r26
 36a:	60 e7       	ldi	r22, 0x70	; 112
 36c:	73 e0       	ldi	r23, 0x03	; 3
 36e:	80 e0       	ldi	r24, 0x00	; 0
 370:	90 e0       	ldi	r25, 0x00	; 0
 372:	0e 94 c8 00 	call	0x190	; 0x190 <t0_set_ctc_a>
 376:	80 e0       	ldi	r24, 0x00	; 0
 378:	90 e0       	ldi	r25, 0x00	; 0
 37a:	a8 e4       	ldi	r26, 0x48	; 72
 37c:	b3 e4       	ldi	r27, 0x43	; 67
 37e:	8c 8b       	std	Y+20, r24	; 0x14
 380:	9d 8b       	std	Y+21, r25	; 0x15
 382:	ae 8b       	std	Y+22, r26	; 0x16
 384:	bf 8b       	std	Y+23, r27	; 0x17

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 386:	20 e0       	ldi	r18, 0x00	; 0
 388:	30 e0       	ldi	r19, 0x00	; 0
 38a:	4a e7       	ldi	r20, 0x7A	; 122
 38c:	55 e4       	ldi	r21, 0x45	; 69
 38e:	6c 89       	ldd	r22, Y+20	; 0x14
 390:	7d 89       	ldd	r23, Y+21	; 0x15
 392:	8e 89       	ldd	r24, Y+22	; 0x16
 394:	9f 89       	ldd	r25, Y+23	; 0x17
 396:	0e 94 b4 02 	call	0x568	; 0x568 <__mulsf3>
 39a:	dc 01       	movw	r26, r24
 39c:	cb 01       	movw	r24, r22
 39e:	88 8f       	std	Y+24, r24	; 0x18
 3a0:	99 8f       	std	Y+25, r25	; 0x19
 3a2:	aa 8f       	std	Y+26, r26	; 0x1a
 3a4:	bb 8f       	std	Y+27, r27	; 0x1b
	if (__tmp < 1.0)
 3a6:	20 e0       	ldi	r18, 0x00	; 0
 3a8:	30 e0       	ldi	r19, 0x00	; 0
 3aa:	40 e8       	ldi	r20, 0x80	; 128
 3ac:	5f e3       	ldi	r21, 0x3F	; 63
 3ae:	68 8d       	ldd	r22, Y+24	; 0x18
 3b0:	79 8d       	ldd	r23, Y+25	; 0x19
 3b2:	8a 8d       	ldd	r24, Y+26	; 0x1a
 3b4:	9b 8d       	ldd	r25, Y+27	; 0x1b
 3b6:	0e 94 2e 02 	call	0x45c	; 0x45c <__cmpsf2>
 3ba:	88 23       	and	r24, r24
 3bc:	2c f4       	brge	.+10     	; 0x3c8 <main+0x1be>
		__ticks = 1;
 3be:	81 e0       	ldi	r24, 0x01	; 1
 3c0:	90 e0       	ldi	r25, 0x00	; 0
 3c2:	9d 8f       	std	Y+29, r25	; 0x1d
 3c4:	8c 8f       	std	Y+28, r24	; 0x1c
 3c6:	3f c0       	rjmp	.+126    	; 0x446 <__LOCK_REGION_LENGTH__+0x46>
	else if (__tmp > 65535)
 3c8:	20 e0       	ldi	r18, 0x00	; 0
 3ca:	3f ef       	ldi	r19, 0xFF	; 255
 3cc:	4f e7       	ldi	r20, 0x7F	; 127
 3ce:	57 e4       	ldi	r21, 0x47	; 71
 3d0:	68 8d       	ldd	r22, Y+24	; 0x18
 3d2:	79 8d       	ldd	r23, Y+25	; 0x19
 3d4:	8a 8d       	ldd	r24, Y+26	; 0x1a
 3d6:	9b 8d       	ldd	r25, Y+27	; 0x1b
 3d8:	0e 94 af 02 	call	0x55e	; 0x55e <__gesf2>
 3dc:	18 16       	cp	r1, r24
 3de:	4c f5       	brge	.+82     	; 0x432 <__LOCK_REGION_LENGTH__+0x32>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 3e0:	20 e0       	ldi	r18, 0x00	; 0
 3e2:	30 e0       	ldi	r19, 0x00	; 0
 3e4:	40 e2       	ldi	r20, 0x20	; 32
 3e6:	51 e4       	ldi	r21, 0x41	; 65
 3e8:	6c 89       	ldd	r22, Y+20	; 0x14
 3ea:	7d 89       	ldd	r23, Y+21	; 0x15
 3ec:	8e 89       	ldd	r24, Y+22	; 0x16
 3ee:	9f 89       	ldd	r25, Y+23	; 0x17
 3f0:	0e 94 b4 02 	call	0x568	; 0x568 <__mulsf3>
 3f4:	dc 01       	movw	r26, r24
 3f6:	cb 01       	movw	r24, r22
 3f8:	bc 01       	movw	r22, r24
 3fa:	cd 01       	movw	r24, r26
 3fc:	0e 94 33 02 	call	0x466	; 0x466 <__fixunssfsi>
 400:	dc 01       	movw	r26, r24
 402:	cb 01       	movw	r24, r22
 404:	9d 8f       	std	Y+29, r25	; 0x1d
 406:	8c 8f       	std	Y+28, r24	; 0x1c
 408:	0f c0       	rjmp	.+30     	; 0x428 <__LOCK_REGION_LENGTH__+0x28>
 40a:	80 e9       	ldi	r24, 0x90	; 144
 40c:	91 e0       	ldi	r25, 0x01	; 1
 40e:	9f 8f       	std	Y+31, r25	; 0x1f
 410:	8e 8f       	std	Y+30, r24	; 0x1e
 412:	8e 8d       	ldd	r24, Y+30	; 0x1e
 414:	9f 8d       	ldd	r25, Y+31	; 0x1f
 416:	01 97       	sbiw	r24, 0x01	; 1
 418:	f1 f7       	brne	.-4      	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
 41a:	9f 8f       	std	Y+31, r25	; 0x1f
 41c:	8e 8f       	std	Y+30, r24	; 0x1e
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 41e:	8c 8d       	ldd	r24, Y+28	; 0x1c
 420:	9d 8d       	ldd	r25, Y+29	; 0x1d
 422:	01 97       	sbiw	r24, 0x01	; 1
 424:	9d 8f       	std	Y+29, r25	; 0x1d
 426:	8c 8f       	std	Y+28, r24	; 0x1c
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 428:	8c 8d       	ldd	r24, Y+28	; 0x1c
 42a:	9d 8d       	ldd	r25, Y+29	; 0x1d
 42c:	89 2b       	or	r24, r25
 42e:	69 f7       	brne	.-38     	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
 430:	14 c0       	rjmp	.+40     	; 0x45a <__LOCK_REGION_LENGTH__+0x5a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 432:	68 8d       	ldd	r22, Y+24	; 0x18
 434:	79 8d       	ldd	r23, Y+25	; 0x19
 436:	8a 8d       	ldd	r24, Y+26	; 0x1a
 438:	9b 8d       	ldd	r25, Y+27	; 0x1b
 43a:	0e 94 33 02 	call	0x466	; 0x466 <__fixunssfsi>
 43e:	dc 01       	movw	r26, r24
 440:	cb 01       	movw	r24, r22
 442:	9d 8f       	std	Y+29, r25	; 0x1d
 444:	8c 8f       	std	Y+28, r24	; 0x1c
 446:	8c 8d       	ldd	r24, Y+28	; 0x1c
 448:	9d 8d       	ldd	r25, Y+29	; 0x1d
 44a:	99 a3       	std	Y+33, r25	; 0x21
 44c:	88 a3       	std	Y+32, r24	; 0x20
 44e:	88 a1       	ldd	r24, Y+32	; 0x20
 450:	99 a1       	ldd	r25, Y+33	; 0x21
 452:	01 97       	sbiw	r24, 0x01	; 1
 454:	f1 f7       	brne	.-4      	; 0x452 <__LOCK_REGION_LENGTH__+0x52>
 456:	99 a3       	std	Y+33, r25	; 0x21
 458:	88 a3       	std	Y+32, r24	; 0x20
        _delay_ms(200);
    }
 45a:	03 cf       	rjmp	.-506    	; 0x262 <main+0x58>

0000045c <__cmpsf2>:
 45c:	0e 94 62 02 	call	0x4c4	; 0x4c4 <__fp_cmp>
 460:	08 f4       	brcc	.+2      	; 0x464 <__cmpsf2+0x8>
 462:	81 e0       	ldi	r24, 0x01	; 1
 464:	08 95       	ret

00000466 <__fixunssfsi>:
 466:	0e 94 8e 02 	call	0x51c	; 0x51c <__fp_splitA>
 46a:	88 f0       	brcs	.+34     	; 0x48e <__fixunssfsi+0x28>
 46c:	9f 57       	subi	r25, 0x7F	; 127
 46e:	98 f0       	brcs	.+38     	; 0x496 <__fixunssfsi+0x30>
 470:	b9 2f       	mov	r27, r25
 472:	99 27       	eor	r25, r25
 474:	b7 51       	subi	r27, 0x17	; 23
 476:	b0 f0       	brcs	.+44     	; 0x4a4 <__fixunssfsi+0x3e>
 478:	e1 f0       	breq	.+56     	; 0x4b2 <__fixunssfsi+0x4c>
 47a:	66 0f       	add	r22, r22
 47c:	77 1f       	adc	r23, r23
 47e:	88 1f       	adc	r24, r24
 480:	99 1f       	adc	r25, r25
 482:	1a f0       	brmi	.+6      	; 0x48a <__fixunssfsi+0x24>
 484:	ba 95       	dec	r27
 486:	c9 f7       	brne	.-14     	; 0x47a <__fixunssfsi+0x14>
 488:	14 c0       	rjmp	.+40     	; 0x4b2 <__fixunssfsi+0x4c>
 48a:	b1 30       	cpi	r27, 0x01	; 1
 48c:	91 f0       	breq	.+36     	; 0x4b2 <__fixunssfsi+0x4c>
 48e:	0e 94 a8 02 	call	0x550	; 0x550 <__fp_zero>
 492:	b1 e0       	ldi	r27, 0x01	; 1
 494:	08 95       	ret
 496:	0c 94 a8 02 	jmp	0x550	; 0x550 <__fp_zero>
 49a:	67 2f       	mov	r22, r23
 49c:	78 2f       	mov	r23, r24
 49e:	88 27       	eor	r24, r24
 4a0:	b8 5f       	subi	r27, 0xF8	; 248
 4a2:	39 f0       	breq	.+14     	; 0x4b2 <__fixunssfsi+0x4c>
 4a4:	b9 3f       	cpi	r27, 0xF9	; 249
 4a6:	cc f3       	brlt	.-14     	; 0x49a <__fixunssfsi+0x34>
 4a8:	86 95       	lsr	r24
 4aa:	77 95       	ror	r23
 4ac:	67 95       	ror	r22
 4ae:	b3 95       	inc	r27
 4b0:	d9 f7       	brne	.-10     	; 0x4a8 <__fixunssfsi+0x42>
 4b2:	3e f4       	brtc	.+14     	; 0x4c2 <__fixunssfsi+0x5c>
 4b4:	90 95       	com	r25
 4b6:	80 95       	com	r24
 4b8:	70 95       	com	r23
 4ba:	61 95       	neg	r22
 4bc:	7f 4f       	sbci	r23, 0xFF	; 255
 4be:	8f 4f       	sbci	r24, 0xFF	; 255
 4c0:	9f 4f       	sbci	r25, 0xFF	; 255
 4c2:	08 95       	ret

000004c4 <__fp_cmp>:
 4c4:	99 0f       	add	r25, r25
 4c6:	00 08       	sbc	r0, r0
 4c8:	55 0f       	add	r21, r21
 4ca:	aa 0b       	sbc	r26, r26
 4cc:	e0 e8       	ldi	r30, 0x80	; 128
 4ce:	fe ef       	ldi	r31, 0xFE	; 254
 4d0:	16 16       	cp	r1, r22
 4d2:	17 06       	cpc	r1, r23
 4d4:	e8 07       	cpc	r30, r24
 4d6:	f9 07       	cpc	r31, r25
 4d8:	c0 f0       	brcs	.+48     	; 0x50a <__fp_cmp+0x46>
 4da:	12 16       	cp	r1, r18
 4dc:	13 06       	cpc	r1, r19
 4de:	e4 07       	cpc	r30, r20
 4e0:	f5 07       	cpc	r31, r21
 4e2:	98 f0       	brcs	.+38     	; 0x50a <__fp_cmp+0x46>
 4e4:	62 1b       	sub	r22, r18
 4e6:	73 0b       	sbc	r23, r19
 4e8:	84 0b       	sbc	r24, r20
 4ea:	95 0b       	sbc	r25, r21
 4ec:	39 f4       	brne	.+14     	; 0x4fc <__fp_cmp+0x38>
 4ee:	0a 26       	eor	r0, r26
 4f0:	61 f0       	breq	.+24     	; 0x50a <__fp_cmp+0x46>
 4f2:	23 2b       	or	r18, r19
 4f4:	24 2b       	or	r18, r20
 4f6:	25 2b       	or	r18, r21
 4f8:	21 f4       	brne	.+8      	; 0x502 <__fp_cmp+0x3e>
 4fa:	08 95       	ret
 4fc:	0a 26       	eor	r0, r26
 4fe:	09 f4       	brne	.+2      	; 0x502 <__fp_cmp+0x3e>
 500:	a1 40       	sbci	r26, 0x01	; 1
 502:	a6 95       	lsr	r26
 504:	8f ef       	ldi	r24, 0xFF	; 255
 506:	81 1d       	adc	r24, r1
 508:	81 1d       	adc	r24, r1
 50a:	08 95       	ret

0000050c <__fp_split3>:
 50c:	57 fd       	sbrc	r21, 7
 50e:	90 58       	subi	r25, 0x80	; 128
 510:	44 0f       	add	r20, r20
 512:	55 1f       	adc	r21, r21
 514:	59 f0       	breq	.+22     	; 0x52c <__fp_splitA+0x10>
 516:	5f 3f       	cpi	r21, 0xFF	; 255
 518:	71 f0       	breq	.+28     	; 0x536 <__fp_splitA+0x1a>
 51a:	47 95       	ror	r20

0000051c <__fp_splitA>:
 51c:	88 0f       	add	r24, r24
 51e:	97 fb       	bst	r25, 7
 520:	99 1f       	adc	r25, r25
 522:	61 f0       	breq	.+24     	; 0x53c <__fp_splitA+0x20>
 524:	9f 3f       	cpi	r25, 0xFF	; 255
 526:	79 f0       	breq	.+30     	; 0x546 <__fp_splitA+0x2a>
 528:	87 95       	ror	r24
 52a:	08 95       	ret
 52c:	12 16       	cp	r1, r18
 52e:	13 06       	cpc	r1, r19
 530:	14 06       	cpc	r1, r20
 532:	55 1f       	adc	r21, r21
 534:	f2 cf       	rjmp	.-28     	; 0x51a <__fp_split3+0xe>
 536:	46 95       	lsr	r20
 538:	f1 df       	rcall	.-30     	; 0x51c <__fp_splitA>
 53a:	08 c0       	rjmp	.+16     	; 0x54c <__fp_splitA+0x30>
 53c:	16 16       	cp	r1, r22
 53e:	17 06       	cpc	r1, r23
 540:	18 06       	cpc	r1, r24
 542:	99 1f       	adc	r25, r25
 544:	f1 cf       	rjmp	.-30     	; 0x528 <__fp_splitA+0xc>
 546:	86 95       	lsr	r24
 548:	71 05       	cpc	r23, r1
 54a:	61 05       	cpc	r22, r1
 54c:	08 94       	sec
 54e:	08 95       	ret

00000550 <__fp_zero>:
 550:	e8 94       	clt

00000552 <__fp_szero>:
 552:	bb 27       	eor	r27, r27
 554:	66 27       	eor	r22, r22
 556:	77 27       	eor	r23, r23
 558:	cb 01       	movw	r24, r22
 55a:	97 f9       	bld	r25, 7
 55c:	08 95       	ret

0000055e <__gesf2>:
 55e:	0e 94 62 02 	call	0x4c4	; 0x4c4 <__fp_cmp>
 562:	08 f4       	brcc	.+2      	; 0x566 <__gesf2+0x8>
 564:	8f ef       	ldi	r24, 0xFF	; 255
 566:	08 95       	ret

00000568 <__mulsf3>:
 568:	0e 94 c7 02 	call	0x58e	; 0x58e <__mulsf3x>
 56c:	0c 94 38 03 	jmp	0x670	; 0x670 <__fp_round>
 570:	0e 94 2a 03 	call	0x654	; 0x654 <__fp_pscA>
 574:	38 f0       	brcs	.+14     	; 0x584 <__mulsf3+0x1c>
 576:	0e 94 31 03 	call	0x662	; 0x662 <__fp_pscB>
 57a:	20 f0       	brcs	.+8      	; 0x584 <__mulsf3+0x1c>
 57c:	95 23       	and	r25, r21
 57e:	11 f0       	breq	.+4      	; 0x584 <__mulsf3+0x1c>
 580:	0c 94 21 03 	jmp	0x642	; 0x642 <__fp_inf>
 584:	0c 94 27 03 	jmp	0x64e	; 0x64e <__fp_nan>
 588:	11 24       	eor	r1, r1
 58a:	0c 94 a9 02 	jmp	0x552	; 0x552 <__fp_szero>

0000058e <__mulsf3x>:
 58e:	0e 94 86 02 	call	0x50c	; 0x50c <__fp_split3>
 592:	70 f3       	brcs	.-36     	; 0x570 <__mulsf3+0x8>

00000594 <__mulsf3_pse>:
 594:	95 9f       	mul	r25, r21
 596:	c1 f3       	breq	.-16     	; 0x588 <__mulsf3+0x20>
 598:	95 0f       	add	r25, r21
 59a:	50 e0       	ldi	r21, 0x00	; 0
 59c:	55 1f       	adc	r21, r21
 59e:	62 9f       	mul	r22, r18
 5a0:	f0 01       	movw	r30, r0
 5a2:	72 9f       	mul	r23, r18
 5a4:	bb 27       	eor	r27, r27
 5a6:	f0 0d       	add	r31, r0
 5a8:	b1 1d       	adc	r27, r1
 5aa:	63 9f       	mul	r22, r19
 5ac:	aa 27       	eor	r26, r26
 5ae:	f0 0d       	add	r31, r0
 5b0:	b1 1d       	adc	r27, r1
 5b2:	aa 1f       	adc	r26, r26
 5b4:	64 9f       	mul	r22, r20
 5b6:	66 27       	eor	r22, r22
 5b8:	b0 0d       	add	r27, r0
 5ba:	a1 1d       	adc	r26, r1
 5bc:	66 1f       	adc	r22, r22
 5be:	82 9f       	mul	r24, r18
 5c0:	22 27       	eor	r18, r18
 5c2:	b0 0d       	add	r27, r0
 5c4:	a1 1d       	adc	r26, r1
 5c6:	62 1f       	adc	r22, r18
 5c8:	73 9f       	mul	r23, r19
 5ca:	b0 0d       	add	r27, r0
 5cc:	a1 1d       	adc	r26, r1
 5ce:	62 1f       	adc	r22, r18
 5d0:	83 9f       	mul	r24, r19
 5d2:	a0 0d       	add	r26, r0
 5d4:	61 1d       	adc	r22, r1
 5d6:	22 1f       	adc	r18, r18
 5d8:	74 9f       	mul	r23, r20
 5da:	33 27       	eor	r19, r19
 5dc:	a0 0d       	add	r26, r0
 5de:	61 1d       	adc	r22, r1
 5e0:	23 1f       	adc	r18, r19
 5e2:	84 9f       	mul	r24, r20
 5e4:	60 0d       	add	r22, r0
 5e6:	21 1d       	adc	r18, r1
 5e8:	82 2f       	mov	r24, r18
 5ea:	76 2f       	mov	r23, r22
 5ec:	6a 2f       	mov	r22, r26
 5ee:	11 24       	eor	r1, r1
 5f0:	9f 57       	subi	r25, 0x7F	; 127
 5f2:	50 40       	sbci	r21, 0x00	; 0
 5f4:	9a f0       	brmi	.+38     	; 0x61c <__mulsf3_pse+0x88>
 5f6:	f1 f0       	breq	.+60     	; 0x634 <__mulsf3_pse+0xa0>
 5f8:	88 23       	and	r24, r24
 5fa:	4a f0       	brmi	.+18     	; 0x60e <__mulsf3_pse+0x7a>
 5fc:	ee 0f       	add	r30, r30
 5fe:	ff 1f       	adc	r31, r31
 600:	bb 1f       	adc	r27, r27
 602:	66 1f       	adc	r22, r22
 604:	77 1f       	adc	r23, r23
 606:	88 1f       	adc	r24, r24
 608:	91 50       	subi	r25, 0x01	; 1
 60a:	50 40       	sbci	r21, 0x00	; 0
 60c:	a9 f7       	brne	.-22     	; 0x5f8 <__mulsf3_pse+0x64>
 60e:	9e 3f       	cpi	r25, 0xFE	; 254
 610:	51 05       	cpc	r21, r1
 612:	80 f0       	brcs	.+32     	; 0x634 <__mulsf3_pse+0xa0>
 614:	0c 94 21 03 	jmp	0x642	; 0x642 <__fp_inf>
 618:	0c 94 a9 02 	jmp	0x552	; 0x552 <__fp_szero>
 61c:	5f 3f       	cpi	r21, 0xFF	; 255
 61e:	e4 f3       	brlt	.-8      	; 0x618 <__mulsf3_pse+0x84>
 620:	98 3e       	cpi	r25, 0xE8	; 232
 622:	d4 f3       	brlt	.-12     	; 0x618 <__mulsf3_pse+0x84>
 624:	86 95       	lsr	r24
 626:	77 95       	ror	r23
 628:	67 95       	ror	r22
 62a:	b7 95       	ror	r27
 62c:	f7 95       	ror	r31
 62e:	e7 95       	ror	r30
 630:	9f 5f       	subi	r25, 0xFF	; 255
 632:	c1 f7       	brne	.-16     	; 0x624 <__mulsf3_pse+0x90>
 634:	fe 2b       	or	r31, r30
 636:	88 0f       	add	r24, r24
 638:	91 1d       	adc	r25, r1
 63a:	96 95       	lsr	r25
 63c:	87 95       	ror	r24
 63e:	97 f9       	bld	r25, 7
 640:	08 95       	ret

00000642 <__fp_inf>:
 642:	97 f9       	bld	r25, 7
 644:	9f 67       	ori	r25, 0x7F	; 127
 646:	80 e8       	ldi	r24, 0x80	; 128
 648:	70 e0       	ldi	r23, 0x00	; 0
 64a:	60 e0       	ldi	r22, 0x00	; 0
 64c:	08 95       	ret

0000064e <__fp_nan>:
 64e:	9f ef       	ldi	r25, 0xFF	; 255
 650:	80 ec       	ldi	r24, 0xC0	; 192
 652:	08 95       	ret

00000654 <__fp_pscA>:
 654:	00 24       	eor	r0, r0
 656:	0a 94       	dec	r0
 658:	16 16       	cp	r1, r22
 65a:	17 06       	cpc	r1, r23
 65c:	18 06       	cpc	r1, r24
 65e:	09 06       	cpc	r0, r25
 660:	08 95       	ret

00000662 <__fp_pscB>:
 662:	00 24       	eor	r0, r0
 664:	0a 94       	dec	r0
 666:	12 16       	cp	r1, r18
 668:	13 06       	cpc	r1, r19
 66a:	14 06       	cpc	r1, r20
 66c:	05 06       	cpc	r0, r21
 66e:	08 95       	ret

00000670 <__fp_round>:
 670:	09 2e       	mov	r0, r25
 672:	03 94       	inc	r0
 674:	00 0c       	add	r0, r0
 676:	11 f4       	brne	.+4      	; 0x67c <__fp_round+0xc>
 678:	88 23       	and	r24, r24
 67a:	52 f0       	brmi	.+20     	; 0x690 <__fp_round+0x20>
 67c:	bb 0f       	add	r27, r27
 67e:	40 f4       	brcc	.+16     	; 0x690 <__fp_round+0x20>
 680:	bf 2b       	or	r27, r31
 682:	11 f4       	brne	.+4      	; 0x688 <__fp_round+0x18>
 684:	60 ff       	sbrs	r22, 0
 686:	04 c0       	rjmp	.+8      	; 0x690 <__fp_round+0x20>
 688:	6f 5f       	subi	r22, 0xFF	; 255
 68a:	7f 4f       	sbci	r23, 0xFF	; 255
 68c:	8f 4f       	sbci	r24, 0xFF	; 255
 68e:	9f 4f       	sbci	r25, 0xFF	; 255
 690:	08 95       	ret

00000692 <__udivmodsi4>:
 692:	a1 e2       	ldi	r26, 0x21	; 33
 694:	1a 2e       	mov	r1, r26
 696:	aa 1b       	sub	r26, r26
 698:	bb 1b       	sub	r27, r27
 69a:	fd 01       	movw	r30, r26
 69c:	0d c0       	rjmp	.+26     	; 0x6b8 <__udivmodsi4_ep>

0000069e <__udivmodsi4_loop>:
 69e:	aa 1f       	adc	r26, r26
 6a0:	bb 1f       	adc	r27, r27
 6a2:	ee 1f       	adc	r30, r30
 6a4:	ff 1f       	adc	r31, r31
 6a6:	a2 17       	cp	r26, r18
 6a8:	b3 07       	cpc	r27, r19
 6aa:	e4 07       	cpc	r30, r20
 6ac:	f5 07       	cpc	r31, r21
 6ae:	20 f0       	brcs	.+8      	; 0x6b8 <__udivmodsi4_ep>
 6b0:	a2 1b       	sub	r26, r18
 6b2:	b3 0b       	sbc	r27, r19
 6b4:	e4 0b       	sbc	r30, r20
 6b6:	f5 0b       	sbc	r31, r21

000006b8 <__udivmodsi4_ep>:
 6b8:	66 1f       	adc	r22, r22
 6ba:	77 1f       	adc	r23, r23
 6bc:	88 1f       	adc	r24, r24
 6be:	99 1f       	adc	r25, r25
 6c0:	1a 94       	dec	r1
 6c2:	69 f7       	brne	.-38     	; 0x69e <__udivmodsi4_loop>
 6c4:	60 95       	com	r22
 6c6:	70 95       	com	r23
 6c8:	80 95       	com	r24
 6ca:	90 95       	com	r25
 6cc:	9b 01       	movw	r18, r22
 6ce:	ac 01       	movw	r20, r24
 6d0:	bd 01       	movw	r22, r26
 6d2:	cf 01       	movw	r24, r30
 6d4:	08 95       	ret

000006d6 <_exit>:
 6d6:	f8 94       	cli

000006d8 <__stop_program>:
 6d8:	ff cf       	rjmp	.-2      	; 0x6d8 <__stop_program>
