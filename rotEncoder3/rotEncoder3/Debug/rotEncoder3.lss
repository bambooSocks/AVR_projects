
rotEncoder3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000005b2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000053e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000012  00800100  00800100  000005b2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000005b2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000005e4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000c0  00000000  00000000  00000624  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000bbe  00000000  00000000  000006e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007af  00000000  00000000  000012a2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000837  00000000  00000000  00001a51  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002b0  00000000  00000000  00002288  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000427  00000000  00000000  00002538  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000059a  00000000  00000000  0000295f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a0  00000000  00000000  00002ef9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 c5 00 	jmp	0x18a	; 0x18a <__vector_14>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a2 31       	cpi	r26, 0x12	; 18
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 48 00 	call	0x90	; 0x90 <main>
  88:	0c 94 9d 02 	jmp	0x53a	; 0x53a <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <main>:
#include "omniLib.h"

uint8_t readEncoder(void);

int main(void)
{
  90:	cf 93       	push	r28
  92:	df 93       	push	r29
  94:	00 d0       	rcall	.+0      	; 0x96 <main+0x6>
  96:	1f 92       	push	r1
  98:	cd b7       	in	r28, 0x3d	; 61
  9a:	de b7       	in	r29, 0x3e	; 62
    uint8_t oldState = readEncoder(), state = 0, number = 0;
  9c:	0e 94 a0 00 	call	0x140	; 0x140 <readEncoder>
  a0:	89 83       	std	Y+1, r24	; 0x01
  a2:	1b 82       	std	Y+3, r1	; 0x03
  a4:	1a 82       	std	Y+2, r1	; 0x02
    initUART(9600, 1);
  a6:	61 e0       	ldi	r22, 0x01	; 1
  a8:	80 e8       	ldi	r24, 0x80	; 128
  aa:	95 e2       	ldi	r25, 0x25	; 37
  ac:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <initUART>
    charTX(power(3,2)+'0');
  b0:	62 e0       	ldi	r22, 0x02	; 2
  b2:	70 e0       	ldi	r23, 0x00	; 0
  b4:	83 e0       	ldi	r24, 0x03	; 3
  b6:	90 e0       	ldi	r25, 0x00	; 0
  b8:	0e 94 0a 02 	call	0x414	; 0x414 <power>
  bc:	80 5d       	subi	r24, 0xD0	; 208
  be:	0e 94 3c 01 	call	0x278	; 0x278 <charTX>
    numTX(number);
  c2:	8a 81       	ldd	r24, Y+2	; 0x02
  c4:	88 2f       	mov	r24, r24
  c6:	90 e0       	ldi	r25, 0x00	; 0
  c8:	0e 94 5f 01 	call	0x2be	; 0x2be <numTX>

    //PORTD |= (1 << PORTD2) | (1 << PORTD3);
    while (1) 
    {
        state = readEncoder();
  cc:	0e 94 a0 00 	call	0x140	; 0x140 <readEncoder>
  d0:	8b 83       	std	Y+3, r24	; 0x03
        if (oldState != state){
  d2:	99 81       	ldd	r25, Y+1	; 0x01
  d4:	8b 81       	ldd	r24, Y+3	; 0x03
  d6:	98 17       	cp	r25, r24
  d8:	81 f1       	breq	.+96     	; 0x13a <main+0xaa>
            if(oldState == 1 && state == 3){ //counterclockwise
  da:	89 81       	ldd	r24, Y+1	; 0x01
  dc:	81 30       	cpi	r24, 0x01	; 1
  de:	b1 f4       	brne	.+44     	; 0x10c <main+0x7c>
  e0:	8b 81       	ldd	r24, Y+3	; 0x03
  e2:	83 30       	cpi	r24, 0x03	; 3
  e4:	99 f4       	brne	.+38     	; 0x10c <main+0x7c>
                if (number != 255){
  e6:	8a 81       	ldd	r24, Y+2	; 0x02
  e8:	8f 3f       	cpi	r24, 0xFF	; 255
  ea:	79 f0       	breq	.+30     	; 0x10a <main+0x7a>
                    number++;
  ec:	8a 81       	ldd	r24, Y+2	; 0x02
  ee:	8f 5f       	subi	r24, 0xFF	; 255
  f0:	8a 83       	std	Y+2, r24	; 0x02
                    numTX(number);
  f2:	8a 81       	ldd	r24, Y+2	; 0x02
  f4:	88 2f       	mov	r24, r24
  f6:	90 e0       	ldi	r25, 0x00	; 0
  f8:	0e 94 5f 01 	call	0x2be	; 0x2be <numTX>
                    charTX('\r');
  fc:	8d e0       	ldi	r24, 0x0D	; 13
  fe:	0e 94 3c 01 	call	0x278	; 0x278 <charTX>
                    charTX('\n');
 102:	8a e0       	ldi	r24, 0x0A	; 10
 104:	0e 94 3c 01 	call	0x278	; 0x278 <charTX>
    while (1) 
    {
        state = readEncoder();
        if (oldState != state){
            if(oldState == 1 && state == 3){ //counterclockwise
                if (number != 255){
 108:	18 c0       	rjmp	.+48     	; 0x13a <main+0xaa>
 10a:	17 c0       	rjmp	.+46     	; 0x13a <main+0xaa>
                    number++;
                    numTX(number);
                    charTX('\r');
                    charTX('\n');
                }
            } else if(oldState == 0 && state == 2){ //clockwise
 10c:	89 81       	ldd	r24, Y+1	; 0x01
 10e:	88 23       	and	r24, r24
 110:	a1 f4       	brne	.+40     	; 0x13a <main+0xaa>
 112:	8b 81       	ldd	r24, Y+3	; 0x03
 114:	82 30       	cpi	r24, 0x02	; 2
 116:	89 f4       	brne	.+34     	; 0x13a <main+0xaa>
                if (number != 0){
 118:	8a 81       	ldd	r24, Y+2	; 0x02
 11a:	88 23       	and	r24, r24
 11c:	71 f0       	breq	.+28     	; 0x13a <main+0xaa>
                    number--;
 11e:	8a 81       	ldd	r24, Y+2	; 0x02
 120:	81 50       	subi	r24, 0x01	; 1
 122:	8a 83       	std	Y+2, r24	; 0x02
                    numTX(number);
 124:	8a 81       	ldd	r24, Y+2	; 0x02
 126:	88 2f       	mov	r24, r24
 128:	90 e0       	ldi	r25, 0x00	; 0
 12a:	0e 94 5f 01 	call	0x2be	; 0x2be <numTX>
                    charTX('\r');
 12e:	8d e0       	ldi	r24, 0x0D	; 13
 130:	0e 94 3c 01 	call	0x278	; 0x278 <charTX>
                    charTX('\n');
 134:	8a e0       	ldi	r24, 0x0A	; 10
 136:	0e 94 3c 01 	call	0x278	; 0x278 <charTX>
                }
            }
        }
        oldState = state;       
 13a:	8b 81       	ldd	r24, Y+3	; 0x03
 13c:	89 83       	std	Y+1, r24	; 0x01
    }
 13e:	c6 cf       	rjmp	.-116    	; 0xcc <main+0x3c>

00000140 <readEncoder>:
}

uint8_t readEncoder(void){
 140:	cf 93       	push	r28
 142:	df 93       	push	r29
 144:	1f 92       	push	r1
 146:	cd b7       	in	r28, 0x3d	; 61
 148:	de b7       	in	r29, 0x3e	; 62
    uint8_t res = 0;
 14a:	19 82       	std	Y+1, r1	; 0x01
    if(PINC & (1 << PINC0)){
 14c:	86 e2       	ldi	r24, 0x26	; 38
 14e:	90 e0       	ldi	r25, 0x00	; 0
 150:	fc 01       	movw	r30, r24
 152:	80 81       	ld	r24, Z
 154:	88 2f       	mov	r24, r24
 156:	90 e0       	ldi	r25, 0x00	; 0
 158:	81 70       	andi	r24, 0x01	; 1
 15a:	99 27       	eor	r25, r25
 15c:	89 2b       	or	r24, r25
 15e:	19 f0       	breq	.+6      	; 0x166 <readEncoder+0x26>
        res |= (1 << 1);
 160:	89 81       	ldd	r24, Y+1	; 0x01
 162:	82 60       	ori	r24, 0x02	; 2
 164:	89 83       	std	Y+1, r24	; 0x01
    }
    if(PINC & (1 << PINC1)){
 166:	86 e2       	ldi	r24, 0x26	; 38
 168:	90 e0       	ldi	r25, 0x00	; 0
 16a:	fc 01       	movw	r30, r24
 16c:	80 81       	ld	r24, Z
 16e:	88 2f       	mov	r24, r24
 170:	90 e0       	ldi	r25, 0x00	; 0
 172:	82 70       	andi	r24, 0x02	; 2
 174:	99 27       	eor	r25, r25
 176:	89 2b       	or	r24, r25
 178:	19 f0       	breq	.+6      	; 0x180 <readEncoder+0x40>
        res |= (1 << 0);
 17a:	89 81       	ldd	r24, Y+1	; 0x01
 17c:	81 60       	ori	r24, 0x01	; 1
 17e:	89 83       	std	Y+1, r24	; 0x01
    }
    return res;
 180:	89 81       	ldd	r24, Y+1	; 0x01
}
 182:	0f 90       	pop	r0
 184:	df 91       	pop	r29
 186:	cf 91       	pop	r28
 188:	08 95       	ret

0000018a <__vector_14>:
void strTX(const char *str){
	while (*str){
		charTX(*str);
		str++;
	}
}
 18a:	1f 92       	push	r1
 18c:	0f 92       	push	r0
 18e:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 192:	0f 92       	push	r0
 194:	11 24       	eor	r1, r1
 196:	8f 93       	push	r24
 198:	9f 93       	push	r25
 19a:	cf 93       	push	r28
 19c:	df 93       	push	r29
 19e:	cd b7       	in	r28, 0x3d	; 61
 1a0:	de b7       	in	r29, 0x3e	; 62
 1a2:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <delayCount>
 1a6:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <delayCount+0x1>
 1aa:	01 96       	adiw	r24, 0x01	; 1
 1ac:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <delayCount+0x1>
 1b0:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <delayCount>
 1b4:	df 91       	pop	r29
 1b6:	cf 91       	pop	r28
 1b8:	9f 91       	pop	r25
 1ba:	8f 91       	pop	r24
 1bc:	0f 90       	pop	r0
 1be:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 1c2:	0f 90       	pop	r0
 1c4:	1f 90       	pop	r1
 1c6:	18 95       	reti

000001c8 <initUART>:
 1c8:	0f 93       	push	r16
 1ca:	1f 93       	push	r17
 1cc:	cf 93       	push	r28
 1ce:	df 93       	push	r29
 1d0:	cd b7       	in	r28, 0x3d	; 61
 1d2:	de b7       	in	r29, 0x3e	; 62
 1d4:	27 97       	sbiw	r28, 0x07	; 7
 1d6:	0f b6       	in	r0, 0x3f	; 63
 1d8:	f8 94       	cli
 1da:	de bf       	out	0x3e, r29	; 62
 1dc:	0f be       	out	0x3f, r0	; 63
 1de:	cd bf       	out	0x3d, r28	; 61
 1e0:	9a 83       	std	Y+2, r25	; 0x02
 1e2:	89 83       	std	Y+1, r24	; 0x01
 1e4:	6b 83       	std	Y+3, r22	; 0x03
 1e6:	04 ec       	ldi	r16, 0xC4	; 196
 1e8:	10 e0       	ldi	r17, 0x00	; 0
 1ea:	89 81       	ldd	r24, Y+1	; 0x01
 1ec:	9a 81       	ldd	r25, Y+2	; 0x02
 1ee:	96 95       	lsr	r25
 1f0:	87 95       	ror	r24
 1f2:	cc 01       	movw	r24, r24
 1f4:	a0 e0       	ldi	r26, 0x00	; 0
 1f6:	b0 e0       	ldi	r27, 0x00	; 0
 1f8:	80 5c       	subi	r24, 0xC0	; 192
 1fa:	9d 4b       	sbci	r25, 0xBD	; 189
 1fc:	a0 4f       	sbci	r26, 0xF0	; 240
 1fe:	bf 4f       	sbci	r27, 0xFF	; 255
 200:	29 81       	ldd	r18, Y+1	; 0x01
 202:	3a 81       	ldd	r19, Y+2	; 0x02
 204:	99 01       	movw	r18, r18
 206:	40 e0       	ldi	r20, 0x00	; 0
 208:	50 e0       	ldi	r21, 0x00	; 0
 20a:	bc 01       	movw	r22, r24
 20c:	cd 01       	movw	r24, r26
 20e:	0e 94 58 02 	call	0x4b0	; 0x4b0 <__udivmodsi4>
 212:	da 01       	movw	r26, r20
 214:	c9 01       	movw	r24, r18
 216:	01 97       	sbiw	r24, 0x01	; 1
 218:	f8 01       	movw	r30, r16
 21a:	91 83       	std	Z+1, r25	; 0x01
 21c:	80 83       	st	Z, r24
 21e:	81 ec       	ldi	r24, 0xC1	; 193
 220:	90 e0       	ldi	r25, 0x00	; 0
 222:	21 ec       	ldi	r18, 0xC1	; 193
 224:	30 e0       	ldi	r19, 0x00	; 0
 226:	f9 01       	movw	r30, r18
 228:	20 81       	ld	r18, Z
 22a:	28 61       	ori	r18, 0x18	; 24
 22c:	fc 01       	movw	r30, r24
 22e:	20 83       	st	Z, r18
 230:	8b 81       	ldd	r24, Y+3	; 0x03
 232:	81 30       	cpi	r24, 0x01	; 1
 234:	51 f4       	brne	.+20     	; 0x24a <initUART+0x82>
 236:	82 ec       	ldi	r24, 0xC2	; 194
 238:	90 e0       	ldi	r25, 0x00	; 0
 23a:	22 ec       	ldi	r18, 0xC2	; 194
 23c:	30 e0       	ldi	r19, 0x00	; 0
 23e:	f9 01       	movw	r30, r18
 240:	20 81       	ld	r18, Z
 242:	27 7f       	andi	r18, 0xF7	; 247
 244:	fc 01       	movw	r30, r24
 246:	20 83       	st	Z, r18
 248:	0c c0       	rjmp	.+24     	; 0x262 <initUART+0x9a>
 24a:	8b 81       	ldd	r24, Y+3	; 0x03
 24c:	82 30       	cpi	r24, 0x02	; 2
 24e:	49 f4       	brne	.+18     	; 0x262 <initUART+0x9a>
 250:	82 ec       	ldi	r24, 0xC2	; 194
 252:	90 e0       	ldi	r25, 0x00	; 0
 254:	22 ec       	ldi	r18, 0xC2	; 194
 256:	30 e0       	ldi	r19, 0x00	; 0
 258:	f9 01       	movw	r30, r18
 25a:	20 81       	ld	r18, Z
 25c:	28 60       	ori	r18, 0x08	; 8
 25e:	fc 01       	movw	r30, r24
 260:	20 83       	st	Z, r18
 262:	27 96       	adiw	r28, 0x07	; 7
 264:	0f b6       	in	r0, 0x3f	; 63
 266:	f8 94       	cli
 268:	de bf       	out	0x3e, r29	; 62
 26a:	0f be       	out	0x3f, r0	; 63
 26c:	cd bf       	out	0x3d, r28	; 61
 26e:	df 91       	pop	r29
 270:	cf 91       	pop	r28
 272:	1f 91       	pop	r17
 274:	0f 91       	pop	r16
 276:	08 95       	ret

00000278 <charTX>:
 278:	cf 93       	push	r28
 27a:	df 93       	push	r29
 27c:	1f 92       	push	r1
 27e:	cd b7       	in	r28, 0x3d	; 61
 280:	de b7       	in	r29, 0x3e	; 62
 282:	89 83       	std	Y+1, r24	; 0x01
 284:	86 ec       	ldi	r24, 0xC6	; 198
 286:	90 e0       	ldi	r25, 0x00	; 0
 288:	29 81       	ldd	r18, Y+1	; 0x01
 28a:	fc 01       	movw	r30, r24
 28c:	20 83       	st	Z, r18
 28e:	00 00       	nop
 290:	80 ec       	ldi	r24, 0xC0	; 192
 292:	90 e0       	ldi	r25, 0x00	; 0
 294:	fc 01       	movw	r30, r24
 296:	80 81       	ld	r24, Z
 298:	88 2f       	mov	r24, r24
 29a:	90 e0       	ldi	r25, 0x00	; 0
 29c:	80 74       	andi	r24, 0x40	; 64
 29e:	99 27       	eor	r25, r25
 2a0:	89 2b       	or	r24, r25
 2a2:	b1 f3       	breq	.-20     	; 0x290 <charTX+0x18>
 2a4:	80 ec       	ldi	r24, 0xC0	; 192
 2a6:	90 e0       	ldi	r25, 0x00	; 0
 2a8:	20 ec       	ldi	r18, 0xC0	; 192
 2aa:	30 e0       	ldi	r19, 0x00	; 0
 2ac:	f9 01       	movw	r30, r18
 2ae:	20 81       	ld	r18, Z
 2b0:	20 64       	ori	r18, 0x40	; 64
 2b2:	fc 01       	movw	r30, r24
 2b4:	20 83       	st	Z, r18
 2b6:	0f 90       	pop	r0
 2b8:	df 91       	pop	r29
 2ba:	cf 91       	pop	r28
 2bc:	08 95       	ret

000002be <numTX>:

void numTX(uint16_t num){
 2be:	cf 93       	push	r28
 2c0:	df 93       	push	r29
 2c2:	cd b7       	in	r28, 0x3d	; 61
 2c4:	de b7       	in	r29, 0x3e	; 62
 2c6:	ac 97       	sbiw	r28, 0x2c	; 44
 2c8:	0f b6       	in	r0, 0x3f	; 63
 2ca:	f8 94       	cli
 2cc:	de bf       	out	0x3e, r29	; 62
 2ce:	0f be       	out	0x3f, r0	; 63
 2d0:	cd bf       	out	0x3d, r28	; 61
 2d2:	9a a7       	std	Y+42, r25	; 0x2a
 2d4:	89 a7       	std	Y+41, r24	; 0x29
    char c[30] = "";
 2d6:	1b 86       	std	Y+11, r1	; 0x0b
 2d8:	1c 86       	std	Y+12, r1	; 0x0c
 2da:	1d 86       	std	Y+13, r1	; 0x0d
 2dc:	1e 86       	std	Y+14, r1	; 0x0e
 2de:	2a e1       	ldi	r18, 0x1A	; 26
 2e0:	ce 01       	movw	r24, r28
 2e2:	0f 96       	adiw	r24, 0x0f	; 15
 2e4:	fc 01       	movw	r30, r24
 2e6:	32 2f       	mov	r19, r18
 2e8:	11 92       	st	Z+, r1
 2ea:	3a 95       	dec	r19
 2ec:	e9 f7       	brne	.-6      	; 0x2e8 <numTX+0x2a>
    int n = num, len = 0;
 2ee:	89 a5       	ldd	r24, Y+41	; 0x29
 2f0:	9a a5       	ldd	r25, Y+42	; 0x2a
 2f2:	9a 83       	std	Y+2, r25	; 0x02
 2f4:	89 83       	std	Y+1, r24	; 0x01
 2f6:	1c 82       	std	Y+4, r1	; 0x04
 2f8:	1b 82       	std	Y+3, r1	; 0x03
    if (n == 0){
 2fa:	89 81       	ldd	r24, Y+1	; 0x01
 2fc:	9a 81       	ldd	r25, Y+2	; 0x02
 2fe:	89 2b       	or	r24, r25
 300:	21 f4       	brne	.+8      	; 0x30a <numTX+0x4c>
        len = 1;
 302:	81 e0       	ldi	r24, 0x01	; 1
 304:	90 e0       	ldi	r25, 0x00	; 0
 306:	9c 83       	std	Y+4, r25	; 0x04
 308:	8b 83       	std	Y+3, r24	; 0x03
    }
    while (n != 0){
 30a:	0f c0       	rjmp	.+30     	; 0x32a <numTX+0x6c>
        len++;
 30c:	8b 81       	ldd	r24, Y+3	; 0x03
 30e:	9c 81       	ldd	r25, Y+4	; 0x04
 310:	01 96       	adiw	r24, 0x01	; 1
 312:	9c 83       	std	Y+4, r25	; 0x04
 314:	8b 83       	std	Y+3, r24	; 0x03
        n /= 10;
 316:	89 81       	ldd	r24, Y+1	; 0x01
 318:	9a 81       	ldd	r25, Y+2	; 0x02
 31a:	2a e0       	ldi	r18, 0x0A	; 10
 31c:	30 e0       	ldi	r19, 0x00	; 0
 31e:	b9 01       	movw	r22, r18
 320:	0e 94 44 02 	call	0x488	; 0x488 <__divmodhi4>
 324:	cb 01       	movw	r24, r22
 326:	9a 83       	std	Y+2, r25	; 0x02
 328:	89 83       	std	Y+1, r24	; 0x01
    char c[30] = "";
    int n = num, len = 0;
    if (n == 0){
        len = 1;
    }
    while (n != 0){
 32a:	89 81       	ldd	r24, Y+1	; 0x01
 32c:	9a 81       	ldd	r25, Y+2	; 0x02
 32e:	89 2b       	or	r24, r25
 330:	69 f7       	brne	.-38     	; 0x30c <numTX+0x4e>
        len++;
        n /= 10;
    }
    int rem;
    for (int i = 0; i < len; i++){
 332:	1e 82       	std	Y+6, r1	; 0x06
 334:	1d 82       	std	Y+5, r1	; 0x05
 336:	43 c0       	rjmp	.+134    	; 0x3be <numTX+0x100>
        rem = num % 10;
 338:	49 a5       	ldd	r20, Y+41	; 0x29
 33a:	5a a5       	ldd	r21, Y+42	; 0x2a
 33c:	9a 01       	movw	r18, r20
 33e:	ad ec       	ldi	r26, 0xCD	; 205
 340:	bc ec       	ldi	r27, 0xCC	; 204
 342:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <__umulhisi3>
 346:	96 95       	lsr	r25
 348:	87 95       	ror	r24
 34a:	96 95       	lsr	r25
 34c:	87 95       	ror	r24
 34e:	96 95       	lsr	r25
 350:	87 95       	ror	r24
 352:	88 0f       	add	r24, r24
 354:	99 1f       	adc	r25, r25
 356:	9c 01       	movw	r18, r24
 358:	22 0f       	add	r18, r18
 35a:	33 1f       	adc	r19, r19
 35c:	22 0f       	add	r18, r18
 35e:	33 1f       	adc	r19, r19
 360:	82 0f       	add	r24, r18
 362:	93 1f       	adc	r25, r19
 364:	fa 01       	movw	r30, r20
 366:	e8 1b       	sub	r30, r24
 368:	f9 0b       	sbc	r31, r25
 36a:	cf 01       	movw	r24, r30
 36c:	9a 87       	std	Y+10, r25	; 0x0a
 36e:	89 87       	std	Y+9, r24	; 0x09
        num = num / 10;
 370:	89 a5       	ldd	r24, Y+41	; 0x29
 372:	9a a5       	ldd	r25, Y+42	; 0x2a
 374:	9c 01       	movw	r18, r24
 376:	ad ec       	ldi	r26, 0xCD	; 205
 378:	bc ec       	ldi	r27, 0xCC	; 204
 37a:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <__umulhisi3>
 37e:	96 95       	lsr	r25
 380:	87 95       	ror	r24
 382:	96 95       	lsr	r25
 384:	87 95       	ror	r24
 386:	96 95       	lsr	r25
 388:	87 95       	ror	r24
 38a:	9a a7       	std	Y+42, r25	; 0x2a
 38c:	89 a7       	std	Y+41, r24	; 0x29
        c[len - (i + 1)] = rem + '0';
 38e:	8d 81       	ldd	r24, Y+5	; 0x05
 390:	9e 81       	ldd	r25, Y+6	; 0x06
 392:	9c 01       	movw	r18, r24
 394:	20 95       	com	r18
 396:	30 95       	com	r19
 398:	8b 81       	ldd	r24, Y+3	; 0x03
 39a:	9c 81       	ldd	r25, Y+4	; 0x04
 39c:	82 0f       	add	r24, r18
 39e:	93 1f       	adc	r25, r19
 3a0:	29 85       	ldd	r18, Y+9	; 0x09
 3a2:	40 e3       	ldi	r20, 0x30	; 48
 3a4:	42 0f       	add	r20, r18
 3a6:	9e 01       	movw	r18, r28
 3a8:	25 5f       	subi	r18, 0xF5	; 245
 3aa:	3f 4f       	sbci	r19, 0xFF	; 255
 3ac:	82 0f       	add	r24, r18
 3ae:	93 1f       	adc	r25, r19
 3b0:	fc 01       	movw	r30, r24
 3b2:	40 83       	st	Z, r20
    while (n != 0){
        len++;
        n /= 10;
    }
    int rem;
    for (int i = 0; i < len; i++){
 3b4:	8d 81       	ldd	r24, Y+5	; 0x05
 3b6:	9e 81       	ldd	r25, Y+6	; 0x06
 3b8:	01 96       	adiw	r24, 0x01	; 1
 3ba:	9e 83       	std	Y+6, r25	; 0x06
 3bc:	8d 83       	std	Y+5, r24	; 0x05
 3be:	2d 81       	ldd	r18, Y+5	; 0x05
 3c0:	3e 81       	ldd	r19, Y+6	; 0x06
 3c2:	8b 81       	ldd	r24, Y+3	; 0x03
 3c4:	9c 81       	ldd	r25, Y+4	; 0x04
 3c6:	28 17       	cp	r18, r24
 3c8:	39 07       	cpc	r19, r25
 3ca:	0c f4       	brge	.+2      	; 0x3ce <numTX+0x110>
 3cc:	b5 cf       	rjmp	.-150    	; 0x338 <numTX+0x7a>
        rem = num % 10;
        num = num / 10;
        c[len - (i + 1)] = rem + '0';
    }
    for (uint16_t i = 0; i < len; i++){
 3ce:	18 86       	std	Y+8, r1	; 0x08
 3d0:	1f 82       	std	Y+7, r1	; 0x07
 3d2:	10 c0       	rjmp	.+32     	; 0x3f4 <numTX+0x136>
        charTX(c[i]);
 3d4:	9e 01       	movw	r18, r28
 3d6:	25 5f       	subi	r18, 0xF5	; 245
 3d8:	3f 4f       	sbci	r19, 0xFF	; 255
 3da:	8f 81       	ldd	r24, Y+7	; 0x07
 3dc:	98 85       	ldd	r25, Y+8	; 0x08
 3de:	82 0f       	add	r24, r18
 3e0:	93 1f       	adc	r25, r19
 3e2:	fc 01       	movw	r30, r24
 3e4:	80 81       	ld	r24, Z
 3e6:	0e 94 3c 01 	call	0x278	; 0x278 <charTX>
    for (int i = 0; i < len; i++){
        rem = num % 10;
        num = num / 10;
        c[len - (i + 1)] = rem + '0';
    }
    for (uint16_t i = 0; i < len; i++){
 3ea:	8f 81       	ldd	r24, Y+7	; 0x07
 3ec:	98 85       	ldd	r25, Y+8	; 0x08
 3ee:	01 96       	adiw	r24, 0x01	; 1
 3f0:	98 87       	std	Y+8, r25	; 0x08
 3f2:	8f 83       	std	Y+7, r24	; 0x07
 3f4:	2b 81       	ldd	r18, Y+3	; 0x03
 3f6:	3c 81       	ldd	r19, Y+4	; 0x04
 3f8:	8f 81       	ldd	r24, Y+7	; 0x07
 3fa:	98 85       	ldd	r25, Y+8	; 0x08
 3fc:	82 17       	cp	r24, r18
 3fe:	93 07       	cpc	r25, r19
 400:	48 f3       	brcs	.-46     	; 0x3d4 <numTX+0x116>
        charTX(c[i]);
    }
    
}
 402:	ac 96       	adiw	r28, 0x2c	; 44
 404:	0f b6       	in	r0, 0x3f	; 63
 406:	f8 94       	cli
 408:	de bf       	out	0x3e, r29	; 62
 40a:	0f be       	out	0x3f, r0	; 63
 40c:	cd bf       	out	0x3d, r28	; 61
 40e:	df 91       	pop	r29
 410:	cf 91       	pop	r28
 412:	08 95       	ret

00000414 <power>:

uint16_t power(int x, int n){
 414:	cf 93       	push	r28
 416:	df 93       	push	r29
 418:	cd b7       	in	r28, 0x3d	; 61
 41a:	de b7       	in	r29, 0x3e	; 62
 41c:	28 97       	sbiw	r28, 0x08	; 8
 41e:	0f b6       	in	r0, 0x3f	; 63
 420:	f8 94       	cli
 422:	de bf       	out	0x3e, r29	; 62
 424:	0f be       	out	0x3f, r0	; 63
 426:	cd bf       	out	0x3d, r28	; 61
 428:	9e 83       	std	Y+6, r25	; 0x06
 42a:	8d 83       	std	Y+5, r24	; 0x05
 42c:	78 87       	std	Y+8, r23	; 0x08
 42e:	6f 83       	std	Y+7, r22	; 0x07
    uint16_t res = 0;
 430:	1a 82       	std	Y+2, r1	; 0x02
 432:	19 82       	std	Y+1, r1	; 0x01
    if (n == 0){
 434:	8f 81       	ldd	r24, Y+7	; 0x07
 436:	98 85       	ldd	r25, Y+8	; 0x08
 438:	89 2b       	or	r24, r25
 43a:	21 f4       	brne	.+8      	; 0x444 <power+0x30>
        res = 1;
 43c:	81 e0       	ldi	r24, 0x01	; 1
 43e:	90 e0       	ldi	r25, 0x00	; 0
 440:	9a 83       	std	Y+2, r25	; 0x02
 442:	89 83       	std	Y+1, r24	; 0x01
    }
    for (uint16_t i = 0; i < n; i++){
 444:	1c 82       	std	Y+4, r1	; 0x04
 446:	1b 82       	std	Y+3, r1	; 0x03
 448:	0d c0       	rjmp	.+26     	; 0x464 <power+0x50>
        res += x;
 44a:	8d 81       	ldd	r24, Y+5	; 0x05
 44c:	9e 81       	ldd	r25, Y+6	; 0x06
 44e:	29 81       	ldd	r18, Y+1	; 0x01
 450:	3a 81       	ldd	r19, Y+2	; 0x02
 452:	82 0f       	add	r24, r18
 454:	93 1f       	adc	r25, r19
 456:	9a 83       	std	Y+2, r25	; 0x02
 458:	89 83       	std	Y+1, r24	; 0x01
uint16_t power(int x, int n){
    uint16_t res = 0;
    if (n == 0){
        res = 1;
    }
    for (uint16_t i = 0; i < n; i++){
 45a:	8b 81       	ldd	r24, Y+3	; 0x03
 45c:	9c 81       	ldd	r25, Y+4	; 0x04
 45e:	01 96       	adiw	r24, 0x01	; 1
 460:	9c 83       	std	Y+4, r25	; 0x04
 462:	8b 83       	std	Y+3, r24	; 0x03
 464:	2f 81       	ldd	r18, Y+7	; 0x07
 466:	38 85       	ldd	r19, Y+8	; 0x08
 468:	8b 81       	ldd	r24, Y+3	; 0x03
 46a:	9c 81       	ldd	r25, Y+4	; 0x04
 46c:	82 17       	cp	r24, r18
 46e:	93 07       	cpc	r25, r19
 470:	60 f3       	brcs	.-40     	; 0x44a <power+0x36>
        res += x;
    }
    return res;
 472:	89 81       	ldd	r24, Y+1	; 0x01
 474:	9a 81       	ldd	r25, Y+2	; 0x02
}
 476:	28 96       	adiw	r28, 0x08	; 8
 478:	0f b6       	in	r0, 0x3f	; 63
 47a:	f8 94       	cli
 47c:	de bf       	out	0x3e, r29	; 62
 47e:	0f be       	out	0x3f, r0	; 63
 480:	cd bf       	out	0x3d, r28	; 61
 482:	df 91       	pop	r29
 484:	cf 91       	pop	r28
 486:	08 95       	ret

00000488 <__divmodhi4>:
 488:	97 fb       	bst	r25, 7
 48a:	07 2e       	mov	r0, r23
 48c:	16 f4       	brtc	.+4      	; 0x492 <__divmodhi4+0xa>
 48e:	00 94       	com	r0
 490:	07 d0       	rcall	.+14     	; 0x4a0 <__divmodhi4_neg1>
 492:	77 fd       	sbrc	r23, 7
 494:	09 d0       	rcall	.+18     	; 0x4a8 <__divmodhi4_neg2>
 496:	0e 94 89 02 	call	0x512	; 0x512 <__udivmodhi4>
 49a:	07 fc       	sbrc	r0, 7
 49c:	05 d0       	rcall	.+10     	; 0x4a8 <__divmodhi4_neg2>
 49e:	3e f4       	brtc	.+14     	; 0x4ae <__divmodhi4_exit>

000004a0 <__divmodhi4_neg1>:
 4a0:	90 95       	com	r25
 4a2:	81 95       	neg	r24
 4a4:	9f 4f       	sbci	r25, 0xFF	; 255
 4a6:	08 95       	ret

000004a8 <__divmodhi4_neg2>:
 4a8:	70 95       	com	r23
 4aa:	61 95       	neg	r22
 4ac:	7f 4f       	sbci	r23, 0xFF	; 255

000004ae <__divmodhi4_exit>:
 4ae:	08 95       	ret

000004b0 <__udivmodsi4>:
 4b0:	a1 e2       	ldi	r26, 0x21	; 33
 4b2:	1a 2e       	mov	r1, r26
 4b4:	aa 1b       	sub	r26, r26
 4b6:	bb 1b       	sub	r27, r27
 4b8:	fd 01       	movw	r30, r26
 4ba:	0d c0       	rjmp	.+26     	; 0x4d6 <__udivmodsi4_ep>

000004bc <__udivmodsi4_loop>:
 4bc:	aa 1f       	adc	r26, r26
 4be:	bb 1f       	adc	r27, r27
 4c0:	ee 1f       	adc	r30, r30
 4c2:	ff 1f       	adc	r31, r31
 4c4:	a2 17       	cp	r26, r18
 4c6:	b3 07       	cpc	r27, r19
 4c8:	e4 07       	cpc	r30, r20
 4ca:	f5 07       	cpc	r31, r21
 4cc:	20 f0       	brcs	.+8      	; 0x4d6 <__udivmodsi4_ep>
 4ce:	a2 1b       	sub	r26, r18
 4d0:	b3 0b       	sbc	r27, r19
 4d2:	e4 0b       	sbc	r30, r20
 4d4:	f5 0b       	sbc	r31, r21

000004d6 <__udivmodsi4_ep>:
 4d6:	66 1f       	adc	r22, r22
 4d8:	77 1f       	adc	r23, r23
 4da:	88 1f       	adc	r24, r24
 4dc:	99 1f       	adc	r25, r25
 4de:	1a 94       	dec	r1
 4e0:	69 f7       	brne	.-38     	; 0x4bc <__udivmodsi4_loop>
 4e2:	60 95       	com	r22
 4e4:	70 95       	com	r23
 4e6:	80 95       	com	r24
 4e8:	90 95       	com	r25
 4ea:	9b 01       	movw	r18, r22
 4ec:	ac 01       	movw	r20, r24
 4ee:	bd 01       	movw	r22, r26
 4f0:	cf 01       	movw	r24, r30
 4f2:	08 95       	ret

000004f4 <__umulhisi3>:
 4f4:	a2 9f       	mul	r26, r18
 4f6:	b0 01       	movw	r22, r0
 4f8:	b3 9f       	mul	r27, r19
 4fa:	c0 01       	movw	r24, r0
 4fc:	a3 9f       	mul	r26, r19
 4fe:	70 0d       	add	r23, r0
 500:	81 1d       	adc	r24, r1
 502:	11 24       	eor	r1, r1
 504:	91 1d       	adc	r25, r1
 506:	b2 9f       	mul	r27, r18
 508:	70 0d       	add	r23, r0
 50a:	81 1d       	adc	r24, r1
 50c:	11 24       	eor	r1, r1
 50e:	91 1d       	adc	r25, r1
 510:	08 95       	ret

00000512 <__udivmodhi4>:
 512:	aa 1b       	sub	r26, r26
 514:	bb 1b       	sub	r27, r27
 516:	51 e1       	ldi	r21, 0x11	; 17
 518:	07 c0       	rjmp	.+14     	; 0x528 <__udivmodhi4_ep>

0000051a <__udivmodhi4_loop>:
 51a:	aa 1f       	adc	r26, r26
 51c:	bb 1f       	adc	r27, r27
 51e:	a6 17       	cp	r26, r22
 520:	b7 07       	cpc	r27, r23
 522:	10 f0       	brcs	.+4      	; 0x528 <__udivmodhi4_ep>
 524:	a6 1b       	sub	r26, r22
 526:	b7 0b       	sbc	r27, r23

00000528 <__udivmodhi4_ep>:
 528:	88 1f       	adc	r24, r24
 52a:	99 1f       	adc	r25, r25
 52c:	5a 95       	dec	r21
 52e:	a9 f7       	brne	.-22     	; 0x51a <__udivmodhi4_loop>
 530:	80 95       	com	r24
 532:	90 95       	com	r25
 534:	bc 01       	movw	r22, r24
 536:	cd 01       	movw	r24, r26
 538:	08 95       	ret

0000053a <_exit>:
 53a:	f8 94       	cli

0000053c <__stop_program>:
 53c:	ff cf       	rjmp	.-2      	; 0x53c <__stop_program>
