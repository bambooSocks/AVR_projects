
rotEncoder2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000003ca  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000356  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000012  00800100  00800100  000003ca  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000003ca  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000003fc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000c0  00000000  00000000  0000043c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000afd  00000000  00000000  000004fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000077e  00000000  00000000  00000ff9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000758  00000000  00000000  00001777  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000338  00000000  00000000  00001ed0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000041b  00000000  00000000  00002208  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000006e0  00000000  00000000  00002623  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a0  00000000  00000000  00002d03  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 77 00 	jmp	0xee	; 0xee <__vector_1>
   8:	0c 94 b2 00 	jmp	0x164	; 0x164 <__vector_2>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 ed 00 	jmp	0x1da	; 0x1da <__vector_14>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a2 31       	cpi	r26, 0x12	; 18
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 48 00 	call	0x90	; 0x90 <main>
  88:	0c 94 a9 01 	jmp	0x352	; 0x352 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <main>:
#include <avr/io.h>
#include <avr/interrupt.h>
#include "omniLib.h"

int main(void)
{
  90:	cf 93       	push	r28
  92:	df 93       	push	r29
  94:	cd b7       	in	r28, 0x3d	; 61
  96:	de b7       	in	r29, 0x3e	; 62
    DDRD &= ~(1 << DDD2) & ~(1 << DDD3);
  98:	8a e2       	ldi	r24, 0x2A	; 42
  9a:	90 e0       	ldi	r25, 0x00	; 0
  9c:	2a e2       	ldi	r18, 0x2A	; 42
  9e:	30 e0       	ldi	r19, 0x00	; 0
  a0:	f9 01       	movw	r30, r18
  a2:	20 81       	ld	r18, Z
  a4:	23 7f       	andi	r18, 0xF3	; 243
  a6:	fc 01       	movw	r30, r24
  a8:	20 83       	st	Z, r18
    PORTD |= (1 << PORTD2) | (1 << PORTD3); 
  aa:	8b e2       	ldi	r24, 0x2B	; 43
  ac:	90 e0       	ldi	r25, 0x00	; 0
  ae:	2b e2       	ldi	r18, 0x2B	; 43
  b0:	30 e0       	ldi	r19, 0x00	; 0
  b2:	f9 01       	movw	r30, r18
  b4:	20 81       	ld	r18, Z
  b6:	2c 60       	ori	r18, 0x0C	; 12
  b8:	fc 01       	movw	r30, r24
  ba:	20 83       	st	Z, r18
    EICRA |= (1 << ISC11) /*| (1 << ISC10)*/ | (1 << ISC01);
  bc:	89 e6       	ldi	r24, 0x69	; 105
  be:	90 e0       	ldi	r25, 0x00	; 0
  c0:	29 e6       	ldi	r18, 0x69	; 105
  c2:	30 e0       	ldi	r19, 0x00	; 0
  c4:	f9 01       	movw	r30, r18
  c6:	20 81       	ld	r18, Z
  c8:	2a 60       	ori	r18, 0x0A	; 10
  ca:	fc 01       	movw	r30, r24
  cc:	20 83       	st	Z, r18
    EIMSK |= (1 << INT1) | (1 << INT0);
  ce:	8d e3       	ldi	r24, 0x3D	; 61
  d0:	90 e0       	ldi	r25, 0x00	; 0
  d2:	2d e3       	ldi	r18, 0x3D	; 61
  d4:	30 e0       	ldi	r19, 0x00	; 0
  d6:	f9 01       	movw	r30, r18
  d8:	20 81       	ld	r18, Z
  da:	23 60       	ori	r18, 0x03	; 3
  dc:	fc 01       	movw	r30, r24
  de:	20 83       	st	Z, r18
    sei();
  e0:	78 94       	sei
    initUART(9600,1);
  e2:	61 e0       	ldi	r22, 0x01	; 1
  e4:	80 e8       	ldi	r24, 0x80	; 128
  e6:	95 e2       	ldi	r25, 0x25	; 37
  e8:	0e 94 0c 01 	call	0x218	; 0x218 <initUART>
    while (1) 
    {
        
    }
  ec:	ff cf       	rjmp	.-2      	; 0xec <main+0x5c>

000000ee <__vector_1>:
}

ISR(INT0_vect )
{
  ee:	1f 92       	push	r1
  f0:	0f 92       	push	r0
  f2:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
  f6:	0f 92       	push	r0
  f8:	11 24       	eor	r1, r1
  fa:	2f 93       	push	r18
  fc:	3f 93       	push	r19
  fe:	4f 93       	push	r20
 100:	5f 93       	push	r21
 102:	6f 93       	push	r22
 104:	7f 93       	push	r23
 106:	8f 93       	push	r24
 108:	9f 93       	push	r25
 10a:	af 93       	push	r26
 10c:	bf 93       	push	r27
 10e:	ef 93       	push	r30
 110:	ff 93       	push	r31
 112:	cf 93       	push	r28
 114:	df 93       	push	r29
 116:	cd b7       	in	r28, 0x3d	; 61
 118:	de b7       	in	r29, 0x3e	; 62
    if((PIND & PIND3) != 0)
 11a:	89 e2       	ldi	r24, 0x29	; 41
 11c:	90 e0       	ldi	r25, 0x00	; 0
 11e:	fc 01       	movw	r30, r24
 120:	80 81       	ld	r24, Z
 122:	88 2f       	mov	r24, r24
 124:	90 e0       	ldi	r25, 0x00	; 0
 126:	83 70       	andi	r24, 0x03	; 3
 128:	99 27       	eor	r25, r25
 12a:	89 2b       	or	r24, r25
 12c:	21 f0       	breq	.+8      	; 0x136 <__vector_1+0x48>
    {
        charTX('+');
 12e:	8b e2       	ldi	r24, 0x2B	; 43
 130:	0e 94 64 01 	call	0x2c8	; 0x2c8 <charTX>
 134:	03 c0       	rjmp	.+6      	; 0x13c <__vector_1+0x4e>
    }else{
        charTX('-');
 136:	8d e2       	ldi	r24, 0x2D	; 45
 138:	0e 94 64 01 	call	0x2c8	; 0x2c8 <charTX>
    }
}
 13c:	df 91       	pop	r29
 13e:	cf 91       	pop	r28
 140:	ff 91       	pop	r31
 142:	ef 91       	pop	r30
 144:	bf 91       	pop	r27
 146:	af 91       	pop	r26
 148:	9f 91       	pop	r25
 14a:	8f 91       	pop	r24
 14c:	7f 91       	pop	r23
 14e:	6f 91       	pop	r22
 150:	5f 91       	pop	r21
 152:	4f 91       	pop	r20
 154:	3f 91       	pop	r19
 156:	2f 91       	pop	r18
 158:	0f 90       	pop	r0
 15a:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 15e:	0f 90       	pop	r0
 160:	1f 90       	pop	r1
 162:	18 95       	reti

00000164 <__vector_2>:

ISR(INT1_vect)
{
 164:	1f 92       	push	r1
 166:	0f 92       	push	r0
 168:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 16c:	0f 92       	push	r0
 16e:	11 24       	eor	r1, r1
 170:	2f 93       	push	r18
 172:	3f 93       	push	r19
 174:	4f 93       	push	r20
 176:	5f 93       	push	r21
 178:	6f 93       	push	r22
 17a:	7f 93       	push	r23
 17c:	8f 93       	push	r24
 17e:	9f 93       	push	r25
 180:	af 93       	push	r26
 182:	bf 93       	push	r27
 184:	ef 93       	push	r30
 186:	ff 93       	push	r31
 188:	cf 93       	push	r28
 18a:	df 93       	push	r29
 18c:	cd b7       	in	r28, 0x3d	; 61
 18e:	de b7       	in	r29, 0x3e	; 62
    if((PIND & PIND2) != 0)
 190:	89 e2       	ldi	r24, 0x29	; 41
 192:	90 e0       	ldi	r25, 0x00	; 0
 194:	fc 01       	movw	r30, r24
 196:	80 81       	ld	r24, Z
 198:	88 2f       	mov	r24, r24
 19a:	90 e0       	ldi	r25, 0x00	; 0
 19c:	82 70       	andi	r24, 0x02	; 2
 19e:	99 27       	eor	r25, r25
 1a0:	89 2b       	or	r24, r25
 1a2:	21 f0       	breq	.+8      	; 0x1ac <__vector_2+0x48>
    {
        charTX('+');
 1a4:	8b e2       	ldi	r24, 0x2B	; 43
 1a6:	0e 94 64 01 	call	0x2c8	; 0x2c8 <charTX>
 1aa:	03 c0       	rjmp	.+6      	; 0x1b2 <__vector_2+0x4e>
    }else{
        charTX('-');
 1ac:	8d e2       	ldi	r24, 0x2D	; 45
 1ae:	0e 94 64 01 	call	0x2c8	; 0x2c8 <charTX>
    }
}
 1b2:	df 91       	pop	r29
 1b4:	cf 91       	pop	r28
 1b6:	ff 91       	pop	r31
 1b8:	ef 91       	pop	r30
 1ba:	bf 91       	pop	r27
 1bc:	af 91       	pop	r26
 1be:	9f 91       	pop	r25
 1c0:	8f 91       	pop	r24
 1c2:	7f 91       	pop	r23
 1c4:	6f 91       	pop	r22
 1c6:	5f 91       	pop	r21
 1c8:	4f 91       	pop	r20
 1ca:	3f 91       	pop	r19
 1cc:	2f 91       	pop	r18
 1ce:	0f 90       	pop	r0
 1d0:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 1d4:	0f 90       	pop	r0
 1d6:	1f 90       	pop	r1
 1d8:	18 95       	reti

000001da <__vector_14>:
}

void delayF(uint32_t ms){
    uint32_t i = ms *471;
    while(--i>0);
}
 1da:	1f 92       	push	r1
 1dc:	0f 92       	push	r0
 1de:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 1e2:	0f 92       	push	r0
 1e4:	11 24       	eor	r1, r1
 1e6:	8f 93       	push	r24
 1e8:	9f 93       	push	r25
 1ea:	cf 93       	push	r28
 1ec:	df 93       	push	r29
 1ee:	cd b7       	in	r28, 0x3d	; 61
 1f0:	de b7       	in	r29, 0x3e	; 62
 1f2:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <delayCount>
 1f6:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <delayCount+0x1>
 1fa:	01 96       	adiw	r24, 0x01	; 1
 1fc:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <delayCount+0x1>
 200:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <delayCount>
 204:	df 91       	pop	r29
 206:	cf 91       	pop	r28
 208:	9f 91       	pop	r25
 20a:	8f 91       	pop	r24
 20c:	0f 90       	pop	r0
 20e:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 212:	0f 90       	pop	r0
 214:	1f 90       	pop	r1
 216:	18 95       	reti

00000218 <initUART>:


void initUART(uint16_t baud, uint8_t stopBits){
 218:	0f 93       	push	r16
 21a:	1f 93       	push	r17
 21c:	cf 93       	push	r28
 21e:	df 93       	push	r29
 220:	cd b7       	in	r28, 0x3d	; 61
 222:	de b7       	in	r29, 0x3e	; 62
 224:	27 97       	sbiw	r28, 0x07	; 7
 226:	0f b6       	in	r0, 0x3f	; 63
 228:	f8 94       	cli
 22a:	de bf       	out	0x3e, r29	; 62
 22c:	0f be       	out	0x3f, r0	; 63
 22e:	cd bf       	out	0x3d, r28	; 61
 230:	9a 83       	std	Y+2, r25	; 0x02
 232:	89 83       	std	Y+1, r24	; 0x01
 234:	6b 83       	std	Y+3, r22	; 0x03
    UBRR0 = ((((F_CPU / 16) + (baud / 2)) / baud) - 1); // setting baud rate to entered value
 236:	04 ec       	ldi	r16, 0xC4	; 196
 238:	10 e0       	ldi	r17, 0x00	; 0
 23a:	89 81       	ldd	r24, Y+1	; 0x01
 23c:	9a 81       	ldd	r25, Y+2	; 0x02
 23e:	96 95       	lsr	r25
 240:	87 95       	ror	r24
 242:	cc 01       	movw	r24, r24
 244:	a0 e0       	ldi	r26, 0x00	; 0
 246:	b0 e0       	ldi	r27, 0x00	; 0
 248:	80 5c       	subi	r24, 0xC0	; 192
 24a:	9d 4b       	sbci	r25, 0xBD	; 189
 24c:	a0 4f       	sbci	r26, 0xF0	; 240
 24e:	bf 4f       	sbci	r27, 0xFF	; 255
 250:	29 81       	ldd	r18, Y+1	; 0x01
 252:	3a 81       	ldd	r19, Y+2	; 0x02
 254:	99 01       	movw	r18, r18
 256:	40 e0       	ldi	r20, 0x00	; 0
 258:	50 e0       	ldi	r21, 0x00	; 0
 25a:	bc 01       	movw	r22, r24
 25c:	cd 01       	movw	r24, r26
 25e:	0e 94 87 01 	call	0x30e	; 0x30e <__udivmodsi4>
 262:	da 01       	movw	r26, r20
 264:	c9 01       	movw	r24, r18
 266:	01 97       	sbiw	r24, 0x01	; 1
 268:	f8 01       	movw	r30, r16
 26a:	91 83       	std	Z+1, r25	; 0x01
 26c:	80 83       	st	Z, r24
    UCSR0B |= (1 << TXEN0) | (1 << RXEN0); // enabling Transmit and Receive
 26e:	81 ec       	ldi	r24, 0xC1	; 193
 270:	90 e0       	ldi	r25, 0x00	; 0
 272:	21 ec       	ldi	r18, 0xC1	; 193
 274:	30 e0       	ldi	r19, 0x00	; 0
 276:	f9 01       	movw	r30, r18
 278:	20 81       	ld	r18, Z
 27a:	28 61       	ori	r18, 0x18	; 24
 27c:	fc 01       	movw	r30, r24
 27e:	20 83       	st	Z, r18
    if (stopBits == 1){
 280:	8b 81       	ldd	r24, Y+3	; 0x03
 282:	81 30       	cpi	r24, 0x01	; 1
 284:	51 f4       	brne	.+20     	; 0x29a <initUART+0x82>
        UCSR0C &= ~(1 << USBS0); // setting stop bits to 1
 286:	82 ec       	ldi	r24, 0xC2	; 194
 288:	90 e0       	ldi	r25, 0x00	; 0
 28a:	22 ec       	ldi	r18, 0xC2	; 194
 28c:	30 e0       	ldi	r19, 0x00	; 0
 28e:	f9 01       	movw	r30, r18
 290:	20 81       	ld	r18, Z
 292:	27 7f       	andi	r18, 0xF7	; 247
 294:	fc 01       	movw	r30, r24
 296:	20 83       	st	Z, r18
 298:	0c c0       	rjmp	.+24     	; 0x2b2 <initUART+0x9a>
    } else if(stopBits == 2){
 29a:	8b 81       	ldd	r24, Y+3	; 0x03
 29c:	82 30       	cpi	r24, 0x02	; 2
 29e:	49 f4       	brne	.+18     	; 0x2b2 <initUART+0x9a>
        UCSR0C |= (1 << USBS0); // setting stop bits to 2
 2a0:	82 ec       	ldi	r24, 0xC2	; 194
 2a2:	90 e0       	ldi	r25, 0x00	; 0
 2a4:	22 ec       	ldi	r18, 0xC2	; 194
 2a6:	30 e0       	ldi	r19, 0x00	; 0
 2a8:	f9 01       	movw	r30, r18
 2aa:	20 81       	ld	r18, Z
 2ac:	28 60       	ori	r18, 0x08	; 8
 2ae:	fc 01       	movw	r30, r24
 2b0:	20 83       	st	Z, r18
    }
}
 2b2:	27 96       	adiw	r28, 0x07	; 7
 2b4:	0f b6       	in	r0, 0x3f	; 63
 2b6:	f8 94       	cli
 2b8:	de bf       	out	0x3e, r29	; 62
 2ba:	0f be       	out	0x3f, r0	; 63
 2bc:	cd bf       	out	0x3d, r28	; 61
 2be:	df 91       	pop	r29
 2c0:	cf 91       	pop	r28
 2c2:	1f 91       	pop	r17
 2c4:	0f 91       	pop	r16
 2c6:	08 95       	ret

000002c8 <charTX>:

void charTX(unsigned char c){
 2c8:	cf 93       	push	r28
 2ca:	df 93       	push	r29
 2cc:	1f 92       	push	r1
 2ce:	cd b7       	in	r28, 0x3d	; 61
 2d0:	de b7       	in	r29, 0x3e	; 62
 2d2:	89 83       	std	Y+1, r24	; 0x01
    //while ((UCSR0A & (1 << UDRE0)) == 0);
    UDR0 = c; // send new char to buffer
 2d4:	86 ec       	ldi	r24, 0xC6	; 198
 2d6:	90 e0       	ldi	r25, 0x00	; 0
 2d8:	29 81       	ldd	r18, Y+1	; 0x01
 2da:	fc 01       	movw	r30, r24
 2dc:	20 83       	st	Z, r18
    while ((UCSR0A & (1 << TXC0)) == 0);
 2de:	00 00       	nop
 2e0:	80 ec       	ldi	r24, 0xC0	; 192
 2e2:	90 e0       	ldi	r25, 0x00	; 0
 2e4:	fc 01       	movw	r30, r24
 2e6:	80 81       	ld	r24, Z
 2e8:	88 2f       	mov	r24, r24
 2ea:	90 e0       	ldi	r25, 0x00	; 0
 2ec:	80 74       	andi	r24, 0x40	; 64
 2ee:	99 27       	eor	r25, r25
 2f0:	89 2b       	or	r24, r25
 2f2:	b1 f3       	breq	.-20     	; 0x2e0 <charTX+0x18>
    UCSR0A |= (1 << TXC0);
 2f4:	80 ec       	ldi	r24, 0xC0	; 192
 2f6:	90 e0       	ldi	r25, 0x00	; 0
 2f8:	20 ec       	ldi	r18, 0xC0	; 192
 2fa:	30 e0       	ldi	r19, 0x00	; 0
 2fc:	f9 01       	movw	r30, r18
 2fe:	20 81       	ld	r18, Z
 300:	20 64       	ori	r18, 0x40	; 64
 302:	fc 01       	movw	r30, r24
 304:	20 83       	st	Z, r18
}
 306:	0f 90       	pop	r0
 308:	df 91       	pop	r29
 30a:	cf 91       	pop	r28
 30c:	08 95       	ret

0000030e <__udivmodsi4>:
 30e:	a1 e2       	ldi	r26, 0x21	; 33
 310:	1a 2e       	mov	r1, r26
 312:	aa 1b       	sub	r26, r26
 314:	bb 1b       	sub	r27, r27
 316:	fd 01       	movw	r30, r26
 318:	0d c0       	rjmp	.+26     	; 0x334 <__udivmodsi4_ep>

0000031a <__udivmodsi4_loop>:
 31a:	aa 1f       	adc	r26, r26
 31c:	bb 1f       	adc	r27, r27
 31e:	ee 1f       	adc	r30, r30
 320:	ff 1f       	adc	r31, r31
 322:	a2 17       	cp	r26, r18
 324:	b3 07       	cpc	r27, r19
 326:	e4 07       	cpc	r30, r20
 328:	f5 07       	cpc	r31, r21
 32a:	20 f0       	brcs	.+8      	; 0x334 <__udivmodsi4_ep>
 32c:	a2 1b       	sub	r26, r18
 32e:	b3 0b       	sbc	r27, r19
 330:	e4 0b       	sbc	r30, r20
 332:	f5 0b       	sbc	r31, r21

00000334 <__udivmodsi4_ep>:
 334:	66 1f       	adc	r22, r22
 336:	77 1f       	adc	r23, r23
 338:	88 1f       	adc	r24, r24
 33a:	99 1f       	adc	r25, r25
 33c:	1a 94       	dec	r1
 33e:	69 f7       	brne	.-38     	; 0x31a <__udivmodsi4_loop>
 340:	60 95       	com	r22
 342:	70 95       	com	r23
 344:	80 95       	com	r24
 346:	90 95       	com	r25
 348:	9b 01       	movw	r18, r22
 34a:	ac 01       	movw	r20, r24
 34c:	bd 01       	movw	r22, r26
 34e:	cf 01       	movw	r24, r30
 350:	08 95       	ret

00000352 <_exit>:
 352:	f8 94       	cli

00000354 <__stop_program>:
 354:	ff cf       	rjmp	.-2      	; 0x354 <__stop_program>
