
rotEncoder2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000368  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002f4  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000012  00800100  00800100  00000368  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000368  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000398  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000b8  00000000  00000000  000003d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000ae7  00000000  00000000  00000490  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000077e  00000000  00000000  00000f77  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000736  00000000  00000000  000016f5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002d4  00000000  00000000  00001e2c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000410  00000000  00000000  00002100  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000005ef  00000000  00000000  00002510  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000098  00000000  00000000  00002aff  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 77 00 	jmp	0xee	; 0xee <__vector_4>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 bc 00 	jmp	0x178	; 0x178 <__vector_14>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a2 31       	cpi	r26, 0x12	; 18
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 48 00 	call	0x90	; 0x90 <main>
  88:	0c 94 78 01 	jmp	0x2f0	; 0x2f0 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <main>:
#include <avr/io.h>
#include <avr/interrupt.h>
#include "omniLib.h"

int main(void)
{
  90:	cf 93       	push	r28
  92:	df 93       	push	r29
  94:	cd b7       	in	r28, 0x3d	; 61
  96:	de b7       	in	r29, 0x3e	; 62
    DDRB |= (1 << DDB5);
  98:	84 e2       	ldi	r24, 0x24	; 36
  9a:	90 e0       	ldi	r25, 0x00	; 0
  9c:	24 e2       	ldi	r18, 0x24	; 36
  9e:	30 e0       	ldi	r19, 0x00	; 0
  a0:	f9 01       	movw	r30, r18
  a2:	20 81       	ld	r18, Z
  a4:	20 62       	ori	r18, 0x20	; 32
  a6:	fc 01       	movw	r30, r24
  a8:	20 83       	st	Z, r18
    DDRC &= ~(1 << DDC0) & ~(1 << DDC1);
  aa:	87 e2       	ldi	r24, 0x27	; 39
  ac:	90 e0       	ldi	r25, 0x00	; 0
  ae:	27 e2       	ldi	r18, 0x27	; 39
  b0:	30 e0       	ldi	r19, 0x00	; 0
  b2:	f9 01       	movw	r30, r18
  b4:	20 81       	ld	r18, Z
  b6:	2c 7f       	andi	r18, 0xFC	; 252
  b8:	fc 01       	movw	r30, r24
  ba:	20 83       	st	Z, r18
    PCICR |= (1 << PCIE1);
  bc:	88 e6       	ldi	r24, 0x68	; 104
  be:	90 e0       	ldi	r25, 0x00	; 0
  c0:	28 e6       	ldi	r18, 0x68	; 104
  c2:	30 e0       	ldi	r19, 0x00	; 0
  c4:	f9 01       	movw	r30, r18
  c6:	20 81       	ld	r18, Z
  c8:	22 60       	ori	r18, 0x02	; 2
  ca:	fc 01       	movw	r30, r24
  cc:	20 83       	st	Z, r18
    PCMSK1 |= (1 << PCINT8);
  ce:	8c e6       	ldi	r24, 0x6C	; 108
  d0:	90 e0       	ldi	r25, 0x00	; 0
  d2:	2c e6       	ldi	r18, 0x6C	; 108
  d4:	30 e0       	ldi	r19, 0x00	; 0
  d6:	f9 01       	movw	r30, r18
  d8:	20 81       	ld	r18, Z
  da:	21 60       	ori	r18, 0x01	; 1
  dc:	fc 01       	movw	r30, r24
  de:	20 83       	st	Z, r18
    initUART(9600,1);
  e0:	61 e0       	ldi	r22, 0x01	; 1
  e2:	80 e8       	ldi	r24, 0x80	; 128
  e4:	95 e2       	ldi	r25, 0x25	; 37
  e6:	0e 94 db 00 	call	0x1b6	; 0x1b6 <initUART>
    sei();
  ea:	78 94       	sei
    while (1) 
    {
        
    }
  ec:	ff cf       	rjmp	.-2      	; 0xec <main+0x5c>

000000ee <__vector_4>:
}

ISR(PCINT1_vect)
{
  ee:	1f 92       	push	r1
  f0:	0f 92       	push	r0
  f2:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
  f6:	0f 92       	push	r0
  f8:	11 24       	eor	r1, r1
  fa:	2f 93       	push	r18
  fc:	3f 93       	push	r19
  fe:	4f 93       	push	r20
 100:	5f 93       	push	r21
 102:	6f 93       	push	r22
 104:	7f 93       	push	r23
 106:	8f 93       	push	r24
 108:	9f 93       	push	r25
 10a:	af 93       	push	r26
 10c:	bf 93       	push	r27
 10e:	ef 93       	push	r30
 110:	ff 93       	push	r31
 112:	cf 93       	push	r28
 114:	df 93       	push	r29
 116:	cd b7       	in	r28, 0x3d	; 61
 118:	de b7       	in	r29, 0x3e	; 62
    if((PINC & (1 << PINC0)) == 0){
 11a:	86 e2       	ldi	r24, 0x26	; 38
 11c:	90 e0       	ldi	r25, 0x00	; 0
 11e:	fc 01       	movw	r30, r24
 120:	80 81       	ld	r24, Z
 122:	88 2f       	mov	r24, r24
 124:	90 e0       	ldi	r25, 0x00	; 0
 126:	81 70       	andi	r24, 0x01	; 1
 128:	99 27       	eor	r25, r25
 12a:	89 2b       	or	r24, r25
 12c:	89 f4       	brne	.+34     	; 0x150 <__vector_4+0x62>
        if (PINC & (1 << PINC1)){ //CW    
 12e:	86 e2       	ldi	r24, 0x26	; 38
 130:	90 e0       	ldi	r25, 0x00	; 0
 132:	fc 01       	movw	r30, r24
 134:	80 81       	ld	r24, Z
 136:	88 2f       	mov	r24, r24
 138:	90 e0       	ldi	r25, 0x00	; 0
 13a:	82 70       	andi	r24, 0x02	; 2
 13c:	99 27       	eor	r25, r25
 13e:	89 2b       	or	r24, r25
 140:	21 f0       	breq	.+8      	; 0x14a <__vector_4+0x5c>
            charTX('-');
 142:	8d e2       	ldi	r24, 0x2D	; 45
 144:	0e 94 33 01 	call	0x266	; 0x266 <charTX>
 148:	03 c0       	rjmp	.+6      	; 0x150 <__vector_4+0x62>
        } else { //CCW
            charTX('+');
 14a:	8b e2       	ldi	r24, 0x2B	; 43
 14c:	0e 94 33 01 	call	0x266	; 0x266 <charTX>
        }
    }
}
 150:	df 91       	pop	r29
 152:	cf 91       	pop	r28
 154:	ff 91       	pop	r31
 156:	ef 91       	pop	r30
 158:	bf 91       	pop	r27
 15a:	af 91       	pop	r26
 15c:	9f 91       	pop	r25
 15e:	8f 91       	pop	r24
 160:	7f 91       	pop	r23
 162:	6f 91       	pop	r22
 164:	5f 91       	pop	r21
 166:	4f 91       	pop	r20
 168:	3f 91       	pop	r19
 16a:	2f 91       	pop	r18
 16c:	0f 90       	pop	r0
 16e:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 172:	0f 90       	pop	r0
 174:	1f 90       	pop	r1
 176:	18 95       	reti

00000178 <__vector_14>:
}

void delayF(uint32_t ms){
    uint32_t i = ms *471;
    while(--i>0);
}
 178:	1f 92       	push	r1
 17a:	0f 92       	push	r0
 17c:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 180:	0f 92       	push	r0
 182:	11 24       	eor	r1, r1
 184:	8f 93       	push	r24
 186:	9f 93       	push	r25
 188:	cf 93       	push	r28
 18a:	df 93       	push	r29
 18c:	cd b7       	in	r28, 0x3d	; 61
 18e:	de b7       	in	r29, 0x3e	; 62
 190:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <delayCount>
 194:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <delayCount+0x1>
 198:	01 96       	adiw	r24, 0x01	; 1
 19a:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <delayCount+0x1>
 19e:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <delayCount>
 1a2:	df 91       	pop	r29
 1a4:	cf 91       	pop	r28
 1a6:	9f 91       	pop	r25
 1a8:	8f 91       	pop	r24
 1aa:	0f 90       	pop	r0
 1ac:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 1b0:	0f 90       	pop	r0
 1b2:	1f 90       	pop	r1
 1b4:	18 95       	reti

000001b6 <initUART>:


void initUART(uint16_t baud, uint8_t stopBits){
 1b6:	0f 93       	push	r16
 1b8:	1f 93       	push	r17
 1ba:	cf 93       	push	r28
 1bc:	df 93       	push	r29
 1be:	cd b7       	in	r28, 0x3d	; 61
 1c0:	de b7       	in	r29, 0x3e	; 62
 1c2:	27 97       	sbiw	r28, 0x07	; 7
 1c4:	0f b6       	in	r0, 0x3f	; 63
 1c6:	f8 94       	cli
 1c8:	de bf       	out	0x3e, r29	; 62
 1ca:	0f be       	out	0x3f, r0	; 63
 1cc:	cd bf       	out	0x3d, r28	; 61
 1ce:	9a 83       	std	Y+2, r25	; 0x02
 1d0:	89 83       	std	Y+1, r24	; 0x01
 1d2:	6b 83       	std	Y+3, r22	; 0x03
    UBRR0 = ((((F_CPU / 16) + (baud / 2)) / baud) - 1); // setting baud rate to entered value
 1d4:	04 ec       	ldi	r16, 0xC4	; 196
 1d6:	10 e0       	ldi	r17, 0x00	; 0
 1d8:	89 81       	ldd	r24, Y+1	; 0x01
 1da:	9a 81       	ldd	r25, Y+2	; 0x02
 1dc:	96 95       	lsr	r25
 1de:	87 95       	ror	r24
 1e0:	cc 01       	movw	r24, r24
 1e2:	a0 e0       	ldi	r26, 0x00	; 0
 1e4:	b0 e0       	ldi	r27, 0x00	; 0
 1e6:	80 5c       	subi	r24, 0xC0	; 192
 1e8:	9d 4b       	sbci	r25, 0xBD	; 189
 1ea:	a0 4f       	sbci	r26, 0xF0	; 240
 1ec:	bf 4f       	sbci	r27, 0xFF	; 255
 1ee:	29 81       	ldd	r18, Y+1	; 0x01
 1f0:	3a 81       	ldd	r19, Y+2	; 0x02
 1f2:	99 01       	movw	r18, r18
 1f4:	40 e0       	ldi	r20, 0x00	; 0
 1f6:	50 e0       	ldi	r21, 0x00	; 0
 1f8:	bc 01       	movw	r22, r24
 1fa:	cd 01       	movw	r24, r26
 1fc:	0e 94 56 01 	call	0x2ac	; 0x2ac <__udivmodsi4>
 200:	da 01       	movw	r26, r20
 202:	c9 01       	movw	r24, r18
 204:	01 97       	sbiw	r24, 0x01	; 1
 206:	f8 01       	movw	r30, r16
 208:	91 83       	std	Z+1, r25	; 0x01
 20a:	80 83       	st	Z, r24
    UCSR0B |= (1 << TXEN0) | (1 << RXEN0); // enabling Transmit and Receive
 20c:	81 ec       	ldi	r24, 0xC1	; 193
 20e:	90 e0       	ldi	r25, 0x00	; 0
 210:	21 ec       	ldi	r18, 0xC1	; 193
 212:	30 e0       	ldi	r19, 0x00	; 0
 214:	f9 01       	movw	r30, r18
 216:	20 81       	ld	r18, Z
 218:	28 61       	ori	r18, 0x18	; 24
 21a:	fc 01       	movw	r30, r24
 21c:	20 83       	st	Z, r18
    if (stopBits == 1){
 21e:	8b 81       	ldd	r24, Y+3	; 0x03
 220:	81 30       	cpi	r24, 0x01	; 1
 222:	51 f4       	brne	.+20     	; 0x238 <initUART+0x82>
        UCSR0C &= ~(1 << USBS0); // setting stop bits to 1
 224:	82 ec       	ldi	r24, 0xC2	; 194
 226:	90 e0       	ldi	r25, 0x00	; 0
 228:	22 ec       	ldi	r18, 0xC2	; 194
 22a:	30 e0       	ldi	r19, 0x00	; 0
 22c:	f9 01       	movw	r30, r18
 22e:	20 81       	ld	r18, Z
 230:	27 7f       	andi	r18, 0xF7	; 247
 232:	fc 01       	movw	r30, r24
 234:	20 83       	st	Z, r18
 236:	0c c0       	rjmp	.+24     	; 0x250 <initUART+0x9a>
    } else if(stopBits == 2){
 238:	8b 81       	ldd	r24, Y+3	; 0x03
 23a:	82 30       	cpi	r24, 0x02	; 2
 23c:	49 f4       	brne	.+18     	; 0x250 <initUART+0x9a>
        UCSR0C |= (1 << USBS0); // setting stop bits to 2
 23e:	82 ec       	ldi	r24, 0xC2	; 194
 240:	90 e0       	ldi	r25, 0x00	; 0
 242:	22 ec       	ldi	r18, 0xC2	; 194
 244:	30 e0       	ldi	r19, 0x00	; 0
 246:	f9 01       	movw	r30, r18
 248:	20 81       	ld	r18, Z
 24a:	28 60       	ori	r18, 0x08	; 8
 24c:	fc 01       	movw	r30, r24
 24e:	20 83       	st	Z, r18
    }
}
 250:	27 96       	adiw	r28, 0x07	; 7
 252:	0f b6       	in	r0, 0x3f	; 63
 254:	f8 94       	cli
 256:	de bf       	out	0x3e, r29	; 62
 258:	0f be       	out	0x3f, r0	; 63
 25a:	cd bf       	out	0x3d, r28	; 61
 25c:	df 91       	pop	r29
 25e:	cf 91       	pop	r28
 260:	1f 91       	pop	r17
 262:	0f 91       	pop	r16
 264:	08 95       	ret

00000266 <charTX>:

void charTX(unsigned char c){
 266:	cf 93       	push	r28
 268:	df 93       	push	r29
 26a:	1f 92       	push	r1
 26c:	cd b7       	in	r28, 0x3d	; 61
 26e:	de b7       	in	r29, 0x3e	; 62
 270:	89 83       	std	Y+1, r24	; 0x01
    //while ((UCSR0A & (1 << UDRE0)) == 0);
    UDR0 = c; // send new char to buffer
 272:	86 ec       	ldi	r24, 0xC6	; 198
 274:	90 e0       	ldi	r25, 0x00	; 0
 276:	29 81       	ldd	r18, Y+1	; 0x01
 278:	fc 01       	movw	r30, r24
 27a:	20 83       	st	Z, r18
    while ((UCSR0A & (1 << TXC0)) == 0);
 27c:	00 00       	nop
 27e:	80 ec       	ldi	r24, 0xC0	; 192
 280:	90 e0       	ldi	r25, 0x00	; 0
 282:	fc 01       	movw	r30, r24
 284:	80 81       	ld	r24, Z
 286:	88 2f       	mov	r24, r24
 288:	90 e0       	ldi	r25, 0x00	; 0
 28a:	80 74       	andi	r24, 0x40	; 64
 28c:	99 27       	eor	r25, r25
 28e:	89 2b       	or	r24, r25
 290:	b1 f3       	breq	.-20     	; 0x27e <charTX+0x18>
    UCSR0A |= (1 << TXC0);
 292:	80 ec       	ldi	r24, 0xC0	; 192
 294:	90 e0       	ldi	r25, 0x00	; 0
 296:	20 ec       	ldi	r18, 0xC0	; 192
 298:	30 e0       	ldi	r19, 0x00	; 0
 29a:	f9 01       	movw	r30, r18
 29c:	20 81       	ld	r18, Z
 29e:	20 64       	ori	r18, 0x40	; 64
 2a0:	fc 01       	movw	r30, r24
 2a2:	20 83       	st	Z, r18
}
 2a4:	0f 90       	pop	r0
 2a6:	df 91       	pop	r29
 2a8:	cf 91       	pop	r28
 2aa:	08 95       	ret

000002ac <__udivmodsi4>:
 2ac:	a1 e2       	ldi	r26, 0x21	; 33
 2ae:	1a 2e       	mov	r1, r26
 2b0:	aa 1b       	sub	r26, r26
 2b2:	bb 1b       	sub	r27, r27
 2b4:	fd 01       	movw	r30, r26
 2b6:	0d c0       	rjmp	.+26     	; 0x2d2 <__udivmodsi4_ep>

000002b8 <__udivmodsi4_loop>:
 2b8:	aa 1f       	adc	r26, r26
 2ba:	bb 1f       	adc	r27, r27
 2bc:	ee 1f       	adc	r30, r30
 2be:	ff 1f       	adc	r31, r31
 2c0:	a2 17       	cp	r26, r18
 2c2:	b3 07       	cpc	r27, r19
 2c4:	e4 07       	cpc	r30, r20
 2c6:	f5 07       	cpc	r31, r21
 2c8:	20 f0       	brcs	.+8      	; 0x2d2 <__udivmodsi4_ep>
 2ca:	a2 1b       	sub	r26, r18
 2cc:	b3 0b       	sbc	r27, r19
 2ce:	e4 0b       	sbc	r30, r20
 2d0:	f5 0b       	sbc	r31, r21

000002d2 <__udivmodsi4_ep>:
 2d2:	66 1f       	adc	r22, r22
 2d4:	77 1f       	adc	r23, r23
 2d6:	88 1f       	adc	r24, r24
 2d8:	99 1f       	adc	r25, r25
 2da:	1a 94       	dec	r1
 2dc:	69 f7       	brne	.-38     	; 0x2b8 <__udivmodsi4_loop>
 2de:	60 95       	com	r22
 2e0:	70 95       	com	r23
 2e2:	80 95       	com	r24
 2e4:	90 95       	com	r25
 2e6:	9b 01       	movw	r18, r22
 2e8:	ac 01       	movw	r20, r24
 2ea:	bd 01       	movw	r22, r26
 2ec:	cf 01       	movw	r24, r30
 2ee:	08 95       	ret

000002f0 <_exit>:
 2f0:	f8 94       	cli

000002f2 <__stop_program>:
 2f2:	ff cf       	rjmp	.-2      	; 0x2f2 <__stop_program>
