
testUARTLib.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000094e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000008da  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000012  00800100  00800100  0000094e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000094e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000980  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000b0  00000000  00000000  000009c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000ad7  00000000  00000000  00000a70  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000076a  00000000  00000000  00001547  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000006ae  00000000  00000000  00001cb1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000298  00000000  00000000  00002360  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000040d  00000000  00000000  000025f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000573  00000000  00000000  00002a05  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000090  00000000  00000000  00002f78  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 44 00 	jmp	0x88	; 0x88 <__ctors_end>
   4:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
   8:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
   c:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  10:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  14:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  18:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  1c:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  20:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  24:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  28:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  2c:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  30:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  34:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  38:	0c 94 2b 04 	jmp	0x856	; 0x856 <__vector_14>
  3c:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  40:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  44:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  48:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  4c:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  50:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  54:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  58:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  5c:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  60:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  64:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  68:	84 01       	movw	r16, r8
  6a:	9d 01       	movw	r18, r26
  6c:	a6 01       	movw	r20, r12
  6e:	bb 01       	movw	r22, r22
  70:	d0 01       	movw	r26, r0
  72:	e1 01       	movw	r28, r2
  74:	f6 01       	movw	r30, r12
  76:	0f 02       	muls	r16, r31
  78:	1c 02       	muls	r17, r28
  7a:	39 02       	muls	r19, r25
  7c:	52 02       	muls	r21, r18
  7e:	6b 02       	muls	r22, r27
  80:	80 02       	muls	r24, r16
  82:	91 02       	muls	r25, r17
  84:	a6 02       	muls	r26, r22
  86:	bb 02       	muls	r27, r27

00000088 <__ctors_end>:
  88:	11 24       	eor	r1, r1
  8a:	1f be       	out	0x3f, r1	; 63
  8c:	cf ef       	ldi	r28, 0xFF	; 255
  8e:	d8 e0       	ldi	r29, 0x08	; 8
  90:	de bf       	out	0x3e, r29	; 62
  92:	cd bf       	out	0x3d, r28	; 61

00000094 <__do_clear_bss>:
  94:	21 e0       	ldi	r18, 0x01	; 1
  96:	a0 e0       	ldi	r26, 0x00	; 0
  98:	b1 e0       	ldi	r27, 0x01	; 1
  9a:	01 c0       	rjmp	.+2      	; 0x9e <.do_clear_bss_start>

0000009c <.do_clear_bss_loop>:
  9c:	1d 92       	st	X+, r1

0000009e <.do_clear_bss_start>:
  9e:	a2 31       	cpi	r26, 0x12	; 18
  a0:	b2 07       	cpc	r27, r18
  a2:	e1 f7       	brne	.-8      	; 0x9c <.do_clear_bss_loop>
  a4:	0e 94 58 00 	call	0xb0	; 0xb0 <main>
  a8:	0c 94 6b 04 	jmp	0x8d6	; 0x8d6 <_exit>

000000ac <__bad_interrupt>:
  ac:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000b0 <main>:

#define F_CPU 16000000
#include <avr/io.h>
#include "uartLib.h"

int main(void){
  b0:	af 92       	push	r10
  b2:	bf 92       	push	r11
  b4:	cf 92       	push	r12
  b6:	df 92       	push	r13
  b8:	ef 92       	push	r14
  ba:	ff 92       	push	r15
  bc:	0f 93       	push	r16
  be:	1f 93       	push	r17
  c0:	cf 93       	push	r28
  c2:	df 93       	push	r29
  c4:	00 d0       	rcall	.+0      	; 0xc6 <main+0x16>
  c6:	cd b7       	in	r28, 0x3d	; 61
  c8:	de b7       	in	r29, 0x3e	; 62

    initSevenSeg(B5,B4,B3,B2,B1,B0,C0,ANODE);
  ca:	aa 24       	eor	r10, r10
  cc:	a3 94       	inc	r10
  ce:	b1 2c       	mov	r11, r1
  d0:	0f 2e       	mov	r0, r31
  d2:	fe e0       	ldi	r31, 0x0E	; 14
  d4:	cf 2e       	mov	r12, r31
  d6:	d1 2c       	mov	r13, r1
  d8:	f0 2d       	mov	r31, r0
  da:	68 94       	set
  dc:	ee 24       	eor	r14, r14
  de:	e3 f8       	bld	r14, 3
  e0:	f1 2c       	mov	r15, r1
  e2:	09 e0       	ldi	r16, 0x09	; 9
  e4:	10 e0       	ldi	r17, 0x00	; 0
  e6:	2a e0       	ldi	r18, 0x0A	; 10
  e8:	30 e0       	ldi	r19, 0x00	; 0
  ea:	4b e0       	ldi	r20, 0x0B	; 11
  ec:	50 e0       	ldi	r21, 0x00	; 0
  ee:	6c e0       	ldi	r22, 0x0C	; 12
  f0:	70 e0       	ldi	r23, 0x00	; 0
  f2:	8d e0       	ldi	r24, 0x0D	; 13
  f4:	90 e0       	ldi	r25, 0x00	; 0
  f6:	0e 94 95 00 	call	0x12a	; 0x12a <initSevenSeg>
    init_timer();
  fa:	0e 94 03 04 	call	0x806	; 0x806 <init_timer>
    int i = 0;
  fe:	1a 82       	std	Y+2, r1	; 0x02
 100:	19 82       	std	Y+1, r1	; 0x01
    while (1) 
    {        
        writeNum(i);
 102:	89 81       	ldd	r24, Y+1	; 0x01
 104:	9a 81       	ldd	r25, Y+2	; 0x02
 106:	0e 94 66 01 	call	0x2cc	; 0x2cc <writeNum>
        delay(1000);
 10a:	88 ee       	ldi	r24, 0xE8	; 232
 10c:	93 e0       	ldi	r25, 0x03	; 3
 10e:	0e 94 4a 04 	call	0x894	; 0x894 <delay>
        i++;
 112:	89 81       	ldd	r24, Y+1	; 0x01
 114:	9a 81       	ldd	r25, Y+2	; 0x02
 116:	01 96       	adiw	r24, 0x01	; 1
 118:	9a 83       	std	Y+2, r25	; 0x02
 11a:	89 83       	std	Y+1, r24	; 0x01
        if (i>15)
 11c:	89 81       	ldd	r24, Y+1	; 0x01
 11e:	9a 81       	ldd	r25, Y+2	; 0x02
 120:	40 97       	sbiw	r24, 0x10	; 16
 122:	14 f0       	brlt	.+4      	; 0x128 <main+0x78>
            i = 0;
 124:	1a 82       	std	Y+2, r1	; 0x02
 126:	19 82       	std	Y+1, r1	; 0x01
    }
 128:	ec cf       	rjmp	.-40     	; 0x102 <main+0x52>

0000012a <initSevenSeg>:
#include "uartLib.h"

void initSevenSeg(int a, int b, int c, int d, int e, int f, int g, int type_){
 12a:	af 92       	push	r10
 12c:	bf 92       	push	r11
 12e:	cf 92       	push	r12
 130:	df 92       	push	r13
 132:	ef 92       	push	r14
 134:	ff 92       	push	r15
 136:	0f 93       	push	r16
 138:	1f 93       	push	r17
 13a:	cf 93       	push	r28
 13c:	df 93       	push	r29
 13e:	cd b7       	in	r28, 0x3d	; 61
 140:	de b7       	in	r29, 0x3e	; 62
 142:	64 97       	sbiw	r28, 0x14	; 20
 144:	0f b6       	in	r0, 0x3f	; 63
 146:	f8 94       	cli
 148:	de bf       	out	0x3e, r29	; 62
 14a:	0f be       	out	0x3f, r0	; 63
 14c:	cd bf       	out	0x3d, r28	; 61
 14e:	9e 83       	std	Y+6, r25	; 0x06
 150:	8d 83       	std	Y+5, r24	; 0x05
 152:	78 87       	std	Y+8, r23	; 0x08
 154:	6f 83       	std	Y+7, r22	; 0x07
 156:	5a 87       	std	Y+10, r21	; 0x0a
 158:	49 87       	std	Y+9, r20	; 0x09
 15a:	3c 87       	std	Y+12, r19	; 0x0c
 15c:	2b 87       	std	Y+11, r18	; 0x0b
 15e:	1e 87       	std	Y+14, r17	; 0x0e
 160:	0d 87       	std	Y+13, r16	; 0x0d
 162:	f8 8a       	std	Y+16, r15	; 0x10
 164:	ef 86       	std	Y+15, r14	; 0x0f
 166:	da 8a       	std	Y+18, r13	; 0x12
 168:	c9 8a       	std	Y+17, r12	; 0x11
 16a:	bc 8a       	std	Y+20, r11	; 0x14
 16c:	ab 8a       	std	Y+19, r10	; 0x13
    pinArray[0]= a;
 16e:	8d 81       	ldd	r24, Y+5	; 0x05
 170:	9e 81       	ldd	r25, Y+6	; 0x06
 172:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <pinArray+0x1>
 176:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <pinArray>
    pinArray[1]= b;
 17a:	8f 81       	ldd	r24, Y+7	; 0x07
 17c:	98 85       	ldd	r25, Y+8	; 0x08
 17e:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <pinArray+0x3>
 182:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <pinArray+0x2>
    pinArray[2]= c;
 186:	89 85       	ldd	r24, Y+9	; 0x09
 188:	9a 85       	ldd	r25, Y+10	; 0x0a
 18a:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <pinArray+0x5>
 18e:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <pinArray+0x4>
    pinArray[3]= d;
 192:	8b 85       	ldd	r24, Y+11	; 0x0b
 194:	9c 85       	ldd	r25, Y+12	; 0x0c
 196:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <pinArray+0x7>
 19a:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <pinArray+0x6>
    pinArray[4]= e;
 19e:	8d 85       	ldd	r24, Y+13	; 0x0d
 1a0:	9e 85       	ldd	r25, Y+14	; 0x0e
 1a2:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <pinArray+0x9>
 1a6:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <pinArray+0x8>
    pinArray[5]= f;
 1aa:	8f 85       	ldd	r24, Y+15	; 0x0f
 1ac:	98 89       	ldd	r25, Y+16	; 0x10
 1ae:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <pinArray+0xb>
 1b2:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <pinArray+0xa>
    pinArray[6]= g;
 1b6:	89 89       	ldd	r24, Y+17	; 0x11
 1b8:	9a 89       	ldd	r25, Y+18	; 0x12
 1ba:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <pinArray+0xd>
 1be:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <pinArray+0xc>
    type=type_;
 1c2:	8b 89       	ldd	r24, Y+19	; 0x13
 1c4:	9c 89       	ldd	r25, Y+20	; 0x14
 1c6:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
 1ca:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
    for (int i = 0; i< 7; i++){
 1ce:	1a 82       	std	Y+2, r1	; 0x02
 1d0:	19 82       	std	Y+1, r1	; 0x01
 1d2:	66 c0       	rjmp	.+204    	; 0x2a0 <initSevenSeg+0x176>
        int LED = pinArray[i];    
 1d4:	89 81       	ldd	r24, Y+1	; 0x01
 1d6:	9a 81       	ldd	r25, Y+2	; 0x02
 1d8:	88 0f       	add	r24, r24
 1da:	99 1f       	adc	r25, r25
 1dc:	8c 5f       	subi	r24, 0xFC	; 252
 1de:	9e 4f       	sbci	r25, 0xFE	; 254
 1e0:	fc 01       	movw	r30, r24
 1e2:	80 81       	ld	r24, Z
 1e4:	91 81       	ldd	r25, Z+1	; 0x01
 1e6:	9c 83       	std	Y+4, r25	; 0x04
 1e8:	8b 83       	std	Y+3, r24	; 0x03
        if (LED >= 0 && LED <=7){ //port D
 1ea:	8b 81       	ldd	r24, Y+3	; 0x03
 1ec:	9c 81       	ldd	r25, Y+4	; 0x04
 1ee:	99 23       	and	r25, r25
 1f0:	b4 f0       	brlt	.+44     	; 0x21e <initSevenSeg+0xf4>
 1f2:	8b 81       	ldd	r24, Y+3	; 0x03
 1f4:	9c 81       	ldd	r25, Y+4	; 0x04
 1f6:	08 97       	sbiw	r24, 0x08	; 8
 1f8:	94 f4       	brge	.+36     	; 0x21e <initSevenSeg+0xf4>
            DDRD |= (1 << LED);
 1fa:	8a e2       	ldi	r24, 0x2A	; 42
 1fc:	90 e0       	ldi	r25, 0x00	; 0
 1fe:	2a e2       	ldi	r18, 0x2A	; 42
 200:	30 e0       	ldi	r19, 0x00	; 0
 202:	f9 01       	movw	r30, r18
 204:	20 81       	ld	r18, Z
 206:	42 2f       	mov	r20, r18
 208:	21 e0       	ldi	r18, 0x01	; 1
 20a:	30 e0       	ldi	r19, 0x00	; 0
 20c:	0b 80       	ldd	r0, Y+3	; 0x03
 20e:	02 c0       	rjmp	.+4      	; 0x214 <initSevenSeg+0xea>
 210:	22 0f       	add	r18, r18
 212:	33 1f       	adc	r19, r19
 214:	0a 94       	dec	r0
 216:	e2 f7       	brpl	.-8      	; 0x210 <initSevenSeg+0xe6>
 218:	24 2b       	or	r18, r20
 21a:	fc 01       	movw	r30, r24
 21c:	20 83       	st	Z, r18
        }
        if (LED >= 8 && LED <=13){ //port B
 21e:	8b 81       	ldd	r24, Y+3	; 0x03
 220:	9c 81       	ldd	r25, Y+4	; 0x04
 222:	08 97       	sbiw	r24, 0x08	; 8
 224:	d4 f0       	brlt	.+52     	; 0x25a <initSevenSeg+0x130>
 226:	8b 81       	ldd	r24, Y+3	; 0x03
 228:	9c 81       	ldd	r25, Y+4	; 0x04
 22a:	0e 97       	sbiw	r24, 0x0e	; 14
 22c:	b4 f4       	brge	.+44     	; 0x25a <initSevenSeg+0x130>
            DDRB |= (1 << (LED-8));
 22e:	84 e2       	ldi	r24, 0x24	; 36
 230:	90 e0       	ldi	r25, 0x00	; 0
 232:	24 e2       	ldi	r18, 0x24	; 36
 234:	30 e0       	ldi	r19, 0x00	; 0
 236:	f9 01       	movw	r30, r18
 238:	20 81       	ld	r18, Z
 23a:	62 2f       	mov	r22, r18
 23c:	2b 81       	ldd	r18, Y+3	; 0x03
 23e:	3c 81       	ldd	r19, Y+4	; 0x04
 240:	a9 01       	movw	r20, r18
 242:	48 50       	subi	r20, 0x08	; 8
 244:	51 09       	sbc	r21, r1
 246:	21 e0       	ldi	r18, 0x01	; 1
 248:	30 e0       	ldi	r19, 0x00	; 0
 24a:	02 c0       	rjmp	.+4      	; 0x250 <initSevenSeg+0x126>
 24c:	22 0f       	add	r18, r18
 24e:	33 1f       	adc	r19, r19
 250:	4a 95       	dec	r20
 252:	e2 f7       	brpl	.-8      	; 0x24c <initSevenSeg+0x122>
 254:	26 2b       	or	r18, r22
 256:	fc 01       	movw	r30, r24
 258:	20 83       	st	Z, r18
        }
        if (LED >= 14 && LED <=19){ //port C
 25a:	8b 81       	ldd	r24, Y+3	; 0x03
 25c:	9c 81       	ldd	r25, Y+4	; 0x04
 25e:	0e 97       	sbiw	r24, 0x0e	; 14
 260:	d4 f0       	brlt	.+52     	; 0x296 <initSevenSeg+0x16c>
 262:	8b 81       	ldd	r24, Y+3	; 0x03
 264:	9c 81       	ldd	r25, Y+4	; 0x04
 266:	44 97       	sbiw	r24, 0x14	; 20
 268:	b4 f4       	brge	.+44     	; 0x296 <initSevenSeg+0x16c>
            DDRC |= (1 << (LED-14));
 26a:	87 e2       	ldi	r24, 0x27	; 39
 26c:	90 e0       	ldi	r25, 0x00	; 0
 26e:	27 e2       	ldi	r18, 0x27	; 39
 270:	30 e0       	ldi	r19, 0x00	; 0
 272:	f9 01       	movw	r30, r18
 274:	20 81       	ld	r18, Z
 276:	62 2f       	mov	r22, r18
 278:	2b 81       	ldd	r18, Y+3	; 0x03
 27a:	3c 81       	ldd	r19, Y+4	; 0x04
 27c:	a9 01       	movw	r20, r18
 27e:	4e 50       	subi	r20, 0x0E	; 14
 280:	51 09       	sbc	r21, r1
 282:	21 e0       	ldi	r18, 0x01	; 1
 284:	30 e0       	ldi	r19, 0x00	; 0
 286:	02 c0       	rjmp	.+4      	; 0x28c <initSevenSeg+0x162>
 288:	22 0f       	add	r18, r18
 28a:	33 1f       	adc	r19, r19
 28c:	4a 95       	dec	r20
 28e:	e2 f7       	brpl	.-8      	; 0x288 <initSevenSeg+0x15e>
 290:	26 2b       	or	r18, r22
 292:	fc 01       	movw	r30, r24
 294:	20 83       	st	Z, r18
    pinArray[3]= d;
    pinArray[4]= e;
    pinArray[5]= f;
    pinArray[6]= g;
    type=type_;
    for (int i = 0; i< 7; i++){
 296:	89 81       	ldd	r24, Y+1	; 0x01
 298:	9a 81       	ldd	r25, Y+2	; 0x02
 29a:	01 96       	adiw	r24, 0x01	; 1
 29c:	9a 83       	std	Y+2, r25	; 0x02
 29e:	89 83       	std	Y+1, r24	; 0x01
 2a0:	89 81       	ldd	r24, Y+1	; 0x01
 2a2:	9a 81       	ldd	r25, Y+2	; 0x02
 2a4:	07 97       	sbiw	r24, 0x07	; 7
 2a6:	0c f4       	brge	.+2      	; 0x2aa <initSevenSeg+0x180>
 2a8:	95 cf       	rjmp	.-214    	; 0x1d4 <initSevenSeg+0xaa>
        }
        if (LED >= 14 && LED <=19){ //port C
            DDRC |= (1 << (LED-14));
        }
    }
}
 2aa:	64 96       	adiw	r28, 0x14	; 20
 2ac:	0f b6       	in	r0, 0x3f	; 63
 2ae:	f8 94       	cli
 2b0:	de bf       	out	0x3e, r29	; 62
 2b2:	0f be       	out	0x3f, r0	; 63
 2b4:	cd bf       	out	0x3d, r28	; 61
 2b6:	df 91       	pop	r29
 2b8:	cf 91       	pop	r28
 2ba:	1f 91       	pop	r17
 2bc:	0f 91       	pop	r16
 2be:	ff 90       	pop	r15
 2c0:	ef 90       	pop	r14
 2c2:	df 90       	pop	r13
 2c4:	cf 90       	pop	r12
 2c6:	bf 90       	pop	r11
 2c8:	af 90       	pop	r10
 2ca:	08 95       	ret

000002cc <writeNum>:

void writeNum(int num){
 2cc:	cf 93       	push	r28
 2ce:	df 93       	push	r29
 2d0:	00 d0       	rcall	.+0      	; 0x2d2 <writeNum+0x6>
 2d2:	cd b7       	in	r28, 0x3d	; 61
 2d4:	de b7       	in	r29, 0x3e	; 62
 2d6:	9a 83       	std	Y+2, r25	; 0x02
 2d8:	89 83       	std	Y+1, r24	; 0x01
    turnAllOff();
 2da:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <turnAllOff>
    switch (num){
 2de:	89 81       	ldd	r24, Y+1	; 0x01
 2e0:	9a 81       	ldd	r25, Y+2	; 0x02
 2e2:	09 2e       	mov	r0, r25
 2e4:	00 0c       	add	r0, r0
 2e6:	aa 0b       	sbc	r26, r26
 2e8:	bb 0b       	sbc	r27, r27
 2ea:	40 e0       	ldi	r20, 0x00	; 0
 2ec:	50 e0       	ldi	r21, 0x00	; 0
 2ee:	2f e0       	ldi	r18, 0x0F	; 15
 2f0:	30 e0       	ldi	r19, 0x00	; 0
 2f2:	84 1b       	sub	r24, r20
 2f4:	95 0b       	sbc	r25, r21
 2f6:	28 17       	cp	r18, r24
 2f8:	39 07       	cpc	r19, r25
 2fa:	08 f4       	brcc	.+2      	; 0x2fe <writeNum+0x32>
 2fc:	4d c1       	rjmp	.+666    	; 0x598 <__LOCK_REGION_LENGTH__+0x198>
 2fe:	8c 5c       	subi	r24, 0xCC	; 204
 300:	9f 4f       	sbci	r25, 0xFF	; 255
 302:	fc 01       	movw	r30, r24
 304:	0c 94 65 04 	jmp	0x8ca	; 0x8ca <__tablejump2__>
        case 0:
            turnOn(0); turnOn(1); turnOn(2); turnOn(3); turnOn(4); turnOn(5); break;
 308:	80 e0       	ldi	r24, 0x00	; 0
 30a:	90 e0       	ldi	r25, 0x00	; 0
 30c:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <turnOn>
 310:	81 e0       	ldi	r24, 0x01	; 1
 312:	90 e0       	ldi	r25, 0x00	; 0
 314:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <turnOn>
 318:	82 e0       	ldi	r24, 0x02	; 2
 31a:	90 e0       	ldi	r25, 0x00	; 0
 31c:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <turnOn>
 320:	83 e0       	ldi	r24, 0x03	; 3
 322:	90 e0       	ldi	r25, 0x00	; 0
 324:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <turnOn>
 328:	84 e0       	ldi	r24, 0x04	; 4
 32a:	90 e0       	ldi	r25, 0x00	; 0
 32c:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <turnOn>
 330:	85 e0       	ldi	r24, 0x05	; 5
 332:	90 e0       	ldi	r25, 0x00	; 0
 334:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <turnOn>
 338:	2f c1       	rjmp	.+606    	; 0x598 <__LOCK_REGION_LENGTH__+0x198>
        case 1:
            turnOn(1); turnOn(2); break;
 33a:	81 e0       	ldi	r24, 0x01	; 1
 33c:	90 e0       	ldi	r25, 0x00	; 0
 33e:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <turnOn>
 342:	82 e0       	ldi	r24, 0x02	; 2
 344:	90 e0       	ldi	r25, 0x00	; 0
 346:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <turnOn>
 34a:	26 c1       	rjmp	.+588    	; 0x598 <__LOCK_REGION_LENGTH__+0x198>
        case 2:
            turnOn(0); turnOn(1); turnOn(3); turnOn(4); turnOn(6); break;
 34c:	80 e0       	ldi	r24, 0x00	; 0
 34e:	90 e0       	ldi	r25, 0x00	; 0
 350:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <turnOn>
 354:	81 e0       	ldi	r24, 0x01	; 1
 356:	90 e0       	ldi	r25, 0x00	; 0
 358:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <turnOn>
 35c:	83 e0       	ldi	r24, 0x03	; 3
 35e:	90 e0       	ldi	r25, 0x00	; 0
 360:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <turnOn>
 364:	84 e0       	ldi	r24, 0x04	; 4
 366:	90 e0       	ldi	r25, 0x00	; 0
 368:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <turnOn>
 36c:	86 e0       	ldi	r24, 0x06	; 6
 36e:	90 e0       	ldi	r25, 0x00	; 0
 370:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <turnOn>
 374:	11 c1       	rjmp	.+546    	; 0x598 <__LOCK_REGION_LENGTH__+0x198>
        case 3:
            turnOn(0); turnOn(1); turnOn(2); turnOn(3); turnOn(6); break;
 376:	80 e0       	ldi	r24, 0x00	; 0
 378:	90 e0       	ldi	r25, 0x00	; 0
 37a:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <turnOn>
 37e:	81 e0       	ldi	r24, 0x01	; 1
 380:	90 e0       	ldi	r25, 0x00	; 0
 382:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <turnOn>
 386:	82 e0       	ldi	r24, 0x02	; 2
 388:	90 e0       	ldi	r25, 0x00	; 0
 38a:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <turnOn>
 38e:	83 e0       	ldi	r24, 0x03	; 3
 390:	90 e0       	ldi	r25, 0x00	; 0
 392:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <turnOn>
 396:	86 e0       	ldi	r24, 0x06	; 6
 398:	90 e0       	ldi	r25, 0x00	; 0
 39a:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <turnOn>
 39e:	fc c0       	rjmp	.+504    	; 0x598 <__LOCK_REGION_LENGTH__+0x198>
        case 4:
            turnOn(1); turnOn(2); turnOn(5); turnOn(6); break;
 3a0:	81 e0       	ldi	r24, 0x01	; 1
 3a2:	90 e0       	ldi	r25, 0x00	; 0
 3a4:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <turnOn>
 3a8:	82 e0       	ldi	r24, 0x02	; 2
 3aa:	90 e0       	ldi	r25, 0x00	; 0
 3ac:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <turnOn>
 3b0:	85 e0       	ldi	r24, 0x05	; 5
 3b2:	90 e0       	ldi	r25, 0x00	; 0
 3b4:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <turnOn>
 3b8:	86 e0       	ldi	r24, 0x06	; 6
 3ba:	90 e0       	ldi	r25, 0x00	; 0
 3bc:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <turnOn>
 3c0:	eb c0       	rjmp	.+470    	; 0x598 <__LOCK_REGION_LENGTH__+0x198>
        case 5:
            turnOn(0); turnOn(2); turnOn(3); turnOn(5); turnOn(6); break;
 3c2:	80 e0       	ldi	r24, 0x00	; 0
 3c4:	90 e0       	ldi	r25, 0x00	; 0
 3c6:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <turnOn>
 3ca:	82 e0       	ldi	r24, 0x02	; 2
 3cc:	90 e0       	ldi	r25, 0x00	; 0
 3ce:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <turnOn>
 3d2:	83 e0       	ldi	r24, 0x03	; 3
 3d4:	90 e0       	ldi	r25, 0x00	; 0
 3d6:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <turnOn>
 3da:	85 e0       	ldi	r24, 0x05	; 5
 3dc:	90 e0       	ldi	r25, 0x00	; 0
 3de:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <turnOn>
 3e2:	86 e0       	ldi	r24, 0x06	; 6
 3e4:	90 e0       	ldi	r25, 0x00	; 0
 3e6:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <turnOn>
 3ea:	d6 c0       	rjmp	.+428    	; 0x598 <__LOCK_REGION_LENGTH__+0x198>
        case 6:
            turnOn(0); turnOn(2); turnOn(3); turnOn(4); turnOn(5); turnOn(6); break;
 3ec:	80 e0       	ldi	r24, 0x00	; 0
 3ee:	90 e0       	ldi	r25, 0x00	; 0
 3f0:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <turnOn>
 3f4:	82 e0       	ldi	r24, 0x02	; 2
 3f6:	90 e0       	ldi	r25, 0x00	; 0
 3f8:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <turnOn>
 3fc:	83 e0       	ldi	r24, 0x03	; 3
 3fe:	90 e0       	ldi	r25, 0x00	; 0
 400:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <turnOn>
 404:	84 e0       	ldi	r24, 0x04	; 4
 406:	90 e0       	ldi	r25, 0x00	; 0
 408:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <turnOn>
 40c:	85 e0       	ldi	r24, 0x05	; 5
 40e:	90 e0       	ldi	r25, 0x00	; 0
 410:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <turnOn>
 414:	86 e0       	ldi	r24, 0x06	; 6
 416:	90 e0       	ldi	r25, 0x00	; 0
 418:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <turnOn>
 41c:	bd c0       	rjmp	.+378    	; 0x598 <__LOCK_REGION_LENGTH__+0x198>
        case 7:
            turnOn(0); turnOn(1); turnOn(2); break;
 41e:	80 e0       	ldi	r24, 0x00	; 0
 420:	90 e0       	ldi	r25, 0x00	; 0
 422:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <turnOn>
 426:	81 e0       	ldi	r24, 0x01	; 1
 428:	90 e0       	ldi	r25, 0x00	; 0
 42a:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <turnOn>
 42e:	82 e0       	ldi	r24, 0x02	; 2
 430:	90 e0       	ldi	r25, 0x00	; 0
 432:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <turnOn>
 436:	b0 c0       	rjmp	.+352    	; 0x598 <__LOCK_REGION_LENGTH__+0x198>
        case 8:
            turnOn(0); turnOn(1); turnOn(2); turnOn(3); turnOn(4); turnOn(5); turnOn(6); break;
 438:	80 e0       	ldi	r24, 0x00	; 0
 43a:	90 e0       	ldi	r25, 0x00	; 0
 43c:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <turnOn>
 440:	81 e0       	ldi	r24, 0x01	; 1
 442:	90 e0       	ldi	r25, 0x00	; 0
 444:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <turnOn>
 448:	82 e0       	ldi	r24, 0x02	; 2
 44a:	90 e0       	ldi	r25, 0x00	; 0
 44c:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <turnOn>
 450:	83 e0       	ldi	r24, 0x03	; 3
 452:	90 e0       	ldi	r25, 0x00	; 0
 454:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <turnOn>
 458:	84 e0       	ldi	r24, 0x04	; 4
 45a:	90 e0       	ldi	r25, 0x00	; 0
 45c:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <turnOn>
 460:	85 e0       	ldi	r24, 0x05	; 5
 462:	90 e0       	ldi	r25, 0x00	; 0
 464:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <turnOn>
 468:	86 e0       	ldi	r24, 0x06	; 6
 46a:	90 e0       	ldi	r25, 0x00	; 0
 46c:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <turnOn>
 470:	93 c0       	rjmp	.+294    	; 0x598 <__LOCK_REGION_LENGTH__+0x198>
        case 9:
            turnOn(0); turnOn(1); turnOn(2); turnOn(3); turnOn(5); turnOn(6); break;
 472:	80 e0       	ldi	r24, 0x00	; 0
 474:	90 e0       	ldi	r25, 0x00	; 0
 476:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <turnOn>
 47a:	81 e0       	ldi	r24, 0x01	; 1
 47c:	90 e0       	ldi	r25, 0x00	; 0
 47e:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <turnOn>
 482:	82 e0       	ldi	r24, 0x02	; 2
 484:	90 e0       	ldi	r25, 0x00	; 0
 486:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <turnOn>
 48a:	83 e0       	ldi	r24, 0x03	; 3
 48c:	90 e0       	ldi	r25, 0x00	; 0
 48e:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <turnOn>
 492:	85 e0       	ldi	r24, 0x05	; 5
 494:	90 e0       	ldi	r25, 0x00	; 0
 496:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <turnOn>
 49a:	86 e0       	ldi	r24, 0x06	; 6
 49c:	90 e0       	ldi	r25, 0x00	; 0
 49e:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <turnOn>
 4a2:	7a c0       	rjmp	.+244    	; 0x598 <__LOCK_REGION_LENGTH__+0x198>
        case 10:
            turnOn(0); turnOn(1); turnOn(2); turnOn(4); turnOn(5); turnOn(6); break;
 4a4:	80 e0       	ldi	r24, 0x00	; 0
 4a6:	90 e0       	ldi	r25, 0x00	; 0
 4a8:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <turnOn>
 4ac:	81 e0       	ldi	r24, 0x01	; 1
 4ae:	90 e0       	ldi	r25, 0x00	; 0
 4b0:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <turnOn>
 4b4:	82 e0       	ldi	r24, 0x02	; 2
 4b6:	90 e0       	ldi	r25, 0x00	; 0
 4b8:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <turnOn>
 4bc:	84 e0       	ldi	r24, 0x04	; 4
 4be:	90 e0       	ldi	r25, 0x00	; 0
 4c0:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <turnOn>
 4c4:	85 e0       	ldi	r24, 0x05	; 5
 4c6:	90 e0       	ldi	r25, 0x00	; 0
 4c8:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <turnOn>
 4cc:	86 e0       	ldi	r24, 0x06	; 6
 4ce:	90 e0       	ldi	r25, 0x00	; 0
 4d0:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <turnOn>
 4d4:	61 c0       	rjmp	.+194    	; 0x598 <__LOCK_REGION_LENGTH__+0x198>
        case 11:
            turnOn(2); turnOn(3); turnOn(4); turnOn(5); turnOn(6); break;
 4d6:	82 e0       	ldi	r24, 0x02	; 2
 4d8:	90 e0       	ldi	r25, 0x00	; 0
 4da:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <turnOn>
 4de:	83 e0       	ldi	r24, 0x03	; 3
 4e0:	90 e0       	ldi	r25, 0x00	; 0
 4e2:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <turnOn>
 4e6:	84 e0       	ldi	r24, 0x04	; 4
 4e8:	90 e0       	ldi	r25, 0x00	; 0
 4ea:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <turnOn>
 4ee:	85 e0       	ldi	r24, 0x05	; 5
 4f0:	90 e0       	ldi	r25, 0x00	; 0
 4f2:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <turnOn>
 4f6:	86 e0       	ldi	r24, 0x06	; 6
 4f8:	90 e0       	ldi	r25, 0x00	; 0
 4fa:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <turnOn>
 4fe:	4c c0       	rjmp	.+152    	; 0x598 <__LOCK_REGION_LENGTH__+0x198>
        case 12:
            turnOn(0); turnOn(3); turnOn(4); turnOn(5); break;
 500:	80 e0       	ldi	r24, 0x00	; 0
 502:	90 e0       	ldi	r25, 0x00	; 0
 504:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <turnOn>
 508:	83 e0       	ldi	r24, 0x03	; 3
 50a:	90 e0       	ldi	r25, 0x00	; 0
 50c:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <turnOn>
 510:	84 e0       	ldi	r24, 0x04	; 4
 512:	90 e0       	ldi	r25, 0x00	; 0
 514:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <turnOn>
 518:	85 e0       	ldi	r24, 0x05	; 5
 51a:	90 e0       	ldi	r25, 0x00	; 0
 51c:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <turnOn>
 520:	3b c0       	rjmp	.+118    	; 0x598 <__LOCK_REGION_LENGTH__+0x198>
        case 13:
            turnOn(1); turnOn(2); turnOn(3); turnOn(4); turnOn(6); break;
 522:	81 e0       	ldi	r24, 0x01	; 1
 524:	90 e0       	ldi	r25, 0x00	; 0
 526:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <turnOn>
 52a:	82 e0       	ldi	r24, 0x02	; 2
 52c:	90 e0       	ldi	r25, 0x00	; 0
 52e:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <turnOn>
 532:	83 e0       	ldi	r24, 0x03	; 3
 534:	90 e0       	ldi	r25, 0x00	; 0
 536:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <turnOn>
 53a:	84 e0       	ldi	r24, 0x04	; 4
 53c:	90 e0       	ldi	r25, 0x00	; 0
 53e:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <turnOn>
 542:	86 e0       	ldi	r24, 0x06	; 6
 544:	90 e0       	ldi	r25, 0x00	; 0
 546:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <turnOn>
 54a:	26 c0       	rjmp	.+76     	; 0x598 <__LOCK_REGION_LENGTH__+0x198>
        case 14:
            turnOn(0); turnOn(3); turnOn(4); turnOn(5); turnOn(6); break;
 54c:	80 e0       	ldi	r24, 0x00	; 0
 54e:	90 e0       	ldi	r25, 0x00	; 0
 550:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <turnOn>
 554:	83 e0       	ldi	r24, 0x03	; 3
 556:	90 e0       	ldi	r25, 0x00	; 0
 558:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <turnOn>
 55c:	84 e0       	ldi	r24, 0x04	; 4
 55e:	90 e0       	ldi	r25, 0x00	; 0
 560:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <turnOn>
 564:	85 e0       	ldi	r24, 0x05	; 5
 566:	90 e0       	ldi	r25, 0x00	; 0
 568:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <turnOn>
 56c:	86 e0       	ldi	r24, 0x06	; 6
 56e:	90 e0       	ldi	r25, 0x00	; 0
 570:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <turnOn>
 574:	11 c0       	rjmp	.+34     	; 0x598 <__LOCK_REGION_LENGTH__+0x198>
        case 15:
            turnOn(0); turnOn(4); turnOn(5); turnOn(6); break;
 576:	80 e0       	ldi	r24, 0x00	; 0
 578:	90 e0       	ldi	r25, 0x00	; 0
 57a:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <turnOn>
 57e:	84 e0       	ldi	r24, 0x04	; 4
 580:	90 e0       	ldi	r25, 0x00	; 0
 582:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <turnOn>
 586:	85 e0       	ldi	r24, 0x05	; 5
 588:	90 e0       	ldi	r25, 0x00	; 0
 58a:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <turnOn>
 58e:	86 e0       	ldi	r24, 0x06	; 6
 590:	90 e0       	ldi	r25, 0x00	; 0
 592:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <turnOn>
 596:	00 00       	nop
    }
}
 598:	0f 90       	pop	r0
 59a:	0f 90       	pop	r0
 59c:	df 91       	pop	r29
 59e:	cf 91       	pop	r28
 5a0:	08 95       	ret

000005a2 <turnOn>:

void turnOn(int LED){
 5a2:	cf 93       	push	r28
 5a4:	df 93       	push	r29
 5a6:	00 d0       	rcall	.+0      	; 0x5a8 <turnOn+0x6>
 5a8:	cd b7       	in	r28, 0x3d	; 61
 5aa:	de b7       	in	r29, 0x3e	; 62
 5ac:	9a 83       	std	Y+2, r25	; 0x02
 5ae:	89 83       	std	Y+1, r24	; 0x01
    if (type){ // common anode
 5b0:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 5b4:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 5b8:	89 2b       	or	r24, r25
 5ba:	61 f0       	breq	.+24     	; 0x5d4 <turnOn+0x32>
        setLow(pinArray[LED]);
 5bc:	89 81       	ldd	r24, Y+1	; 0x01
 5be:	9a 81       	ldd	r25, Y+2	; 0x02
 5c0:	88 0f       	add	r24, r24
 5c2:	99 1f       	adc	r25, r25
 5c4:	8c 5f       	subi	r24, 0xFC	; 252
 5c6:	9e 4f       	sbci	r25, 0xFE	; 254
 5c8:	fc 01       	movw	r30, r24
 5ca:	80 81       	ld	r24, Z
 5cc:	91 81       	ldd	r25, Z+1	; 0x01
 5ce:	0e 94 9e 03 	call	0x73c	; 0x73c <setLow>
 5d2:	0b c0       	rjmp	.+22     	; 0x5ea <turnOn+0x48>
    } else { // common cathode
        setHigh(pinArray[LED]);
 5d4:	89 81       	ldd	r24, Y+1	; 0x01
 5d6:	9a 81       	ldd	r25, Y+2	; 0x02
 5d8:	88 0f       	add	r24, r24
 5da:	99 1f       	adc	r25, r25
 5dc:	8c 5f       	subi	r24, 0xFC	; 252
 5de:	9e 4f       	sbci	r25, 0xFE	; 254
 5e0:	fc 01       	movw	r30, r24
 5e2:	80 81       	ld	r24, Z
 5e4:	91 81       	ldd	r25, Z+1	; 0x01
 5e6:	0e 94 3c 03 	call	0x678	; 0x678 <setHigh>
    }
}
 5ea:	0f 90       	pop	r0
 5ec:	0f 90       	pop	r0
 5ee:	df 91       	pop	r29
 5f0:	cf 91       	pop	r28
 5f2:	08 95       	ret

000005f4 <turnAllOff>:

void turnAllOff(){
 5f4:	cf 93       	push	r28
 5f6:	df 93       	push	r29
 5f8:	00 d0       	rcall	.+0      	; 0x5fa <turnAllOff+0x6>
 5fa:	00 d0       	rcall	.+0      	; 0x5fc <turnAllOff+0x8>
 5fc:	cd b7       	in	r28, 0x3d	; 61
 5fe:	de b7       	in	r29, 0x3e	; 62
    if (type){ // common anode
 600:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 604:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 608:	89 2b       	or	r24, r25
 60a:	c1 f0       	breq	.+48     	; 0x63c <turnAllOff+0x48>
        for (int i = 0; i < 7;i++){
 60c:	1a 82       	std	Y+2, r1	; 0x02
 60e:	19 82       	std	Y+1, r1	; 0x01
 610:	10 c0       	rjmp	.+32     	; 0x632 <turnAllOff+0x3e>
            setHigh(pinArray[i]);
 612:	89 81       	ldd	r24, Y+1	; 0x01
 614:	9a 81       	ldd	r25, Y+2	; 0x02
 616:	88 0f       	add	r24, r24
 618:	99 1f       	adc	r25, r25
 61a:	8c 5f       	subi	r24, 0xFC	; 252
 61c:	9e 4f       	sbci	r25, 0xFE	; 254
 61e:	fc 01       	movw	r30, r24
 620:	80 81       	ld	r24, Z
 622:	91 81       	ldd	r25, Z+1	; 0x01
 624:	0e 94 3c 03 	call	0x678	; 0x678 <setHigh>
    }
}

void turnAllOff(){
    if (type){ // common anode
        for (int i = 0; i < 7;i++){
 628:	89 81       	ldd	r24, Y+1	; 0x01
 62a:	9a 81       	ldd	r25, Y+2	; 0x02
 62c:	01 96       	adiw	r24, 0x01	; 1
 62e:	9a 83       	std	Y+2, r25	; 0x02
 630:	89 83       	std	Y+1, r24	; 0x01
 632:	89 81       	ldd	r24, Y+1	; 0x01
 634:	9a 81       	ldd	r25, Y+2	; 0x02
 636:	07 97       	sbiw	r24, 0x07	; 7
 638:	64 f3       	brlt	.-40     	; 0x612 <turnAllOff+0x1e>
 63a:	17 c0       	rjmp	.+46     	; 0x66a <turnAllOff+0x76>
            setHigh(pinArray[i]);
        }
    } else { // common cathode
        for (int i = 0; i < 7;i++){
 63c:	1c 82       	std	Y+4, r1	; 0x04
 63e:	1b 82       	std	Y+3, r1	; 0x03
 640:	10 c0       	rjmp	.+32     	; 0x662 <turnAllOff+0x6e>
            setLow(pinArray[i]);
 642:	8b 81       	ldd	r24, Y+3	; 0x03
 644:	9c 81       	ldd	r25, Y+4	; 0x04
 646:	88 0f       	add	r24, r24
 648:	99 1f       	adc	r25, r25
 64a:	8c 5f       	subi	r24, 0xFC	; 252
 64c:	9e 4f       	sbci	r25, 0xFE	; 254
 64e:	fc 01       	movw	r30, r24
 650:	80 81       	ld	r24, Z
 652:	91 81       	ldd	r25, Z+1	; 0x01
 654:	0e 94 9e 03 	call	0x73c	; 0x73c <setLow>
    if (type){ // common anode
        for (int i = 0; i < 7;i++){
            setHigh(pinArray[i]);
        }
    } else { // common cathode
        for (int i = 0; i < 7;i++){
 658:	8b 81       	ldd	r24, Y+3	; 0x03
 65a:	9c 81       	ldd	r25, Y+4	; 0x04
 65c:	01 96       	adiw	r24, 0x01	; 1
 65e:	9c 83       	std	Y+4, r25	; 0x04
 660:	8b 83       	std	Y+3, r24	; 0x03
 662:	8b 81       	ldd	r24, Y+3	; 0x03
 664:	9c 81       	ldd	r25, Y+4	; 0x04
 666:	07 97       	sbiw	r24, 0x07	; 7
 668:	64 f3       	brlt	.-40     	; 0x642 <turnAllOff+0x4e>
            setLow(pinArray[i]);
        }
    }
}
 66a:	0f 90       	pop	r0
 66c:	0f 90       	pop	r0
 66e:	0f 90       	pop	r0
 670:	0f 90       	pop	r0
 672:	df 91       	pop	r29
 674:	cf 91       	pop	r28
 676:	08 95       	ret

00000678 <setHigh>:

void setHigh(int LED){
 678:	cf 93       	push	r28
 67a:	df 93       	push	r29
 67c:	00 d0       	rcall	.+0      	; 0x67e <setHigh+0x6>
 67e:	cd b7       	in	r28, 0x3d	; 61
 680:	de b7       	in	r29, 0x3e	; 62
 682:	9a 83       	std	Y+2, r25	; 0x02
 684:	89 83       	std	Y+1, r24	; 0x01
    if (LED >= 0 && LED <=7){ //port D
 686:	89 81       	ldd	r24, Y+1	; 0x01
 688:	9a 81       	ldd	r25, Y+2	; 0x02
 68a:	99 23       	and	r25, r25
 68c:	b4 f0       	brlt	.+44     	; 0x6ba <setHigh+0x42>
 68e:	89 81       	ldd	r24, Y+1	; 0x01
 690:	9a 81       	ldd	r25, Y+2	; 0x02
 692:	08 97       	sbiw	r24, 0x08	; 8
 694:	94 f4       	brge	.+36     	; 0x6ba <setHigh+0x42>
        PORTD |= (1 << LED);
 696:	8b e2       	ldi	r24, 0x2B	; 43
 698:	90 e0       	ldi	r25, 0x00	; 0
 69a:	2b e2       	ldi	r18, 0x2B	; 43
 69c:	30 e0       	ldi	r19, 0x00	; 0
 69e:	f9 01       	movw	r30, r18
 6a0:	20 81       	ld	r18, Z
 6a2:	42 2f       	mov	r20, r18
 6a4:	21 e0       	ldi	r18, 0x01	; 1
 6a6:	30 e0       	ldi	r19, 0x00	; 0
 6a8:	09 80       	ldd	r0, Y+1	; 0x01
 6aa:	02 c0       	rjmp	.+4      	; 0x6b0 <setHigh+0x38>
 6ac:	22 0f       	add	r18, r18
 6ae:	33 1f       	adc	r19, r19
 6b0:	0a 94       	dec	r0
 6b2:	e2 f7       	brpl	.-8      	; 0x6ac <setHigh+0x34>
 6b4:	24 2b       	or	r18, r20
 6b6:	fc 01       	movw	r30, r24
 6b8:	20 83       	st	Z, r18
    }
    if (LED >= 8 && LED <=13){ //port B
 6ba:	89 81       	ldd	r24, Y+1	; 0x01
 6bc:	9a 81       	ldd	r25, Y+2	; 0x02
 6be:	08 97       	sbiw	r24, 0x08	; 8
 6c0:	d4 f0       	brlt	.+52     	; 0x6f6 <setHigh+0x7e>
 6c2:	89 81       	ldd	r24, Y+1	; 0x01
 6c4:	9a 81       	ldd	r25, Y+2	; 0x02
 6c6:	0e 97       	sbiw	r24, 0x0e	; 14
 6c8:	b4 f4       	brge	.+44     	; 0x6f6 <setHigh+0x7e>
        PORTB |= (1 << (LED-8));
 6ca:	85 e2       	ldi	r24, 0x25	; 37
 6cc:	90 e0       	ldi	r25, 0x00	; 0
 6ce:	25 e2       	ldi	r18, 0x25	; 37
 6d0:	30 e0       	ldi	r19, 0x00	; 0
 6d2:	f9 01       	movw	r30, r18
 6d4:	20 81       	ld	r18, Z
 6d6:	62 2f       	mov	r22, r18
 6d8:	29 81       	ldd	r18, Y+1	; 0x01
 6da:	3a 81       	ldd	r19, Y+2	; 0x02
 6dc:	a9 01       	movw	r20, r18
 6de:	48 50       	subi	r20, 0x08	; 8
 6e0:	51 09       	sbc	r21, r1
 6e2:	21 e0       	ldi	r18, 0x01	; 1
 6e4:	30 e0       	ldi	r19, 0x00	; 0
 6e6:	02 c0       	rjmp	.+4      	; 0x6ec <setHigh+0x74>
 6e8:	22 0f       	add	r18, r18
 6ea:	33 1f       	adc	r19, r19
 6ec:	4a 95       	dec	r20
 6ee:	e2 f7       	brpl	.-8      	; 0x6e8 <setHigh+0x70>
 6f0:	26 2b       	or	r18, r22
 6f2:	fc 01       	movw	r30, r24
 6f4:	20 83       	st	Z, r18
    }
    if (LED >= 14 && LED <=19){ //port C
 6f6:	89 81       	ldd	r24, Y+1	; 0x01
 6f8:	9a 81       	ldd	r25, Y+2	; 0x02
 6fa:	0e 97       	sbiw	r24, 0x0e	; 14
 6fc:	d4 f0       	brlt	.+52     	; 0x732 <setHigh+0xba>
 6fe:	89 81       	ldd	r24, Y+1	; 0x01
 700:	9a 81       	ldd	r25, Y+2	; 0x02
 702:	44 97       	sbiw	r24, 0x14	; 20
 704:	b4 f4       	brge	.+44     	; 0x732 <setHigh+0xba>
        PORTC |= (1 << (LED-14));
 706:	88 e2       	ldi	r24, 0x28	; 40
 708:	90 e0       	ldi	r25, 0x00	; 0
 70a:	28 e2       	ldi	r18, 0x28	; 40
 70c:	30 e0       	ldi	r19, 0x00	; 0
 70e:	f9 01       	movw	r30, r18
 710:	20 81       	ld	r18, Z
 712:	62 2f       	mov	r22, r18
 714:	29 81       	ldd	r18, Y+1	; 0x01
 716:	3a 81       	ldd	r19, Y+2	; 0x02
 718:	a9 01       	movw	r20, r18
 71a:	4e 50       	subi	r20, 0x0E	; 14
 71c:	51 09       	sbc	r21, r1
 71e:	21 e0       	ldi	r18, 0x01	; 1
 720:	30 e0       	ldi	r19, 0x00	; 0
 722:	02 c0       	rjmp	.+4      	; 0x728 <setHigh+0xb0>
 724:	22 0f       	add	r18, r18
 726:	33 1f       	adc	r19, r19
 728:	4a 95       	dec	r20
 72a:	e2 f7       	brpl	.-8      	; 0x724 <setHigh+0xac>
 72c:	26 2b       	or	r18, r22
 72e:	fc 01       	movw	r30, r24
 730:	20 83       	st	Z, r18
    }
}
 732:	0f 90       	pop	r0
 734:	0f 90       	pop	r0
 736:	df 91       	pop	r29
 738:	cf 91       	pop	r28
 73a:	08 95       	ret

0000073c <setLow>:

void setLow(int LED){
 73c:	cf 93       	push	r28
 73e:	df 93       	push	r29
 740:	00 d0       	rcall	.+0      	; 0x742 <setLow+0x6>
 742:	cd b7       	in	r28, 0x3d	; 61
 744:	de b7       	in	r29, 0x3e	; 62
 746:	9a 83       	std	Y+2, r25	; 0x02
 748:	89 83       	std	Y+1, r24	; 0x01
    if (LED >= 0 && LED <=7){ //port D
 74a:	89 81       	ldd	r24, Y+1	; 0x01
 74c:	9a 81       	ldd	r25, Y+2	; 0x02
 74e:	99 23       	and	r25, r25
 750:	bc f0       	brlt	.+46     	; 0x780 <setLow+0x44>
 752:	89 81       	ldd	r24, Y+1	; 0x01
 754:	9a 81       	ldd	r25, Y+2	; 0x02
 756:	08 97       	sbiw	r24, 0x08	; 8
 758:	9c f4       	brge	.+38     	; 0x780 <setLow+0x44>
        PORTD &= ~(1 << LED);
 75a:	8b e2       	ldi	r24, 0x2B	; 43
 75c:	90 e0       	ldi	r25, 0x00	; 0
 75e:	2b e2       	ldi	r18, 0x2B	; 43
 760:	30 e0       	ldi	r19, 0x00	; 0
 762:	f9 01       	movw	r30, r18
 764:	20 81       	ld	r18, Z
 766:	42 2f       	mov	r20, r18
 768:	21 e0       	ldi	r18, 0x01	; 1
 76a:	30 e0       	ldi	r19, 0x00	; 0
 76c:	09 80       	ldd	r0, Y+1	; 0x01
 76e:	02 c0       	rjmp	.+4      	; 0x774 <setLow+0x38>
 770:	22 0f       	add	r18, r18
 772:	33 1f       	adc	r19, r19
 774:	0a 94       	dec	r0
 776:	e2 f7       	brpl	.-8      	; 0x770 <setLow+0x34>
 778:	20 95       	com	r18
 77a:	24 23       	and	r18, r20
 77c:	fc 01       	movw	r30, r24
 77e:	20 83       	st	Z, r18
    }
    if (LED >= 8 && LED <=13){ //port B
 780:	89 81       	ldd	r24, Y+1	; 0x01
 782:	9a 81       	ldd	r25, Y+2	; 0x02
 784:	08 97       	sbiw	r24, 0x08	; 8
 786:	dc f0       	brlt	.+54     	; 0x7be <setLow+0x82>
 788:	89 81       	ldd	r24, Y+1	; 0x01
 78a:	9a 81       	ldd	r25, Y+2	; 0x02
 78c:	0e 97       	sbiw	r24, 0x0e	; 14
 78e:	bc f4       	brge	.+46     	; 0x7be <setLow+0x82>
        PORTB &= ~(1 << (LED-8));
 790:	85 e2       	ldi	r24, 0x25	; 37
 792:	90 e0       	ldi	r25, 0x00	; 0
 794:	25 e2       	ldi	r18, 0x25	; 37
 796:	30 e0       	ldi	r19, 0x00	; 0
 798:	f9 01       	movw	r30, r18
 79a:	20 81       	ld	r18, Z
 79c:	62 2f       	mov	r22, r18
 79e:	29 81       	ldd	r18, Y+1	; 0x01
 7a0:	3a 81       	ldd	r19, Y+2	; 0x02
 7a2:	a9 01       	movw	r20, r18
 7a4:	48 50       	subi	r20, 0x08	; 8
 7a6:	51 09       	sbc	r21, r1
 7a8:	21 e0       	ldi	r18, 0x01	; 1
 7aa:	30 e0       	ldi	r19, 0x00	; 0
 7ac:	02 c0       	rjmp	.+4      	; 0x7b2 <setLow+0x76>
 7ae:	22 0f       	add	r18, r18
 7b0:	33 1f       	adc	r19, r19
 7b2:	4a 95       	dec	r20
 7b4:	e2 f7       	brpl	.-8      	; 0x7ae <setLow+0x72>
 7b6:	20 95       	com	r18
 7b8:	26 23       	and	r18, r22
 7ba:	fc 01       	movw	r30, r24
 7bc:	20 83       	st	Z, r18
    }
    if (LED >= 14 && LED <=19){ //port C
 7be:	89 81       	ldd	r24, Y+1	; 0x01
 7c0:	9a 81       	ldd	r25, Y+2	; 0x02
 7c2:	0e 97       	sbiw	r24, 0x0e	; 14
 7c4:	dc f0       	brlt	.+54     	; 0x7fc <setLow+0xc0>
 7c6:	89 81       	ldd	r24, Y+1	; 0x01
 7c8:	9a 81       	ldd	r25, Y+2	; 0x02
 7ca:	44 97       	sbiw	r24, 0x14	; 20
 7cc:	bc f4       	brge	.+46     	; 0x7fc <setLow+0xc0>
        PORTC &= ~(1 << (LED-14));
 7ce:	88 e2       	ldi	r24, 0x28	; 40
 7d0:	90 e0       	ldi	r25, 0x00	; 0
 7d2:	28 e2       	ldi	r18, 0x28	; 40
 7d4:	30 e0       	ldi	r19, 0x00	; 0
 7d6:	f9 01       	movw	r30, r18
 7d8:	20 81       	ld	r18, Z
 7da:	62 2f       	mov	r22, r18
 7dc:	29 81       	ldd	r18, Y+1	; 0x01
 7de:	3a 81       	ldd	r19, Y+2	; 0x02
 7e0:	a9 01       	movw	r20, r18
 7e2:	4e 50       	subi	r20, 0x0E	; 14
 7e4:	51 09       	sbc	r21, r1
 7e6:	21 e0       	ldi	r18, 0x01	; 1
 7e8:	30 e0       	ldi	r19, 0x00	; 0
 7ea:	02 c0       	rjmp	.+4      	; 0x7f0 <setLow+0xb4>
 7ec:	22 0f       	add	r18, r18
 7ee:	33 1f       	adc	r19, r19
 7f0:	4a 95       	dec	r20
 7f2:	e2 f7       	brpl	.-8      	; 0x7ec <setLow+0xb0>
 7f4:	20 95       	com	r18
 7f6:	26 23       	and	r18, r22
 7f8:	fc 01       	movw	r30, r24
 7fa:	20 83       	st	Z, r18
    }
}
 7fc:	0f 90       	pop	r0
 7fe:	0f 90       	pop	r0
 800:	df 91       	pop	r29
 802:	cf 91       	pop	r28
 804:	08 95       	ret

00000806 <init_timer>:

void init_timer(){
 806:	cf 93       	push	r28
 808:	df 93       	push	r29
 80a:	cd b7       	in	r28, 0x3d	; 61
 80c:	de b7       	in	r29, 0x3e	; 62
    TCCR0A |= (1 << WGM01); // CTC mode
 80e:	84 e4       	ldi	r24, 0x44	; 68
 810:	90 e0       	ldi	r25, 0x00	; 0
 812:	24 e4       	ldi	r18, 0x44	; 68
 814:	30 e0       	ldi	r19, 0x00	; 0
 816:	f9 01       	movw	r30, r18
 818:	20 81       	ld	r18, Z
 81a:	22 60       	ori	r18, 0x02	; 2
 81c:	fc 01       	movw	r30, r24
 81e:	20 83       	st	Z, r18
    OCR0A = 250; // 250 ticks = 1 ms
 820:	87 e4       	ldi	r24, 0x47	; 71
 822:	90 e0       	ldi	r25, 0x00	; 0
 824:	2a ef       	ldi	r18, 0xFA	; 250
 826:	fc 01       	movw	r30, r24
 828:	20 83       	st	Z, r18
    TIMSK0 |= (1 << OCIE0A); // setting the output compare interrupt
 82a:	8e e6       	ldi	r24, 0x6E	; 110
 82c:	90 e0       	ldi	r25, 0x00	; 0
 82e:	2e e6       	ldi	r18, 0x6E	; 110
 830:	30 e0       	ldi	r19, 0x00	; 0
 832:	f9 01       	movw	r30, r18
 834:	20 81       	ld	r18, Z
 836:	22 60       	ori	r18, 0x02	; 2
 838:	fc 01       	movw	r30, r24
 83a:	20 83       	st	Z, r18
    sei(); // setting external interrupt
 83c:	78 94       	sei
    TCCR0B |= (1 << CS00) | (1 << CS01); // starts up the timer with prescaler of 64
 83e:	85 e4       	ldi	r24, 0x45	; 69
 840:	90 e0       	ldi	r25, 0x00	; 0
 842:	25 e4       	ldi	r18, 0x45	; 69
 844:	30 e0       	ldi	r19, 0x00	; 0
 846:	f9 01       	movw	r30, r18
 848:	20 81       	ld	r18, Z
 84a:	23 60       	ori	r18, 0x03	; 3
 84c:	fc 01       	movw	r30, r24
 84e:	20 83       	st	Z, r18
}
 850:	df 91       	pop	r29
 852:	cf 91       	pop	r28
 854:	08 95       	ret

00000856 <__vector_14>:

ISR(TIMER0_COMPA_vect){
 856:	1f 92       	push	r1
 858:	0f 92       	push	r0
 85a:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 85e:	0f 92       	push	r0
 860:	11 24       	eor	r1, r1
 862:	8f 93       	push	r24
 864:	9f 93       	push	r25
 866:	cf 93       	push	r28
 868:	df 93       	push	r29
 86a:	cd b7       	in	r28, 0x3d	; 61
 86c:	de b7       	in	r29, 0x3e	; 62
    delayCount++;
 86e:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <delayCount>
 872:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <delayCount+0x1>
 876:	01 96       	adiw	r24, 0x01	; 1
 878:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <delayCount+0x1>
 87c:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <delayCount>
}
 880:	df 91       	pop	r29
 882:	cf 91       	pop	r28
 884:	9f 91       	pop	r25
 886:	8f 91       	pop	r24
 888:	0f 90       	pop	r0
 88a:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 88e:	0f 90       	pop	r0
 890:	1f 90       	pop	r1
 892:	18 95       	reti

00000894 <delay>:

void delay(uint16_t ms){
 894:	cf 93       	push	r28
 896:	df 93       	push	r29
 898:	00 d0       	rcall	.+0      	; 0x89a <delay+0x6>
 89a:	cd b7       	in	r28, 0x3d	; 61
 89c:	de b7       	in	r29, 0x3e	; 62
 89e:	9a 83       	std	Y+2, r25	; 0x02
 8a0:	89 83       	std	Y+1, r24	; 0x01
    delayCount = 0;
 8a2:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <delayCount+0x1>
 8a6:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <delayCount>
    while (delayCount<ms);
 8aa:	00 00       	nop
 8ac:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <delayCount>
 8b0:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <delayCount+0x1>
 8b4:	9c 01       	movw	r18, r24
 8b6:	89 81       	ldd	r24, Y+1	; 0x01
 8b8:	9a 81       	ldd	r25, Y+2	; 0x02
 8ba:	28 17       	cp	r18, r24
 8bc:	39 07       	cpc	r19, r25
 8be:	b0 f3       	brcs	.-20     	; 0x8ac <delay+0x18>
}
 8c0:	0f 90       	pop	r0
 8c2:	0f 90       	pop	r0
 8c4:	df 91       	pop	r29
 8c6:	cf 91       	pop	r28
 8c8:	08 95       	ret

000008ca <__tablejump2__>:
 8ca:	ee 0f       	add	r30, r30
 8cc:	ff 1f       	adc	r31, r31
 8ce:	05 90       	lpm	r0, Z+
 8d0:	f4 91       	lpm	r31, Z
 8d2:	e0 2d       	mov	r30, r0
 8d4:	09 94       	ijmp

000008d6 <_exit>:
 8d6:	f8 94       	cli

000008d8 <__stop_program>:
 8d8:	ff cf       	rjmp	.-2      	; 0x8d8 <__stop_program>
